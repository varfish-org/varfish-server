// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { HpoGenesData, HpoGenesError, HpoGenesResponse, HpoOmimsData, HpoOmimsError, HpoOmimsResponse, HpoSimTermGeneData, HpoSimTermGeneError, HpoSimTermGeneResponse, HpoSimTermTermData, HpoSimTermTermError, HpoSimTermTermResponse, HpoTermsData, HpoTermsError, HpoTermsResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Query for genes in the HPO database.
 */
export const hpoGenes = <ThrowOnError extends boolean = false>(options?: Options<HpoGenesData, ThrowOnError>) => { return (options?.client ?? client).get<HpoGenesResponse, HpoGenesError, ThrowOnError>({
    ...options,
    url: '/hpo/genes'
}); };

/**
 * Query for OMIM diseases in the HPO database.
 */
export const hpoOmims = <ThrowOnError extends boolean = false>(options?: Options<HpoOmimsData, ThrowOnError>) => { return (options?.client ?? client).get<HpoOmimsResponse, HpoOmimsError, ThrowOnError>({
    ...options,
    url: '/hpo/omims'
}); };

/**
 * Query for similarity between a set of terms to each entry in a
 * list of genes.
 */
export const hpoSimTermGene = <ThrowOnError extends boolean = false>(options: Options<HpoSimTermGeneData, ThrowOnError>) => { return (options?.client ?? client).get<HpoSimTermGeneResponse, HpoSimTermGeneError, ThrowOnError>({
    ...options,
    url: '/hpo/sim/term-gene'
}); };

/**
 * Query for pairwise term similarity.
 * In the case of Resnik, this corresponds to `IC(MICA(t_1, t_2))`.
 *
 * # Errors
 *
 * In the case that there is an error running the server.
 */
export const hpoSimTermTerm = <ThrowOnError extends boolean = false>(options: Options<HpoSimTermTermData, ThrowOnError>) => { return (options?.client ?? client).get<HpoSimTermTermResponse, HpoSimTermTermError, ThrowOnError>({
    ...options,
    url: '/hpo/sim/term-term'
}); };

/**
 * Query for terms in the HPO database.
 * # Errors
 *
 * In the case that there is an error running the server.
 */
export const hpoTerms = <ThrowOnError extends boolean = false>(options?: Options<HpoTermsData, ThrowOnError>) => { return (options?.client ?? client).get<HpoTermsResponse, HpoTermsError, ThrowOnError>({
    ...options,
    url: '/hpo/terms'
}); };