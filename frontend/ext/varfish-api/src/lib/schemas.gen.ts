// This file is auto-generated by @hey-api/openapi-ts

export const $ActionEnum = {
    enum: ['create', 'update', 'delete'],
    type: 'string',
    description: `* \`create\` - create
* \`update\` - update
* \`delete\` - delete`
} as const;

export const $AnnotationReleaseInfo = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        genomebuild: {
            type: 'string',
            readOnly: true
        },
        table: {
            type: 'string',
            readOnly: true
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        release: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['genomebuild', 'release', 'table', 'timestamp']
} as const;

export const $BcftoolsStatsAfRecordList = {
    type: 'array',
    items: {
        description: `A Record from the \`\`AF\`\` (non-reference allele frequency) lines in \`\`bcftools stats\`\`
output.`,
        properties: {
            af: {
                title: 'Af',
                type: 'number'
            },
            snps: {
                title: 'Snps',
                type: 'integer'
            },
            ts: {
                title: 'Ts',
                type: 'integer'
            },
            tv: {
                title: 'Tv',
                type: 'integer'
            },
            indels: {
                title: 'Indels',
                type: 'integer'
            },
            repeat_consistent: {
                title: 'Repeat Consistent',
                type: 'integer'
            },
            repeat_inconsistent: {
                title: 'Repeat Inconsistent',
                type: 'integer'
            },
            na: {
                title: 'Na',
                type: 'integer'
            }
        },
        required: ['af', 'snps', 'ts', 'tv', 'indels', 'repeat_consistent', 'repeat_inconsistent', 'na'],
        title: 'BcftoolsStatsAfRecord',
        type: 'object'
    }
} as const;

export const $BcftoolsStatsDpRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``DP`` (AF) lines in ``bcftools stats`` output.',
        properties: {
            bin: {
                title: 'Bin',
                type: 'integer'
            },
            gts: {
                title: 'Gts',
                type: 'integer'
            },
            gts_frac: {
                title: 'Gts Frac',
                type: 'number'
            },
            sites: {
                title: 'Sites',
                type: 'integer'
            },
            sites_frac: {
                title: 'Sites Frac',
                type: 'number'
            }
        },
        required: ['bin', 'gts', 'gts_frac', 'sites', 'sites_frac'],
        title: 'BcftoolsStatsDpRecord',
        type: 'object'
    }
} as const;

export const $BcftoolsStatsIddRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``IDD`` (indel distribution) lines in ``bcftools stats`` output.',
        properties: {
            length: {
                title: 'Length',
                type: 'integer'
            },
            sites: {
                title: 'Sites',
                type: 'integer'
            },
            gts: {
                title: 'Gts',
                type: 'integer'
            },
            mean_vaf: {
                anyOf: [
                    {
                        type: 'number'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Mean Vaf'
            }
        },
        required: ['length', 'sites', 'gts', 'mean_vaf'],
        title: 'BcftoolsStatsIddRecord',
        type: 'object'
    }
} as const;

export const $BcftoolsStatsMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        sn: {
            '$ref': '#/components/schemas/BcftoolsStatsSnRecordList'
        },
        tstv: {
            '$ref': '#/components/schemas/BcftoolsStatsTstvRecordList'
        },
        sis: {
            '$ref': '#/components/schemas/BcftoolsStatsSisRecordList'
        },
        af: {
            '$ref': '#/components/schemas/BcftoolsStatsAfRecordList'
        },
        qual: {
            '$ref': '#/components/schemas/BcftoolsStatsQualRecordList'
        },
        idd: {
            '$ref': '#/components/schemas/BcftoolsStatsIddRecordList'
        },
        st: {
            '$ref': '#/components/schemas/BcftoolsStatsStRecordList'
        },
        dp: {
            '$ref': '#/components/schemas/BcftoolsStatsDpRecordList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['af', 'caseqc', 'date_created', 'date_modified', 'dp', 'idd', 'qual', 'sis', 'sn', 'sodar_uuid', 'st', 'tstv']
} as const;

export const $BcftoolsStatsQualRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``QUAL`` (quality) lines in ``bcftools stats`` output.',
        properties: {
            qual: {
                anyOf: [
                    {
                        type: 'number'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Qual'
            },
            snps: {
                title: 'Snps',
                type: 'integer'
            },
            ts: {
                title: 'Ts',
                type: 'integer'
            },
            tv: {
                title: 'Tv',
                type: 'integer'
            },
            indels: {
                title: 'Indels',
                type: 'integer'
            }
        },
        required: ['qual', 'snps', 'ts', 'tv', 'indels'],
        title: 'BcftoolsStatsQualRecord',
        type: 'object'
    }
} as const;

export const $BcftoolsStatsSisRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``SiS`` (singleton stats) lines in ``bcftools stats`` output.',
        properties: {
            total: {
                title: 'Total',
                type: 'integer'
            },
            snps: {
                title: 'Snps',
                type: 'integer'
            },
            ts: {
                title: 'Ts',
                type: 'integer'
            },
            tv: {
                title: 'Tv',
                type: 'integer'
            },
            indels: {
                title: 'Indels',
                type: 'integer'
            },
            repeat_consistent: {
                title: 'Repeat Consistent',
                type: 'integer'
            },
            repeat_inconsistent: {
                title: 'Repeat Inconsistent',
                type: 'integer'
            }
        },
        required: ['total', 'snps', 'ts', 'tv', 'indels', 'repeat_consistent', 'repeat_inconsistent'],
        title: 'BcftoolsStatsSisRecord',
        type: 'object'
    }
} as const;

export const $BcftoolsStatsSnRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``SN`` lines in ``bcftools stats`` output.',
        properties: {
            key: {
                title: 'Key',
                type: 'string'
            },
            value: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    },
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Value'
            }
        },
        required: ['key', 'value'],
        title: 'BcftoolsStatsSnRecord',
        type: 'object'
    }
} as const;

export const $BcftoolsStatsStRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``ST`` (substitution types) lines in ``bcftools stats`` output.',
        properties: {
            type: {
                title: 'Type',
                type: 'string'
            },
            count: {
                title: 'Count',
                type: 'integer'
            }
        },
        required: ['type', 'count'],
        title: 'BcftoolsStatsStRecord',
        type: 'object'
    }
} as const;

export const $BcftoolsStatsTstvRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``TSTV`` lines in ``bcftools stats`` output.',
        properties: {
            ts: {
                title: 'Ts',
                type: 'integer'
            },
            tv: {
                title: 'Tv',
                type: 'integer'
            },
            tstv: {
                title: 'Tstv',
                type: 'number'
            },
            ts_1st_alt: {
                title: 'Ts 1St Alt',
                type: 'integer'
            },
            tv_1st_alt: {
                title: 'Tv 1St Alt',
                type: 'integer'
            },
            tstv_1st_alt: {
                title: 'Tstv 1St Alt',
                type: 'number'
            }
        },
        required: ['ts', 'tv', 'tstv', 'ts_1st_alt', 'tv_1st_alt', 'tstv_1st_alt'],
        title: 'BcftoolsStatsTstvRecord',
        type: 'object'
    }
} as const;

export const $CaseAnalysis = {
    type: 'object',
    description: 'Serializer for ``CaseAnalysis``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        case: {
            type: 'string',
            format: 'uuid',
            description: 'Case SODAR UUID',
            readOnly: true
        }
    },
    required: ['case', 'date_created', 'date_modified', 'sodar_uuid']
} as const;

export const $CaseAnalysisSession = {
    type: 'object',
    description: 'Serializer for ``CaseAnalysisSession``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        caseanalysis: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        case: {
            type: 'string',
            format: 'uuid',
            description: 'Case SODAR UUID',
            readOnly: true
        },
        user: {
            type: 'string',
            format: 'uuid',
            description: 'User SODAR UUID',
            readOnly: true
        }
    },
    required: ['case', 'caseanalysis', 'date_created', 'date_modified', 'sodar_uuid', 'user']
} as const;

export const $CaseComment = {
    type: 'object',
    description: 'Serializer for ``CaseComments``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        case: {
            type: 'string',
            format: 'uuid',
            description: 'Case SODAR UUID',
            readOnly: true
        },
        user: {
            type: 'string',
            description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
            readOnly: true
        },
        comment: {
            type: 'string'
        }
    },
    required: ['case', 'comment', 'date_created', 'date_modified', 'sodar_uuid', 'user']
} as const;

export const $CaseImportAction = {
    type: 'object',
    description: 'Serializer for the ``CaseImportAction`` model.',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        project: {
            type: 'string',
            format: 'uuid',
            description: 'Project SODAR UUID',
            readOnly: true
        },
        state: {
            '$ref': '#/components/schemas/CaseImportActionStateEnum'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        action: {
            '$ref': '#/components/schemas/ActionEnum'
        },
        payload: {},
        overwrite_terms: {
            type: 'boolean'
        }
    },
    required: ['date_created', 'date_modified', 'payload', 'project', 'sodar_uuid', 'state']
} as const;

export const $CaseImportActionStateEnum = {
    enum: ['draft', 'submitted'],
    type: 'string',
    description: `* \`draft\` - draft
* \`submitted\` - submitted`
} as const;

export const $CasePhenotypeTerms = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        case: {
            type: 'string',
            format: 'uuid',
            description: 'Case SODAR UUID',
            readOnly: true
        },
        individual: {
            type: 'string',
            description: 'Individual',
            maxLength: 128
        },
        terms: {}
    },
    required: ['case', 'date_created', 'date_modified', 'individual', 'sodar_uuid', 'terms']
} as const;

export const $CaseQc = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        case: {
            type: 'string',
            format: 'uuid',
            description: 'Case SODAR UUID',
            readOnly: true
        },
        dragen_cnvmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenCnvMetrics'
            },
            readOnly: true
        },
        dragen_fragmentlengthhistograms: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenFragmentLengthHistogram'
            },
            readOnly: true
        },
        dragen_mappingmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenMappingMetrics'
            },
            readOnly: true
        },
        dragen_ploidyestimationmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenPloidyEstimationMetrics'
            },
            readOnly: true
        },
        dragen_rohmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenRohMetrics'
            },
            readOnly: true
        },
        dragen_vchethomratiometrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenVcHethomRatioMetrics'
            },
            readOnly: true
        },
        dragen_vcmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenVcMetrics'
            },
            readOnly: true
        },
        dragen_svmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenSvMetrics'
            },
            readOnly: true
        },
        dragen_timemetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenTimeMetrics'
            },
            readOnly: true
        },
        dragen_trimmermetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenTrimmerMetrics'
            },
            readOnly: true
        },
        dragen_wgscoveragemetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenWgsCoverageMetrics'
            },
            readOnly: true
        },
        dragen_wgscontigmeancovmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenWgsContigMeanCovMetrics'
            },
            readOnly: true
        },
        dragen_wgsoverallmeancov: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenWgsOverallMeanCov'
            },
            readOnly: true
        },
        dragen_wgsfinehist: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenWgsFineHist'
            },
            readOnly: true
        },
        dragen_wgshist: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenWgsHist'
            },
            readOnly: true
        },
        dragen_regioncoveragemetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenRegionCoverageMetrics'
            },
            readOnly: true
        },
        dragen_regionfinehist: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenRegionFineHist'
            },
            readOnly: true
        },
        dragen_regionhist: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenRegionHist'
            },
            readOnly: true
        },
        dragen_regionoverallmeancov: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DragenRegionOverallMeanCov'
            },
            readOnly: true
        },
        bcftools_statsmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BcftoolsStatsMetrics'
            },
            readOnly: true
        },
        samtools_statsmainmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamtoolsStatsMainMetrics'
            },
            readOnly: true
        },
        samtools_statssupplementarymetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamtoolsStatsSupplementaryMetrics'
            },
            readOnly: true
        },
        samtools_flagstatmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamtoolsFlagstatMetrics'
            },
            readOnly: true
        },
        samtools_idxstatsmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamtoolsIdxstatsMetrics'
            },
            readOnly: true
        },
        cramino_metrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CraminoMetrics'
            },
            readOnly: true
        },
        ngsbits_mappingqcmetrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NgsbitsMappingqcMetrics'
            },
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        state: {
            '$ref': '#/components/schemas/CaseQcStateEnum'
        }
    },
    required: ['bcftools_statsmetrics', 'case', 'cramino_metrics', 'date_created', 'date_modified', 'dragen_cnvmetrics', 'dragen_fragmentlengthhistograms', 'dragen_mappingmetrics', 'dragen_ploidyestimationmetrics', 'dragen_regioncoveragemetrics', 'dragen_regionfinehist', 'dragen_regionhist', 'dragen_regionoverallmeancov', 'dragen_rohmetrics', 'dragen_svmetrics', 'dragen_timemetrics', 'dragen_trimmermetrics', 'dragen_vchethomratiometrics', 'dragen_vcmetrics', 'dragen_wgscontigmeancovmetrics', 'dragen_wgscoveragemetrics', 'dragen_wgsfinehist', 'dragen_wgshist', 'dragen_wgsoverallmeancov', 'ngsbits_mappingqcmetrics', 'samtools_flagstatmetrics', 'samtools_idxstatsmetrics', 'samtools_statsmainmetrics', 'samtools_statssupplementarymetrics', 'sodar_uuid']
} as const;

export const $CaseQcStateEnum = {
    enum: ['DRAFT', 'ACTIVE'],
    type: 'string',
    description: `* \`DRAFT\` - DRAFT
* \`ACTIVE\` - ACTIVE`
} as const;

export const $CaseSerializerNg = {
    type: 'object',
    description: `Serializer for the \`\`Case\`\` model.

In contrast to the old (legacy) \`\`CaseSerializer\`\` from \`\`variants.serializers.case\`\`, this class does not
perform serialization of nested attributes and thus does not trigger a large query cascade.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        project: {
            type: 'string',
            format: 'uuid',
            description: 'Project SODAR UUID',
            readOnly: true
        },
        presetset: {
            type: 'string',
            format: 'uuid',
            description: 'Cohort SODAR UUID',
            readOnly: true
        },
        sex_errors: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            readOnly: true
        },
        smallvariantqueryresultset: {
            type: 'object',
            additionalProperties: {
                oneOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number',
                        format: 'double'
                    },
                    {
                        type: 'string'
                    }
                ],
                nullable: true
            },
            readOnly: true
        },
        svqueryresultset: {
            type: 'object',
            additionalProperties: {
                oneOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number',
                        format: 'double'
                    },
                    {
                        type: 'string'
                    }
                ],
                nullable: true
            },
            readOnly: true
        },
        caseqc: {
            type: 'object',
            additionalProperties: {
                oneOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number',
                        format: 'double'
                    },
                    {
                        type: 'string'
                    }
                ],
                nullable: true
            },
            nullable: true,
            description: `Obtain the latest CaseQC for this in active state and serialize it.

If there is no such record then return \`\`None\`\`.`,
            readOnly: true
        },
        release: {
            type: 'string',
            readOnly: true,
            nullable: true
        },
        name: {
            type: 'string',
            maxLength: 512
        },
        index: {
            type: 'string',
            maxLength: 512
        },
        pedigree: {},
        notes: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/CaseStatusEnum'
        },
        tags: {
            type: 'array',
            items: {
                type: 'string',
                maxLength: 32
            },
            nullable: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        case_version: {
            type: 'integer',
            maximum: 2147483647,
            minimum: -2147483648
        },
        state: {
            readOnly: true,
            nullable: true,
            oneOf: [
                {
                    '$ref': '#/components/schemas/CaseSerializerNgStateEnum'
                },
                {
                    '$ref': '#/components/schemas/NullEnum'
                }
            ]
        },
        num_small_vars: {
            type: 'integer',
            readOnly: true,
            nullable: true,
            title: 'Small variants',
            description: 'Number of small variants, empty if no small variants have been imported'
        },
        num_svs: {
            type: 'integer',
            readOnly: true,
            nullable: true,
            title: 'Structural variants',
            description: 'Number of structural variants, empty if no structural variants have been imported'
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'index', 'name', 'num_small_vars', 'num_svs', 'pedigree', 'presetset', 'project', 'release', 'sex_errors', 'smallvariantqueryresultset', 'sodar_uuid', 'state', 'svqueryresultset']
} as const;

export const $CaseSerializerNgStateEnum = {
    enum: ['importing', 'updating', 'active', 'deleting'],
    type: 'string',
    description: `* \`importing\` - importing
* \`updating\` - updating
* \`active\` - active
* \`deleting\` - deleting`
} as const;

export const $CaseStatusEnum = {
    enum: ['initial', 'active', 'closed-unsolved', 'closed-uncertain', 'closed-solved'],
    type: 'string',
    description: `* \`initial\` - initial
* \`active\` - active
* \`closed-unsolved\` - closed as unsolved
* \`closed-uncertain\` - closed as uncertain
* \`closed-solved\` - closed as solved`
} as const;

export const $ClinvarGermlineAggregateDescriptionList = {
    type: 'array',
    items: {
        type: 'string',
        title: 'ClinvarGermlineAggregateDescription',
        enum: ['pathogenic', 'likely_pathogenic', 'uncertain_significance', 'likely_benign', 'benign']
    }
} as const;

export const $CraminoChromNormalizedCountsRecordList = {
    type: 'array',
    items: {
        description: 'Store one chrom/normalized read counts record from Cramino output.',
        properties: {
            chrom_name: {
                title: 'Chrom Name',
                type: 'string'
            },
            normalized_counts: {
                title: 'Normalized Counts',
                type: 'number'
            }
        },
        required: ['chrom_name', 'normalized_counts'],
        title: 'CraminoChromNormalizedCountsRecord',
        type: 'object'
    }
} as const;

export const $CraminoMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        summary: {
            '$ref': '#/components/schemas/CraminoSummaryRecordList'
        },
        chrom_counts: {
            '$ref': '#/components/schemas/CraminoChromNormalizedCountsRecordList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'chrom_counts', 'date_created', 'date_modified', 'sample', 'sodar_uuid', 'summary']
} as const;

export const $CraminoSummaryRecordList = {
    type: 'array',
    items: {
        description: 'Store a summary record from the cramino output file.',
        properties: {
            key: {
                title: 'Key',
                type: 'string'
            },
            value: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    },
                    {
                        type: 'string'
                    }
                ],
                title: 'Value'
            }
        },
        required: ['key', 'value'],
        title: 'CraminoSummaryRecord',
        type: 'object'
    }
} as const;

export const $DataSourceInfo = {
    description: 'Describes the version version of a given datasource.',
    properties: {
        name: {
            title: 'Name',
            type: 'string'
        },
        version: {
            title: 'Version',
            type: 'string'
        }
    },
    required: ['name', 'version'],
    title: 'DataSourceInfo',
    type: 'object'
} as const;

export const $DetailedAlignmentCounts = {
    description: 'Detailed alignment counts',
    properties: {
        primary: {
            title: 'Primary',
            type: 'integer'
        },
        secondary: {
            title: 'Secondary',
            type: 'integer'
        },
        supplementary: {
            title: 'Supplementary',
            type: 'integer'
        },
        duplicates: {
            title: 'Duplicates',
            type: 'integer'
        },
        mapped: {
            title: 'Mapped',
            type: 'integer'
        },
        properly_paired: {
            title: 'Properly Paired',
            type: 'integer'
        },
        with_itself_and_mate_mapped: {
            title: 'With Itself And Mate Mapped',
            type: 'integer'
        },
        singletons: {
            title: 'Singletons',
            type: 'integer'
        },
        with_mate_mapped_to_different_chr: {
            title: 'With Mate Mapped To Different Chr',
            type: 'integer'
        },
        with_mate_mapped_to_different_chr_mapq: {
            title: 'With Mate Mapped To Different Chr Mapq',
            type: 'integer'
        },
        mismatch_rate: {
            title: 'Mismatch Rate',
            type: 'number'
        },
        mapq: {
            items: {
                items: {
                    type: 'integer'
                },
                minItems: 2,
                type: 'array'
            },
            title: 'Mapq',
            type: 'array'
        }
    },
    required: ['primary', 'secondary', 'supplementary', 'duplicates', 'mapped', 'properly_paired', 'with_itself_and_mate_mapped', 'singletons', 'with_mate_mapped_to_different_chr', 'with_mate_mapped_to_different_chr_mapq', 'mismatch_rate', 'mapq'],
    title: 'DetailedAlignmentCounts',
    type: 'object'
} as const;

export const $DragenCnvMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sodar_uuid']
} as const;

export const $DragenFragmentLengthHistogram = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        keys: {
            type: 'array',
            items: {
                type: 'integer',
                maximum: 2147483647,
                minimum: -2147483648
            }
        },
        values: {
            type: 'array',
            items: {
                type: 'integer',
                maximum: 2147483647,
                minimum: -2147483648
            }
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'keys', 'sample', 'sodar_uuid', 'values']
} as const;

export const $DragenMappingMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $DragenPloidyEstimationMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $DragenRegionCoverageMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        region_name: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'region_name', 'sample', 'sodar_uuid']
} as const;

export const $DragenRegionFineHist = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        keys: {
            type: 'array',
            items: {
                type: 'integer',
                maximum: 2147483647,
                minimum: -2147483648
            }
        },
        values: {
            type: 'array',
            items: {
                type: 'integer',
                maximum: 2147483647,
                minimum: -2147483648
            }
        },
        region_name: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'keys', 'region_name', 'sample', 'sodar_uuid', 'values']
} as const;

export const $DragenRegionHist = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        region_name: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'region_name', 'sample', 'sodar_uuid']
} as const;

export const $DragenRegionOverallMeanCov = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        region_name: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'region_name', 'sample', 'sodar_uuid']
} as const;

export const $DragenRohMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $DragenStyleCoverageList = {
    type: 'array',
    items: {
        description: 'Pydantic model for Dragen-style coverage metric entries',
        properties: {
            contig_name: {
                title: 'Contig Name',
                type: 'string'
            },
            contig_len: {
                title: 'Contig Len',
                type: 'integer'
            },
            cov: {
                title: 'Cov',
                type: 'number'
            }
        },
        required: ['contig_name', 'contig_len', 'cov'],
        title: 'DragenStyleCoverage',
        type: 'object'
    }
} as const;

export const $DragenStyleMetricList = {
    type: 'array',
    items: {
        description: 'Pydantic model for Dragen-style quality control metric entries',
        properties: {
            section: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Section'
            },
            entry: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Entry'
            },
            name: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Name'
            },
            value: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    },
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Value'
            },
            value_float: {
                anyOf: [
                    {
                        type: 'number'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Value Float'
            }
        },
        required: ['section', 'entry', 'name', 'value'],
        title: 'DragenStyleMetric',
        type: 'object'
    }
} as const;

export const $DragenSvMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sodar_uuid']
} as const;

export const $DragenTimeMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $DragenTrimmerMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $DragenVcHethomRatioMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sodar_uuid']
} as const;

export const $DragenVcMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sodar_uuid']
} as const;

export const $DragenWgsContigMeanCovMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleCoverageList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $DragenWgsCoverageMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $DragenWgsFineHist = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        keys: {
            type: 'array',
            items: {
                type: 'integer',
                maximum: 2147483647,
                minimum: -2147483648
            }
        },
        values: {
            type: 'array',
            items: {
                type: 'integer',
                maximum: 2147483647,
                minimum: -2147483648
            }
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'keys', 'sample', 'sodar_uuid', 'values']
} as const;

export const $DragenWgsHist = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        keys: {
            type: 'array',
            items: {
                type: 'string',
                maxLength: 200
            }
        },
        values: {
            type: 'array',
            items: {
                type: 'number',
                format: 'double'
            }
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'keys', 'sample', 'sodar_uuid', 'values']
} as const;

export const $DragenWgsOverallMeanCov = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        metrics: {
            '$ref': '#/components/schemas/DragenStyleMetricList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'metrics', 'sample', 'sodar_uuid']
} as const;

export const $EnrichmentKit = {
    type: 'object',
    description: 'Serializer for ``EnrichmentKit``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        identifier: {
            type: 'string',
            description: "Identifier of the enrichment kit, e.g., 'agilent-all-exon-v4'.",
            pattern: '^[\\w_-]+$',
            maxLength: 128
        },
        title: {
            type: 'string',
            description: 'Title of the enrichment kit',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Optional description of the enrichment kit'
        }
    },
    required: ['date_created', 'date_modified', 'identifier', 'sodar_uuid', 'title']
} as const;

export const $GeneList = {
    type: 'array',
    items: {
        description: 'Representation of a gene to query for.',
        properties: {
            hgnc_id: {
                title: 'Hgnc Id',
                type: 'string'
            },
            symbol: {
                title: 'Symbol',
                type: 'string'
            },
            name: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Name'
            },
            entrez_id: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Entrez Id'
            },
            ensembl_id: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Ensembl Id'
            }
        },
        required: ['hgnc_id', 'symbol'],
        title: 'Gene',
        type: 'object'
    }
} as const;

export const $GenePanel = {
    type: 'object',
    description: 'Serializer that serializes ``GenePanel``.',
    properties: {
        identifier: {
            type: 'string',
            readOnly: true,
            description: "Identifier of the gene panel, e.g., 'osteoporosis.basic' or 'osteoporosis.extended'"
        },
        state: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GenePanelStateEnum'
                }
            ],
            readOnly: true,
            description: `State of teh gene panel version

* \`draft\` - draft
* \`active\` - active
* \`retired\` - retired`
        },
        version_major: {
            type: 'integer',
            readOnly: true,
            default: 1,
            description: 'Major version of the gene panel (by identifier)'
        },
        version_minor: {
            type: 'integer',
            readOnly: true,
            default: 1,
            description: 'Minor version of the gene panel (by identifier)'
        },
        title: {
            type: 'string',
            readOnly: true,
            description: 'Title of the gene panel, only used for informative purposes'
        },
        description: {
            type: 'string',
            readOnly: true,
            nullable: true,
            description: 'Description of the panel'
        }
    },
    required: ['description', 'identifier', 'state', 'title', 'version_major', 'version_minor']
} as const;

export const $GenePanelCategory = {
    type: 'object',
    description: 'Serializer that serializes ``GenePanelCategory``.',
    properties: {
        title: {
            type: 'string',
            readOnly: true,
            description: 'Title of the category'
        },
        description: {
            type: 'string',
            readOnly: true,
            nullable: true,
            description: 'Optional description of the category'
        },
        genepanel_set: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GenePanel'
                }
            ],
            readOnly: true
        }
    },
    required: ['description', 'genepanel_set', 'title']
} as const;

export const $GenePanelList = {
    type: 'array',
    items: {
        description: 'Representation of a gene panel to use in the query.',
        properties: {
            source: {
                '$ref': '#/components/schemas/GenePanelSource'
            },
            panel_id: {
                title: 'Panel Id',
                type: 'string'
            },
            name: {
                title: 'Name',
                type: 'string'
            },
            version: {
                title: 'Version',
                type: 'string'
            }
        },
        required: ['source', 'panel_id', 'name', 'version'],
        title: 'GenePanel',
        type: 'object'
    }
} as const;

export const $GenePanelSource = {
    description: 'The source of a gene panel.',
    enum: ['panelapp', 'internal'],
    title: 'GenePanelSource',
    type: 'string'
} as const;

export const $GenePanelStateEnum = {
    enum: ['draft', 'active', 'retired'],
    type: 'string',
    description: `* \`draft\` - draft
* \`active\` - active
* \`retired\` - retired`
} as const;

export const $GenomeRegionList = {
    type: 'array',
    items: {
        description: 'Representation of a genomic region to query for.',
        properties: {
            chromosome: {
                title: 'Chromosome',
                type: 'string'
            },
            range: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/OneBasedRange'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null
            }
        },
        required: ['chromosome'],
        title: 'GenomeRegion',
        type: 'object'
    }
} as const;

export const $GenomeReleaseEnum = {
    enum: ['grch37', 'grch38'],
    type: 'string',
    description: `* \`grch37\` - GRCh37
* \`grch38\` - GRCh38`
} as const;

export const $InsertSizeStats = {
    description: 'Per-sample QC stats for insert sizes.',
    properties: {
        insert_size_mean: {
            title: 'Insert Size Mean',
            type: 'number'
        },
        insert_size_median: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Insert Size Median'
        },
        insert_size_stddev: {
            title: 'Insert Size Stddev',
            type: 'number'
        },
        insert_size_histogram: {
            items: {
                items: {
                    type: 'integer'
                },
                minItems: 2,
                type: 'array'
            },
            title: 'Insert Size Histogram',
            type: 'array'
        }
    },
    required: ['insert_size_mean', 'insert_size_median', 'insert_size_stddev', 'insert_size_histogram'],
    title: 'InsertSizeStats',
    type: 'object'
} as const;

export const $NgsbitsMappingqcMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        records: {
            '$ref': '#/components/schemas/NgsbitsMappingqcRecordList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        },
        region_name: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'records', 'region_name', 'sample', 'sodar_uuid']
} as const;

export const $NgsbitsMappingqcRecordList = {
    type: 'array',
    items: {
        description: "One entry in the output of ngs-bits' MappingQC.",
        properties: {
            key: {
                title: 'Key',
                type: 'string'
            },
            value: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    },
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Value'
            }
        },
        required: ['key', 'value'],
        title: 'NgsbitsMappingqcRecord',
        type: 'object'
    }
} as const;

export const $NullEnum = {
    enum: [
        null
    ]
} as const;

export const $OneBasedRange = {
    description: 'Representation of a 1-based range.',
    properties: {
        start: {
            title: 'Start',
            type: 'integer'
        },
        end: {
            title: 'End',
            type: 'integer'
        }
    },
    required: ['start', 'end'],
    title: 'OneBasedRange',
    type: 'object'
} as const;

export const $PaginatedCaseAnalysisList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseAnalysis'
            }
        }
    }
} as const;

export const $PaginatedCaseAnalysisSessionList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseAnalysisSession'
            }
        }
    }
} as const;

export const $PaginatedCaseImportActionList = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseImportAction'
            }
        }
    }
} as const;

export const $PaginatedCaseSerializerNgList = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseSerializerNg'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsPredefinedQueryList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsPredefinedQuery'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryExecutionList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryExecution'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQuery'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsClinvarList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsClinvar'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsColumnsList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsColumns'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsConsequenceList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsConsequence'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsFrequencyList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsFrequency'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsLocusList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsLocus'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsPhenotypePrioList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsPhenotypePrio'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsQualityList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsQuality'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsSetList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsSet'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsSetVersionList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsSetVersion'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQueryPresetsVariantPrioList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsVariantPrio'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsQuerySettingsList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQuerySettings'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsResultRowList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsResultRow'
            }
        }
    }
} as const;

export const $PaginatedSeqvarsResultSetList = {
    type: 'object',
    properties: {
        next: {
            type: 'string',
            nullable: true
        },
        previous: {
            type: 'string',
            nullable: true
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsResultSet'
            }
        }
    }
} as const;

export const $PatchedCaseImportAction = {
    type: 'object',
    description: 'Serializer for the ``CaseImportAction`` model.',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        project: {
            type: 'string',
            format: 'uuid',
            description: 'Project SODAR UUID',
            readOnly: true
        },
        state: {
            '$ref': '#/components/schemas/CaseImportActionStateEnum'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        action: {
            '$ref': '#/components/schemas/ActionEnum'
        },
        payload: {},
        overwrite_terms: {
            type: 'boolean'
        }
    }
} as const;

export const $PatchedCasePhenotypeTerms = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        case: {
            type: 'string',
            format: 'uuid',
            description: 'Case SODAR UUID',
            readOnly: true
        },
        individual: {
            type: 'string',
            description: 'Individual',
            maxLength: 128
        },
        terms: {}
    }
} as const;

export const $PatchedCaseSerializerNg = {
    type: 'object',
    description: `Serializer for the \`\`Case\`\` model.

In contrast to the old (legacy) \`\`CaseSerializer\`\` from \`\`variants.serializers.case\`\`, this class does not
perform serialization of nested attributes and thus does not trigger a large query cascade.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        project: {
            type: 'string',
            format: 'uuid',
            description: 'Project SODAR UUID',
            readOnly: true
        },
        presetset: {
            type: 'string',
            format: 'uuid',
            description: 'Cohort SODAR UUID',
            readOnly: true
        },
        sex_errors: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            readOnly: true
        },
        smallvariantqueryresultset: {
            type: 'object',
            additionalProperties: {
                oneOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number',
                        format: 'double'
                    },
                    {
                        type: 'string'
                    }
                ],
                nullable: true
            },
            readOnly: true
        },
        svqueryresultset: {
            type: 'object',
            additionalProperties: {
                oneOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number',
                        format: 'double'
                    },
                    {
                        type: 'string'
                    }
                ],
                nullable: true
            },
            readOnly: true
        },
        caseqc: {
            type: 'object',
            additionalProperties: {
                oneOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number',
                        format: 'double'
                    },
                    {
                        type: 'string'
                    }
                ],
                nullable: true
            },
            nullable: true,
            description: `Obtain the latest CaseQC for this in active state and serialize it.

If there is no such record then return \`\`None\`\`.`,
            readOnly: true
        },
        release: {
            type: 'string',
            readOnly: true,
            nullable: true
        },
        name: {
            type: 'string',
            maxLength: 512
        },
        index: {
            type: 'string',
            maxLength: 512
        },
        pedigree: {},
        notes: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/CaseStatusEnum'
        },
        tags: {
            type: 'array',
            items: {
                type: 'string',
                maxLength: 32
            },
            nullable: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        case_version: {
            type: 'integer',
            maximum: 2147483647,
            minimum: -2147483648
        },
        state: {
            readOnly: true,
            nullable: true,
            oneOf: [
                {
                    '$ref': '#/components/schemas/CaseSerializerNgStateEnum'
                },
                {
                    '$ref': '#/components/schemas/NullEnum'
                }
            ]
        },
        num_small_vars: {
            type: 'integer',
            readOnly: true,
            nullable: true,
            title: 'Small variants',
            description: 'Number of small variants, empty if no small variants have been imported'
        },
        num_svs: {
            type: 'integer',
            readOnly: true,
            nullable: true,
            title: 'Structural variants',
            description: 'Number of structural variants, empty if no structural variants have been imported'
        }
    }
} as const;

export const $PatchedEnrichmentKit = {
    type: 'object',
    description: 'Serializer for ``EnrichmentKit``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        identifier: {
            type: 'string',
            description: "Identifier of the enrichment kit, e.g., 'agilent-all-exon-v4'.",
            pattern: '^[\\w_-]+$',
            maxLength: 128
        },
        title: {
            type: 'string',
            description: 'Title of the enrichment kit',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Optional description of the enrichment kit'
        }
    }
} as const;

export const $PatchedSeqvarsPredefinedQuery = {
    type: 'object',
    description: 'Serializer for ``PredefinedQuery``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        included_in_sop: {
            type: 'boolean',
            default: false
        },
        genotype: {
            oneOf: [
                {
                    description: 'Configuration for a single column in the result table.',
                    properties: {
                        choice: {
                            anyOf: [
                                {
                                    '$ref': '#/components/schemas/SeqvarsGenotypePresetChoice'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null
                        }
                    },
                    title: 'SeqvarsGenotypePresets',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        quality: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        frequency: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        consequence: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        locus: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        phenotypeprio: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        variantprio: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        clinvar: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        columns: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryDetails = {
    type: 'object',
    description: `Serializer for \`\`Query\`\` (for \`\`*-detail\`\`).

For retrieve, update, or delete operations, we also render the nested query settings
in detail.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        session: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        settings: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsDetails'
        },
        columnsconfig: {
            '$ref': '#/components/schemas/SeqvarsQueryColumnsConfig'
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsClinvar = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsClinvar\`\`.

Not used directly but used as base class.`,
    properties: {
        clinvar_presence_required: {
            type: 'boolean',
            default: false
        },
        clinvar_germline_aggregate_description: {
            '$ref': '#/components/schemas/ClinvarGermlineAggregateDescriptionList'
        },
        allow_conflicting_interpretations: {
            type: 'boolean',
            default: false
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsColumns = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsColumns\`\`.

Not used directly but used as base class.`,
    properties: {
        column_settings: {
            '$ref': '#/components/schemas/SeqvarsColumnConfigList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsConsequence = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsConsequence\`\`.

Not used directly but used as base class.`,
    properties: {
        variant_types: {
            '$ref': '#/components/schemas/SeqvarsVariantTypeChoiceList'
        },
        transcript_types: {
            '$ref': '#/components/schemas/SeqvarsTranscriptTypeChoiceList'
        },
        variant_consequences: {
            '$ref': '#/components/schemas/SeqvarsVariantConsequenceChoiceList'
        },
        max_distance_to_exon: {
            type: 'integer',
            nullable: true
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsFrequency = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsFrequency\`\`.

Not used directly but used as base class.`,
    properties: {
        gnomad_exomes: {
            oneOf: [
                {
                    description: 'Settings for gnomAD nuclear frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadNuclearFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        gnomad_genomes: {
            oneOf: [
                {
                    description: 'Settings for gnomAD nuclear frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadNuclearFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        gnomad_mitochondrial: {
            oneOf: [
                {
                    description: 'Settings for gnomAD mitochondrial frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heteroplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heteroplasmic'
                        },
                        homoplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homoplasmic'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadMitochondrialFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        helixmtdb: {
            oneOf: [
                {
                    description: 'Settings for HelixMtDb frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heteroplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heteroplasmic'
                        },
                        homoplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homoplasmic'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'HelixmtDbFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        inhouse: {
            oneOf: [
                {
                    description: 'Settings for in-house frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        carriers: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Carriers'
                        }
                    },
                    title: 'InhouseFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsLocus = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsLocus\`\`.

Not used directly but used as base class.`,
    properties: {
        genes: {
            '$ref': '#/components/schemas/GeneList'
        },
        gene_panels: {
            '$ref': '#/components/schemas/GenePanelList'
        },
        genome_regions: {
            '$ref': '#/components/schemas/GenomeRegionList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsPhenotypePrio = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsPhenotypePrio\`\`.

Not used directly but used as base class.`,
    properties: {
        phenotype_prio_enabled: {
            type: 'boolean',
            default: false
        },
        phenotype_prio_algorithm: {
            type: 'string',
            nullable: true,
            maxLength: 128
        },
        terms: {
            '$ref': '#/components/schemas/TermPresenceList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsQuality = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsQuality\`\`.

Not used directly but used as base class.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        filter_active: {
            type: 'boolean',
            default: false
        },
        min_dp_het: {
            type: 'integer',
            nullable: true
        },
        min_dp_hom: {
            type: 'integer',
            nullable: true
        },
        min_ab_het: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        min_gq: {
            type: 'integer',
            nullable: true
        },
        min_ad: {
            type: 'integer',
            nullable: true
        },
        max_ad: {
            type: 'integer',
            nullable: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsSet = {
    type: 'object',
    description: 'Serializer for ``QueryPresetsSet``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        project: {
            type: 'string',
            format: 'uuid',
            description: 'Project SODAR UUID',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsSetVersion = {
    type: 'object',
    description: 'Serializer for ``QueryPresetsSetVersion``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        presetsset: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        version_major: {
            type: 'integer',
            default: 1
        },
        version_minor: {
            type: 'integer',
            default: 0
        },
        status: {
            type: 'string',
            default: 'draft'
        },
        signed_off_by: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SODARUser'
                }
            ],
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQueryPresetsVariantPrio = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsVariantPrio\`\`.

Not used directly but used as base class.`,
    properties: {
        variant_prio_enabled: {
            type: 'boolean',
            default: false
        },
        services: {
            '$ref': '#/components/schemas/SeqvarsPrioServiceList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    }
} as const;

export const $PatchedSeqvarsQuerySettingsDetails = {
    type: 'object',
    description: `Serializer for \`\`QuerySettings\`\` (for \`\`*-detail\`\`).

For retrieve, update, or delete operations, we also render the nested
owned category settings.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        session: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        predefinedquery: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        genotypepresets: {
            oneOf: [
                {
                    description: 'Configuration for a single column in the result table.',
                    properties: {
                        choice: {
                            anyOf: [
                                {
                                    '$ref': '#/components/schemas/SeqvarsGenotypePresetChoice'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null
                        }
                    },
                    title: 'SeqvarsGenotypePresets',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        qualitypresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        consequencepresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        locuspresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        frequencypresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        phenotypepriopresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        variantpriopresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        clinvarpresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        genotype: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsGenotype'
        },
        quality: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsQuality'
        },
        consequence: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsConsequence'
        },
        locus: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsLocus'
        },
        frequency: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsFrequency'
        },
        phenotypeprio: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsPhenotypePrio'
        },
        variantprio: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsVariantPrio'
        },
        clinvar: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsClinvar'
        }
    }
} as const;

export const $PatchedTargetBedFile = {
    type: 'object',
    description: 'Serializer for ``TargetBedFile``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        enrichmentkit: {
            type: 'string',
            format: 'uuid',
            description: 'Record SODAR UUID',
            readOnly: true
        },
        file_uri: {
            type: 'string',
            description: "The file's URI.",
            maxLength: 512
        },
        genome_release: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GenomeReleaseEnum'
                }
            ],
            default: 'grch37',
            description: `The file's reference genome.

* \`grch37\` - GRCh37
* \`grch38\` - GRCh38`
        }
    }
} as const;

export const $RegionCoverageStats = {
    description: 'Per-region QC stats for alignment.',
    properties: {
        region_name: {
            title: 'Region Name',
            type: 'string'
        },
        mean_rd: {
            title: 'Mean Rd',
            type: 'number'
        },
        min_rd_fraction: {
            items: {
                items: {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'number'
                        }
                    ]
                },
                minItems: 2,
                type: 'array'
            },
            title: 'Min Rd Fraction',
            type: 'array'
        }
    },
    required: ['region_name', 'mean_rd', 'min_rd_fraction'],
    title: 'RegionCoverageStats',
    type: 'object'
} as const;

export const $RegionVariantStats = {
    description: 'Per-region sequence variant statistics.',
    properties: {
        region_name: {
            title: 'Region Name',
            type: 'string'
        },
        snv_count: {
            title: 'Snv Count',
            type: 'integer'
        },
        indel_count: {
            title: 'Indel Count',
            type: 'integer'
        },
        multiallelic_count: {
            title: 'Multiallelic Count',
            type: 'integer'
        },
        transition_count: {
            title: 'Transition Count',
            type: 'integer'
        },
        transversion_count: {
            title: 'Transversion Count',
            type: 'integer'
        },
        tstv_ratio: {
            title: 'Tstv Ratio',
            type: 'number'
        }
    },
    required: ['region_name', 'snv_count', 'indel_count', 'multiallelic_count', 'transition_count', 'transversion_count', 'tstv_ratio'],
    title: 'RegionVariantStats',
    type: 'object'
} as const;

export const $SODARUser = {
    type: 'object',
    description: 'Serializer for the user model used in SODAR Core based sites',
    properties: {
        username: {
            type: 'string',
            description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
            pattern: '^[\\w.@+-]+$',
            maxLength: 150
        },
        name: {
            type: 'string',
            title: 'Name of User',
            maxLength: 255
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email address',
            maxLength: 254
        },
        is_superuser: {
            type: 'boolean',
            title: 'Superuser status',
            description: 'Designates that this user has all permissions without explicitly assigning them.'
        },
        sodar_uuid: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['sodar_uuid', 'username']
} as const;

export const $SampleAlignmentStatsList = {
    type: 'array',
    items: {
        description: 'Per-sample QC stats for alignment.',
        properties: {
            sample: {
                title: 'Sample',
                type: 'string'
            },
            detailed_counts: {
                '$ref': '#/components/schemas/DetailedAlignmentCounts'
            },
            per_chromosome_counts: {
                items: {
                    items: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'integer'
                            }
                        ]
                    },
                    minItems: 2,
                    type: 'array'
                },
                title: 'Per Chromosome Counts',
                type: 'array'
            },
            insert_size_stats: {
                '$ref': '#/components/schemas/InsertSizeStats'
            },
            region_coverage_stats: {
                items: {
                    '$ref': '#/components/schemas/RegionCoverageStats'
                },
                title: 'Region Coverage Stats',
                type: 'array'
            }
        },
        required: ['sample', 'detailed_counts', 'per_chromosome_counts', 'insert_size_stats', 'region_coverage_stats'],
        title: 'SampleAlignmentStats',
        type: 'object'
    }
} as const;

export const $SampleReadStatsList = {
    type: 'array',
    items: {
        description: 'Per-sample QC stats for reads.',
        properties: {
            sample: {
                title: 'Sample',
                type: 'string'
            },
            read_length_n50: {
                title: 'Read Length N50',
                type: 'integer'
            },
            read_length_histogram: {
                items: {
                    items: {
                        type: 'integer'
                    },
                    minItems: 2,
                    type: 'array'
                },
                title: 'Read Length Histogram',
                type: 'array'
            },
            total_reads: {
                title: 'Total Reads',
                type: 'integer'
            },
            total_yield: {
                title: 'Total Yield',
                type: 'integer'
            },
            fragment_first: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Fragment First'
            },
            fragment_last: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Fragment Last'
            }
        },
        required: ['sample', 'read_length_n50', 'read_length_histogram', 'total_reads', 'total_yield', 'fragment_first', 'fragment_last'],
        title: 'SampleReadStats',
        type: 'object'
    }
} as const;

export const $SampleSeqvarStatsList = {
    type: 'array',
    items: {
        description: 'Per-sample QC stats for sequence variants.',
        properties: {
            sample: {
                title: 'Sample',
                type: 'string'
            },
            genome_wide: {
                '$ref': '#/components/schemas/RegionVariantStats'
            },
            per_region: {
                items: {
                    '$ref': '#/components/schemas/RegionVariantStats'
                },
                title: 'Per Region',
                type: 'array'
            }
        },
        required: ['sample', 'genome_wide', 'per_region'],
        title: 'SampleSeqvarStats',
        type: 'object'
    }
} as const;

export const $SampleStrucvarStatsList = {
    type: 'array',
    items: {
        description: 'Per-sample QC stats for structural variants.',
        properties: {
            sample: {
                title: 'Sample',
                type: 'string'
            },
            deletion_count: {
                title: 'Deletion Count',
                type: 'integer'
            },
            duplication_count: {
                title: 'Duplication Count',
                type: 'integer'
            },
            insertion_count: {
                title: 'Insertion Count',
                type: 'integer'
            },
            inversion_count: {
                title: 'Inversion Count',
                type: 'integer'
            },
            breakend_count: {
                title: 'Breakend Count',
                type: 'integer'
            }
        },
        required: ['sample', 'deletion_count', 'duplication_count', 'insertion_count', 'inversion_count', 'breakend_count'],
        title: 'SampleStrucvarStats',
        type: 'object'
    }
} as const;

export const $SamtoolsFlagstatMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        qc_pass: {
            description: 'A record for the ``flagstat`` lines in ``samtools stats`` output.',
            properties: {
                total: {
                    default: 0,
                    title: 'Total',
                    type: 'integer'
                },
                primary: {
                    default: 0,
                    title: 'Primary',
                    type: 'integer'
                },
                secondary: {
                    default: 0,
                    title: 'Secondary',
                    type: 'integer'
                },
                supplementary: {
                    default: 0,
                    title: 'Supplementary',
                    type: 'integer'
                },
                duplicates: {
                    default: 0,
                    title: 'Duplicates',
                    type: 'integer'
                },
                duplicates_primary: {
                    default: 0,
                    title: 'Duplicates Primary',
                    type: 'integer'
                },
                mapped: {
                    default: 0,
                    title: 'Mapped',
                    type: 'integer'
                },
                mapped_primary: {
                    default: 0,
                    title: 'Mapped Primary',
                    type: 'integer'
                },
                paired: {
                    default: 0,
                    title: 'Paired',
                    type: 'integer'
                },
                fragment_first: {
                    default: 0,
                    title: 'Fragment First',
                    type: 'integer'
                },
                fragment_last: {
                    default: 0,
                    title: 'Fragment Last',
                    type: 'integer'
                },
                properly_paired: {
                    default: 0,
                    title: 'Properly Paired',
                    type: 'integer'
                },
                with_itself_and_mate_mapped: {
                    default: 0,
                    title: 'With Itself And Mate Mapped',
                    type: 'integer'
                },
                singletons: {
                    default: 0,
                    title: 'Singletons',
                    type: 'integer'
                },
                with_mate_mapped_to_different_chr: {
                    default: 0,
                    title: 'With Mate Mapped To Different Chr',
                    type: 'integer'
                },
                with_mate_mapped_to_different_chr_mapq5: {
                    default: 0,
                    title: 'With Mate Mapped To Different Chr Mapq5',
                    type: 'integer'
                }
            },
            title: 'SamtoolsFlagstatRecord',
            type: 'object'
        },
        qc_fail: {
            description: 'A record for the ``flagstat`` lines in ``samtools stats`` output.',
            properties: {
                total: {
                    default: 0,
                    title: 'Total',
                    type: 'integer'
                },
                primary: {
                    default: 0,
                    title: 'Primary',
                    type: 'integer'
                },
                secondary: {
                    default: 0,
                    title: 'Secondary',
                    type: 'integer'
                },
                supplementary: {
                    default: 0,
                    title: 'Supplementary',
                    type: 'integer'
                },
                duplicates: {
                    default: 0,
                    title: 'Duplicates',
                    type: 'integer'
                },
                duplicates_primary: {
                    default: 0,
                    title: 'Duplicates Primary',
                    type: 'integer'
                },
                mapped: {
                    default: 0,
                    title: 'Mapped',
                    type: 'integer'
                },
                mapped_primary: {
                    default: 0,
                    title: 'Mapped Primary',
                    type: 'integer'
                },
                paired: {
                    default: 0,
                    title: 'Paired',
                    type: 'integer'
                },
                fragment_first: {
                    default: 0,
                    title: 'Fragment First',
                    type: 'integer'
                },
                fragment_last: {
                    default: 0,
                    title: 'Fragment Last',
                    type: 'integer'
                },
                properly_paired: {
                    default: 0,
                    title: 'Properly Paired',
                    type: 'integer'
                },
                with_itself_and_mate_mapped: {
                    default: 0,
                    title: 'With Itself And Mate Mapped',
                    type: 'integer'
                },
                singletons: {
                    default: 0,
                    title: 'Singletons',
                    type: 'integer'
                },
                with_mate_mapped_to_different_chr: {
                    default: 0,
                    title: 'With Mate Mapped To Different Chr',
                    type: 'integer'
                },
                with_mate_mapped_to_different_chr_mapq5: {
                    default: 0,
                    title: 'With Mate Mapped To Different Chr Mapq5',
                    type: 'integer'
                }
            },
            title: 'SamtoolsFlagstatRecord',
            type: 'object'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'qc_fail', 'qc_pass', 'sample', 'sodar_uuid']
} as const;

export const $SamtoolsIdxstatsMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        records: {
            '$ref': '#/components/schemas/SamtoolsIdxstatsRecordList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'records', 'sample', 'sodar_uuid']
} as const;

export const $SamtoolsIdxstatsRecordList = {
    type: 'array',
    items: {
        description: 'A record for the lines in ``samtools idxstats`` output.',
        properties: {
            contig_name: {
                title: 'Contig Name',
                type: 'string'
            },
            contig_len: {
                title: 'Contig Len',
                type: 'integer'
            },
            mapped: {
                title: 'Mapped',
                type: 'integer'
            },
            unmapped: {
                title: 'Unmapped',
                type: 'integer'
            }
        },
        required: ['contig_name', 'contig_len', 'mapped', 'unmapped'],
        title: 'SamtoolsIdxstatsRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsBasePercentagesRecordList = {
    type: 'array',
    items: {
        description: `A Record from the \`\`GCC\`\`, \`\`GCT\`\`, \`\`FBC\`\`, and \`\`LBC\`\` lines in \`\`samtools stats\`\`
output.`,
        properties: {
            cycle: {
                title: 'Cycle',
                type: 'integer'
            },
            percentages: {
                items: {
                    type: 'number'
                },
                title: 'Percentages',
                type: 'array'
            }
        },
        required: ['cycle', 'percentages'],
        title: 'SamtoolsStatsBasePercentagesRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsChkRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``CHK`` lines in ``samtools stats`` output.',
        properties: {
            read_names_crc32: {
                title: 'Read Names Crc32',
                type: 'string'
            },
            sequences_crc32: {
                title: 'Sequences Crc32',
                type: 'string'
            },
            qualities_crc32: {
                title: 'Qualities Crc32',
                type: 'string'
            }
        },
        required: ['read_names_crc32', 'sequences_crc32', 'qualities_crc32'],
        title: 'SamtoolsStatsChkRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsFqRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``FFQ`` and ``LFQ`` lines in ``samtools stats`` output.',
        properties: {
            cycle: {
                title: 'Cycle',
                type: 'integer'
            },
            counts: {
                items: {
                    type: 'integer'
                },
                title: 'Counts',
                type: 'array'
            }
        },
        required: ['cycle', 'counts'],
        title: 'SamtoolsStatsFqRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsGcRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``GCF`` and ``GCL`` lines in ``samtools stats`` output.',
        properties: {
            gc_content: {
                title: 'Gc Content',
                type: 'number'
            },
            count: {
                title: 'Count',
                type: 'integer'
            }
        },
        required: ['gc_content', 'count'],
        title: 'SamtoolsStatsGcRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsGcdRecordList = {
    type: 'array',
    items: {
        description: 'A record for the ``GCD`` lines in ``samtools stats`` output.',
        properties: {
            gc_content: {
                title: 'Gc Content',
                type: 'number'
            },
            unique_seq_percentiles: {
                title: 'Unique Seq Percentiles',
                type: 'number'
            },
            dp_percentile_10: {
                title: 'Dp Percentile 10',
                type: 'number'
            },
            dp_percentile_25: {
                title: 'Dp Percentile 25',
                type: 'number'
            },
            dp_percentile_50: {
                title: 'Dp Percentile 50',
                type: 'number'
            },
            dp_percentile_75: {
                title: 'Dp Percentile 75',
                type: 'number'
            },
            dp_percentile_90: {
                title: 'Dp Percentile 90',
                type: 'number'
            }
        },
        required: ['gc_content', 'unique_seq_percentiles', 'dp_percentile_10', 'dp_percentile_25', 'dp_percentile_50', 'dp_percentile_75', 'dp_percentile_90'],
        title: 'SamtoolsStatsGcdRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsHistoRecordList = {
    type: 'array',
    items: {
        description: `A record for a value/count pair.

Used for \`\`MAPQ\`\`, \`\`ID\`\`, \`\`COV\`\``,
        properties: {
            value: {
                title: 'Value',
                type: 'integer'
            },
            count: {
                title: 'Count',
                type: 'integer'
            }
        },
        required: ['value', 'count'],
        title: 'SamtoolsStatsHistoRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsIcRecordList = {
    type: 'array',
    items: {
        description: 'A record for the ``IC`` lines in ``samtools stats`` output.',
        properties: {
            cycle: {
                title: 'Cycle',
                type: 'integer'
            },
            ins_fwd: {
                title: 'Ins Fwd',
                type: 'integer'
            },
            dels_fwd: {
                title: 'Dels Fwd',
                type: 'integer'
            },
            ins_rev: {
                title: 'Ins Rev',
                type: 'integer'
            },
            dels_rev: {
                title: 'Dels Rev',
                type: 'integer'
            }
        },
        required: ['cycle', 'ins_fwd', 'dels_fwd', 'ins_rev', 'dels_rev'],
        title: 'SamtoolsStatsIcRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsIdRecordList = {
    type: 'array',
    items: {
        description: 'A record for the ``ID`` lines in ``samtools stats`` output.',
        properties: {
            length: {
                title: 'Length',
                type: 'integer'
            },
            ins: {
                title: 'Ins',
                type: 'integer'
            },
            dels: {
                title: 'Dels',
                type: 'integer'
            }
        },
        required: ['length', 'ins', 'dels'],
        title: 'SamtoolsStatsIdRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsIsRecordList = {
    type: 'array',
    items: {
        description: 'Records for the ``IS`` records.',
        properties: {
            insert_size: {
                title: 'Insert Size',
                type: 'integer'
            },
            pairs_total: {
                title: 'Pairs Total',
                type: 'integer'
            },
            pairs_inward: {
                title: 'Pairs Inward',
                type: 'integer'
            },
            pairs_outward: {
                title: 'Pairs Outward',
                type: 'integer'
            },
            pairs_other: {
                title: 'Pairs Other',
                type: 'integer'
            }
        },
        required: ['insert_size', 'pairs_total', 'pairs_inward', 'pairs_outward', 'pairs_other'],
        title: 'SamtoolsStatsIsRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsMainMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        sn: {
            '$ref': '#/components/schemas/SamtoolsStatsSnRecordList'
        },
        chk: {
            '$ref': '#/components/schemas/SamtoolsStatsChkRecordList'
        },
        isize: {
            '$ref': '#/components/schemas/SamtoolsStatsIsRecordList'
        },
        cov: {
            '$ref': '#/components/schemas/SamtoolsStatsHistoRecordList'
        },
        gcd: {
            '$ref': '#/components/schemas/SamtoolsStatsGcdRecordList'
        },
        frl: {
            '$ref': '#/components/schemas/SamtoolsStatsHistoRecordList'
        },
        lrl: {
            '$ref': '#/components/schemas/SamtoolsStatsHistoRecordList'
        },
        idd: {
            '$ref': '#/components/schemas/SamtoolsStatsIdRecordList'
        },
        ffq: {
            '$ref': '#/components/schemas/SamtoolsStatsFqRecordList'
        },
        lfq: {
            '$ref': '#/components/schemas/SamtoolsStatsFqRecordList'
        },
        fbc: {
            '$ref': '#/components/schemas/SamtoolsStatsBasePercentagesRecordList'
        },
        lbc: {
            '$ref': '#/components/schemas/SamtoolsStatsBasePercentagesRecordList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'chk', 'cov', 'date_created', 'date_modified', 'fbc', 'ffq', 'frl', 'gcd', 'idd', 'isize', 'lbc', 'lfq', 'lrl', 'sample', 'sn', 'sodar_uuid']
} as const;

export const $SamtoolsStatsSnRecordList = {
    type: 'array',
    items: {
        description: 'A Record from the ``SN`` lines in ``samtools stats`` output.',
        properties: {
            key: {
                title: 'Key',
                type: 'string'
            },
            value: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    },
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                title: 'Value'
            }
        },
        required: ['key', 'value'],
        title: 'SamtoolsStatsSnRecord',
        type: 'object'
    }
} as const;

export const $SamtoolsStatsSupplementaryMetrics = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        caseqc: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        gcf: {
            '$ref': '#/components/schemas/SamtoolsStatsGcRecordList'
        },
        gcl: {
            '$ref': '#/components/schemas/SamtoolsStatsGcRecordList'
        },
        gcc: {
            '$ref': '#/components/schemas/SamtoolsStatsBasePercentagesRecordList'
        },
        gct: {
            '$ref': '#/components/schemas/SamtoolsStatsBasePercentagesRecordList'
        },
        rl: {
            '$ref': '#/components/schemas/SamtoolsStatsHistoRecordList'
        },
        mapq: {
            '$ref': '#/components/schemas/SamtoolsStatsHistoRecordList'
        },
        ic: {
            '$ref': '#/components/schemas/SamtoolsStatsIcRecordList'
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        sample: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['caseqc', 'date_created', 'date_modified', 'gcc', 'gcf', 'gcl', 'gct', 'ic', 'mapq', 'rl', 'sample', 'sodar_uuid']
} as const;

export const $SeqvarsColumnConfigList = {
    type: 'array',
    items: {
        description: 'Configuration for a single column in the result table.',
        properties: {
            name: {
                title: 'Name',
                type: 'string'
            },
            label: {
                title: 'Label',
                type: 'string'
            },
            description: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Description'
            },
            width: {
                title: 'Width',
                type: 'integer'
            },
            visible: {
                title: 'Visible',
                type: 'boolean'
            }
        },
        required: ['name', 'label', 'width', 'visible'],
        title: 'SeqvarsColumnConfig',
        type: 'object'
    }
} as const;

export const $SeqvarsGenotypeChoice = {
    description: 'Store genotype choice of a ``SampleGenotype``.',
    enum: ['any', 'ref', 'het', 'hom', 'non-hom', 'variant', 'comphet_index', 'recessive_index', 'recessive_parent'],
    title: 'SeqvarsGenotypeChoice',
    type: 'string'
} as const;

export const $SeqvarsGenotypePresetChoice = {
    description: 'Presets value for the chosen genotype.',
    enum: ['any', 'de_novo', 'dominant', 'homozygous_recessive', 'compound_heterozygous_recessive', 'recessive', 'x_recessive', 'affected_carriers'],
    title: 'SeqvarsGenotypePresetChoice',
    type: 'string'
} as const;

export const $SeqvarsPredefinedQuery = {
    type: 'object',
    description: 'Serializer for ``PredefinedQuery``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        included_in_sop: {
            type: 'boolean',
            default: false
        },
        genotype: {
            oneOf: [
                {
                    description: 'Configuration for a single column in the result table.',
                    properties: {
                        choice: {
                            anyOf: [
                                {
                                    '$ref': '#/components/schemas/SeqvarsGenotypePresetChoice'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null
                        }
                    },
                    title: 'SeqvarsGenotypePresets',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        quality: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        frequency: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        consequence: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        locus: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        phenotypeprio: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        variantprio: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        clinvar: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        columns: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsPrioServiceList = {
    type: 'array',
    items: {
        description: 'Representation of a variant pathogenicity service.',
        properties: {
            name: {
                title: 'Name',
                type: 'string'
            },
            version: {
                title: 'Version',
                type: 'string'
            }
        },
        required: ['name', 'version'],
        title: 'SeqvarsPrioService',
        type: 'object'
    }
} as const;

export const $SeqvarsQuery = {
    type: 'object',
    description: 'Serializer for ``Query``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        session: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        settings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        columnsconfig: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['columnsconfig', 'date_created', 'date_modified', 'label', 'session', 'settings', 'sodar_uuid']
} as const;

export const $SeqvarsQueryColumnsConfig = {
    type: 'object',
    description: 'Serializer for ``QueryColumnsConfig``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        column_settings: {
            '$ref': '#/components/schemas/SeqvarsColumnConfigList'
        }
    },
    required: ['date_created', 'date_modified', 'sodar_uuid']
} as const;

export const $SeqvarsQueryDetails = {
    type: 'object',
    description: `Serializer for \`\`Query\`\` (for \`\`*-detail\`\`).

For retrieve, update, or delete operations, we also render the nested query settings
in detail.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        session: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        settings: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsDetails'
        },
        columnsconfig: {
            '$ref': '#/components/schemas/SeqvarsQueryColumnsConfig'
        }
    },
    required: ['columnsconfig', 'date_created', 'date_modified', 'label', 'session', 'settings', 'sodar_uuid']
} as const;

export const $SeqvarsQueryExecution = {
    type: 'object',
    description: 'Serializer for ``QueryExecution``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        state: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SeqvarsQueryExecutionStateEnum'
                }
            ],
            readOnly: true
        },
        complete_percent: {
            type: 'integer',
            readOnly: true,
            nullable: true
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            nullable: true
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            nullable: true
        },
        elapsed_seconds: {
            type: 'number',
            format: 'double',
            readOnly: true,
            nullable: true
        },
        query: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['complete_percent', 'date_created', 'date_modified', 'elapsed_seconds', 'end_time', 'query', 'querysettings', 'sodar_uuid', 'start_time', 'state']
} as const;

export const $SeqvarsQueryExecutionDetails = {
    type: 'object',
    description: 'Serializer for ``QueryExecution``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        state: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SeqvarsQueryExecutionStateEnum'
                }
            ],
            readOnly: true
        },
        complete_percent: {
            type: 'integer',
            readOnly: true,
            nullable: true
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            nullable: true
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            nullable: true
        },
        elapsed_seconds: {
            type: 'number',
            format: 'double',
            readOnly: true,
            nullable: true
        },
        query: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        querysettings: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsDetails'
        }
    },
    required: ['complete_percent', 'date_created', 'date_modified', 'elapsed_seconds', 'end_time', 'query', 'querysettings', 'sodar_uuid', 'start_time', 'state']
} as const;

export const $SeqvarsQueryExecutionStateEnum = {
    enum: ['initial', 'queued', 'running', 'failed', 'canceled', 'done'],
    type: 'string',
    description: `* \`initial\` - initial
* \`queued\` - queued
* \`running\` - running
* \`failed\` - failed
* \`canceled\` - canceled
* \`done\` - done`
} as const;

export const $SeqvarsQueryPresetsClinvar = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsClinvar\`\`.

Not used directly but used as base class.`,
    properties: {
        clinvar_presence_required: {
            type: 'boolean',
            default: false
        },
        clinvar_germline_aggregate_description: {
            '$ref': '#/components/schemas/ClinvarGermlineAggregateDescriptionList'
        },
        allow_conflicting_interpretations: {
            type: 'boolean',
            default: false
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsColumns = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsColumns\`\`.

Not used directly but used as base class.`,
    properties: {
        column_settings: {
            '$ref': '#/components/schemas/SeqvarsColumnConfigList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsConsequence = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsConsequence\`\`.

Not used directly but used as base class.`,
    properties: {
        variant_types: {
            '$ref': '#/components/schemas/SeqvarsVariantTypeChoiceList'
        },
        transcript_types: {
            '$ref': '#/components/schemas/SeqvarsTranscriptTypeChoiceList'
        },
        variant_consequences: {
            '$ref': '#/components/schemas/SeqvarsVariantConsequenceChoiceList'
        },
        max_distance_to_exon: {
            type: 'integer',
            nullable: true
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsFrequency = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsFrequency\`\`.

Not used directly but used as base class.`,
    properties: {
        gnomad_exomes: {
            oneOf: [
                {
                    description: 'Settings for gnomAD nuclear frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadNuclearFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        gnomad_genomes: {
            oneOf: [
                {
                    description: 'Settings for gnomAD nuclear frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadNuclearFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        gnomad_mitochondrial: {
            oneOf: [
                {
                    description: 'Settings for gnomAD mitochondrial frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heteroplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heteroplasmic'
                        },
                        homoplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homoplasmic'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadMitochondrialFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        helixmtdb: {
            oneOf: [
                {
                    description: 'Settings for HelixMtDb frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heteroplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heteroplasmic'
                        },
                        homoplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homoplasmic'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'HelixmtDbFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        inhouse: {
            oneOf: [
                {
                    description: 'Settings for in-house frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        carriers: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Carriers'
                        }
                    },
                    title: 'InhouseFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsLocus = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsLocus\`\`.

Not used directly but used as base class.`,
    properties: {
        genes: {
            '$ref': '#/components/schemas/GeneList'
        },
        gene_panels: {
            '$ref': '#/components/schemas/GenePanelList'
        },
        genome_regions: {
            '$ref': '#/components/schemas/GenomeRegionList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsPhenotypePrio = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsPhenotypePrio\`\`.

Not used directly but used as base class.`,
    properties: {
        phenotype_prio_enabled: {
            type: 'boolean',
            default: false
        },
        phenotype_prio_algorithm: {
            type: 'string',
            nullable: true,
            maxLength: 128
        },
        terms: {
            '$ref': '#/components/schemas/TermPresenceList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsQuality = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsQuality\`\`.

Not used directly but used as base class.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        filter_active: {
            type: 'boolean',
            default: false
        },
        min_dp_het: {
            type: 'integer',
            nullable: true
        },
        min_dp_hom: {
            type: 'integer',
            nullable: true
        },
        min_ab_het: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        min_gq: {
            type: 'integer',
            nullable: true
        },
        min_ad: {
            type: 'integer',
            nullable: true
        },
        max_ad: {
            type: 'integer',
            nullable: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsSet = {
    type: 'object',
    description: 'Serializer for ``QueryPresetsSet``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        project: {
            type: 'string',
            format: 'uuid',
            description: 'Project SODAR UUID',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'project', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsSetDetails = {
    type: 'object',
    description: 'Serializer for ``QueryPresetsSet`` that renders all nested versions.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        project: {
            type: 'string',
            format: 'uuid',
            description: 'Project SODAR UUID',
            readOnly: true
        },
        versions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsSetVersionDetails'
            },
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'project', 'sodar_uuid', 'versions']
} as const;

export const $SeqvarsQueryPresetsSetVersion = {
    type: 'object',
    description: 'Serializer for ``QueryPresetsSetVersion``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        presetsset: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        version_major: {
            type: 'integer',
            default: 1
        },
        version_minor: {
            type: 'integer',
            default: 0
        },
        status: {
            type: 'string',
            default: 'draft'
        },
        signed_off_by: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SODARUser'
                }
            ],
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'presetsset', 'signed_off_by', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsSetVersionDetails = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsSetVersion\`\` (for \`\`*-detail\`\`).

When retrieving the details of a seqvar query preset set version, we also render the
owned records as well as the presetsset.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        presetsset: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SeqvarsQueryPresetsSet'
                }
            ],
            readOnly: true
        },
        version_major: {
            type: 'integer',
            default: 1
        },
        version_minor: {
            type: 'integer',
            default: 0
        },
        status: {
            type: 'string',
            default: 'draft'
        },
        signed_off_by: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SODARUser'
                }
            ],
            readOnly: true
        },
        seqvarsquerypresetsquality_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsQuality'
            },
            readOnly: true
        },
        seqvarsquerypresetsfrequency_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsFrequency'
            },
            readOnly: true
        },
        seqvarsquerypresetsconsequence_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsConsequence'
            },
            readOnly: true
        },
        seqvarsquerypresetslocus_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsLocus'
            },
            readOnly: true
        },
        seqvarsquerypresetsphenotypeprio_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsPhenotypePrio'
            },
            readOnly: true
        },
        seqvarsquerypresetsvariantprio_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsVariantPrio'
            },
            readOnly: true
        },
        seqvarsquerypresetsclinvar_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsClinvar'
            },
            readOnly: true
        },
        seqvarsquerypresetscolumns_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsQueryPresetsColumns'
            },
            readOnly: true
        },
        seqvarspredefinedquery_set: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeqvarsPredefinedQuery'
            },
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'presetsset', 'seqvarspredefinedquery_set', 'seqvarsquerypresetsclinvar_set', 'seqvarsquerypresetscolumns_set', 'seqvarsquerypresetsconsequence_set', 'seqvarsquerypresetsfrequency_set', 'seqvarsquerypresetslocus_set', 'seqvarsquerypresetsphenotypeprio_set', 'seqvarsquerypresetsquality_set', 'seqvarsquerypresetsvariantprio_set', 'signed_off_by', 'sodar_uuid']
} as const;

export const $SeqvarsQueryPresetsVariantPrio = {
    type: 'object',
    description: `Serializer for \`\`QueryPresetsVariantPrio\`\`.

Not used directly but used as base class.`,
    properties: {
        variant_prio_enabled: {
            type: 'boolean',
            default: false
        },
        services: {
            '$ref': '#/components/schemas/SeqvarsPrioServiceList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        rank: {
            type: 'integer',
            default: 1
        },
        label: {
            type: 'string',
            maxLength: 128
        },
        description: {
            type: 'string',
            nullable: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'label', 'presetssetversion', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettings = {
    type: 'object',
    description: 'Serializer for ``QuerySettings``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        session: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        predefinedquery: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        genotypepresets: {
            oneOf: [
                {
                    description: 'Configuration for a single column in the result table.',
                    properties: {
                        choice: {
                            anyOf: [
                                {
                                    '$ref': '#/components/schemas/SeqvarsGenotypePresetChoice'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null
                        }
                    },
                    title: 'SeqvarsGenotypePresets',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        qualitypresets: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            nullable: true
        },
        consequencepresets: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            nullable: true
        },
        locuspresets: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            nullable: true
        },
        frequencypresets: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            nullable: true
        },
        phenotypepriopresets: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            nullable: true
        },
        variantpriopresets: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            nullable: true
        },
        clinvarpresets: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            nullable: true
        },
        genotype: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        quality: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        consequence: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        locus: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        frequency: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        phenotypeprio: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        variantprio: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        clinvar: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['clinvar', 'clinvarpresets', 'consequence', 'consequencepresets', 'date_created', 'date_modified', 'frequency', 'frequencypresets', 'genotype', 'locus', 'locuspresets', 'phenotypeprio', 'phenotypepriopresets', 'predefinedquery', 'presetssetversion', 'quality', 'qualitypresets', 'session', 'sodar_uuid', 'variantprio', 'variantpriopresets']
} as const;

export const $SeqvarsQuerySettingsClinvar = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsClinvar``.',
    properties: {
        clinvar_presence_required: {
            type: 'boolean',
            default: false
        },
        clinvar_germline_aggregate_description: {
            '$ref': '#/components/schemas/ClinvarGermlineAggregateDescriptionList'
        },
        allow_conflicting_interpretations: {
            type: 'boolean',
            default: false
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettingsConsequence = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsConsequence``.',
    properties: {
        variant_types: {
            '$ref': '#/components/schemas/SeqvarsVariantTypeChoiceList'
        },
        transcript_types: {
            '$ref': '#/components/schemas/SeqvarsTranscriptTypeChoiceList'
        },
        variant_consequences: {
            '$ref': '#/components/schemas/SeqvarsVariantConsequenceChoiceList'
        },
        max_distance_to_exon: {
            type: 'integer',
            nullable: true
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettingsDetails = {
    type: 'object',
    description: `Serializer for \`\`QuerySettings\`\` (for \`\`*-detail\`\`).

For retrieve, update, or delete operations, we also render the nested
owned category settings.`,
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        session: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        presetssetversion: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        predefinedquery: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        genotypepresets: {
            oneOf: [
                {
                    description: 'Configuration for a single column in the result table.',
                    properties: {
                        choice: {
                            anyOf: [
                                {
                                    '$ref': '#/components/schemas/SeqvarsGenotypePresetChoice'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null
                        }
                    },
                    title: 'SeqvarsGenotypePresets',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        qualitypresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        consequencepresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        locuspresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        frequencypresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        phenotypepriopresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        variantpriopresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        clinvarpresets: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        genotype: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsGenotype'
        },
        quality: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsQuality'
        },
        consequence: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsConsequence'
        },
        locus: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsLocus'
        },
        frequency: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsFrequency'
        },
        phenotypeprio: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsPhenotypePrio'
        },
        variantprio: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsVariantPrio'
        },
        clinvar: {
            '$ref': '#/components/schemas/SeqvarsQuerySettingsClinvar'
        }
    },
    required: ['clinvar', 'consequence', 'date_created', 'date_modified', 'frequency', 'genotype', 'locus', 'phenotypeprio', 'predefinedquery', 'presetssetversion', 'quality', 'session', 'sodar_uuid', 'variantprio']
} as const;

export const $SeqvarsQuerySettingsFrequency = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsFrequency``.',
    properties: {
        gnomad_exomes: {
            oneOf: [
                {
                    description: 'Settings for gnomAD nuclear frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadNuclearFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        gnomad_genomes: {
            oneOf: [
                {
                    description: 'Settings for gnomAD nuclear frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadNuclearFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        gnomad_mitochondrial: {
            oneOf: [
                {
                    description: 'Settings for gnomAD mitochondrial frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heteroplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heteroplasmic'
                        },
                        homoplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homoplasmic'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'GnomadMitochondrialFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        helixmtdb: {
            oneOf: [
                {
                    description: 'Settings for HelixMtDb frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heteroplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heteroplasmic'
                        },
                        homoplasmic: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homoplasmic'
                        },
                        frequency: {
                            anyOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Frequency'
                        }
                    },
                    title: 'HelixmtDbFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        inhouse: {
            oneOf: [
                {
                    description: 'Settings for in-house frequency filtering.',
                    properties: {
                        enabled: {
                            default: false,
                            title: 'Enabled',
                            type: 'boolean'
                        },
                        heterozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Heterozygous'
                        },
                        homozygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Homozygous'
                        },
                        hemizygous: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Hemizygous'
                        },
                        carriers: {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'null'
                                }
                            ],
                            default: null,
                            title: 'Carriers'
                        }
                    },
                    title: 'InhouseFrequencySettings',
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ]
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettingsGenotype = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsGenotype``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        sample_genotype_choices: {
            '$ref': '#/components/schemas/SeqvarsSampleGenotypeChoiceList'
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettingsLocus = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsLocus``.',
    properties: {
        genes: {
            '$ref': '#/components/schemas/GeneList'
        },
        gene_panels: {
            '$ref': '#/components/schemas/GenePanelList'
        },
        genome_regions: {
            '$ref': '#/components/schemas/GenomeRegionList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettingsPhenotypePrio = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsPhenotypePrio``.',
    properties: {
        phenotype_prio_enabled: {
            type: 'boolean',
            default: false
        },
        phenotype_prio_algorithm: {
            type: 'string',
            nullable: true,
            maxLength: 128
        },
        terms: {
            '$ref': '#/components/schemas/TermPresenceList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettingsQuality = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsQuality``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        sample_quality_filters: {
            '$ref': '#/components/schemas/SeqvarsSampleQualityFilterList'
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsQuerySettingsVariantPrio = {
    type: 'object',
    description: 'Serializer for ``QuerySettingsVariantPrio``.',
    properties: {
        variant_prio_enabled: {
            type: 'boolean',
            default: false
        },
        services: {
            '$ref': '#/components/schemas/SeqvarsPrioServiceList'
        },
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        querysettings: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        }
    },
    required: ['date_created', 'date_modified', 'querysettings', 'sodar_uuid']
} as const;

export const $SeqvarsResultRow = {
    type: 'object',
    description: 'Serializer for ``ResultRow``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        resultset: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        release: {
            type: 'string',
            readOnly: true
        },
        chromosome: {
            type: 'string',
            readOnly: true
        },
        chromosome_no: {
            type: 'integer',
            readOnly: true
        },
        start: {
            type: 'integer',
            readOnly: true
        },
        stop: {
            type: 'integer',
            readOnly: true
        },
        reference: {
            type: 'string',
            readOnly: true
        },
        alternative: {
            type: 'string',
            readOnly: true
        },
        payload: {
            description: 'Payload for one result row of a seqvar query.',
            properties: {
                foo: {
                    title: 'Foo',
                    type: 'integer'
                }
            },
            required: ['foo'],
            title: 'SeqvarsResultRowPayload',
            type: 'object'
        }
    },
    required: ['alternative', 'chromosome', 'chromosome_no', 'payload', 'reference', 'release', 'resultset', 'sodar_uuid', 'start', 'stop']
} as const;

export const $SeqvarsResultSet = {
    type: 'object',
    description: 'Serializer for ``ResultSet``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        queryexecution: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        datasource_infos: {
            description: 'Container for ``DataSourceInfo`` records.',
            properties: {
                infos: {
                    items: {
                        '$ref': '#/components/schemas/DataSourceInfo'
                    },
                    title: 'Infos',
                    type: 'array'
                }
            },
            required: ['infos'],
            title: 'DataSourceInfos',
            type: 'object'
        }
    },
    required: ['datasource_infos', 'date_created', 'date_modified', 'queryexecution', 'sodar_uuid']
} as const;

export const $SeqvarsSampleGenotypeChoiceList = {
    type: 'array',
    items: {
        description: 'Store the genotype of a sample.',
        properties: {
            sample: {
                title: 'Sample',
                type: 'string'
            },
            genotype: {
                '$ref': '#/components/schemas/SeqvarsGenotypeChoice'
            }
        },
        required: ['sample', 'genotype'],
        title: 'SeqvarsSampleGenotypeChoice',
        type: 'object'
    }
} as const;

export const $SeqvarsSampleQualityFilterList = {
    type: 'array',
    items: {
        description: 'Stores per-sample quality filter settings for a particular query.',
        properties: {
            sample: {
                title: 'Sample',
                type: 'string'
            },
            filter_active: {
                default: false,
                title: 'Filter Active',
                type: 'boolean'
            },
            min_dp_het: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Min Dp Het'
            },
            min_dp_hom: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Min Dp Hom'
            },
            min_ab_het: {
                anyOf: [
                    {
                        type: 'number'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Min Ab Het'
            },
            min_gq: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Min Gq'
            },
            min_ad: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Min Ad'
            },
            max_ad: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Max Ad'
            }
        },
        required: ['sample'],
        title: 'SeqvarsSampleQualityFilter',
        type: 'object'
    }
} as const;

export const $SeqvarsTranscriptTypeChoiceList = {
    type: 'array',
    items: {
        type: 'string',
        title: 'SeqvarsTranscriptTypeChoice',
        enum: ['coding', 'non_coding']
    }
} as const;

export const $SeqvarsVariantConsequenceChoiceList = {
    type: 'array',
    items: {
        type: 'string',
        title: 'SeqvarsVariantConsequenceChoice',
        enum: ['frameshift_variant', 'rare_amino_acid_variant', 'splice_acceptor_variant', 'splice_donor_variant', 'start_lost', 'stop_gained', 'stop_lost', '3_prime_UTR_truncation', '5_prime_UTR_truncation', 'conservative_inframe_deletion', 'conservative_inframe_insertion', 'disruptive_inframe_deletion', 'disruptive_inframe_insertion', 'missense_variant', 'splice_region_variant', 'initiator_codon_variant', 'start_retained', 'stop_retained_variant', 'synonymous_variant', 'downstream_gene_variant', 'intron_variant', 'non_coding_transcript_exon_variant', 'non_coding_transcript_intron_variant', '5_prime_UTR_variant', 'coding_sequence_variant', 'upstream_gene_variant', '3_prime_UTR_variant-exon_variant', '5_prime_UTR_variant-exon_variant', '3_prime_UTR_variant-intron_variant', '5_prime_UTR_variant-intron_variant']
    }
} as const;

export const $SeqvarsVariantTypeChoiceList = {
    type: 'array',
    items: {
        type: 'string',
        title: 'SeqvarsVariantTypeChoice',
        enum: ['snv', 'indel', 'mnv', 'complex_substitution']
    }
} as const;

export const $SvAnnotationReleaseInfo = {
    type: 'object',
    description: 'Base serializer for any SODAR model with a sodar_uuid field',
    properties: {
        genomebuild: {
            type: 'string',
            readOnly: true
        },
        table: {
            type: 'string',
            readOnly: true
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        release: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['genomebuild', 'release', 'table', 'timestamp']
} as const;

export const $TargetBedFile = {
    type: 'object',
    description: 'Serializer for ``TargetBedFile``.',
    properties: {
        sodar_uuid: {
            type: 'string',
            readOnly: true
        },
        date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation'
        },
        date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification'
        },
        enrichmentkit: {
            type: 'string',
            format: 'uuid',
            description: 'Record SODAR UUID',
            readOnly: true
        },
        file_uri: {
            type: 'string',
            description: "The file's URI.",
            maxLength: 512
        },
        genome_release: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GenomeReleaseEnum'
                }
            ],
            default: 'grch37',
            description: `The file's reference genome.

* \`grch37\` - GRCh37
* \`grch38\` - GRCh38`
        }
    },
    required: ['date_created', 'date_modified', 'enrichmentkit', 'file_uri', 'sodar_uuid']
} as const;

export const $Term = {
    description: 'Representation of a condition (phenotype / disease) term.',
    properties: {
        term_id: {
            title: 'Term Id',
            type: 'string'
        },
        label: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Label'
        }
    },
    required: ['term_id', 'label'],
    title: 'Term',
    type: 'object'
} as const;

export const $TermPresenceList = {
    type: 'array',
    items: {
        description: 'Representation of a term with optional presence (default is not excluded).',
        properties: {
            term: {
                '$ref': '#/components/schemas/Term'
            },
            excluded: {
                anyOf: [
                    {
                        type: 'boolean'
                    },
                    {
                        type: 'null'
                    }
                ],
                default: null,
                title: 'Excluded'
            }
        },
        required: ['term'],
        title: 'TermPresence',
        type: 'object'
    }
} as const;

export const $VarfishStats = {
    type: 'object',
    description: 'Serializer for common-denominator stats objects',
    properties: {
        samples: {
            '$ref': '#/components/schemas/strList'
        },
        readstats: {
            '$ref': '#/components/schemas/SampleReadStatsList'
        },
        alignmentstats: {
            '$ref': '#/components/schemas/SampleAlignmentStatsList'
        },
        seqvarstats: {
            '$ref': '#/components/schemas/SampleSeqvarStatsList'
        },
        strucvarstats: {
            '$ref': '#/components/schemas/SampleStrucvarStatsList'
        }
    },
    required: ['alignmentstats', 'readstats', 'samples', 'seqvarstats', 'strucvarstats']
} as const;

export const $strList = {
    type: 'array',
    items: {
        type: 'string'
    }
} as const;