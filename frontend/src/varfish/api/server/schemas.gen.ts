// This file is auto-generated by @hey-api/openapi-ts

export const $ExtraAnnoField = {
  type: 'object',
  properties: {
    field: {
      type: 'integer',
    },
    label: {
      type: 'string',
    },
  },
  required: ['field', 'label'],
} as const

export const $CaseListQcStats = {
  type: 'object',
  properties: {
    pedigree: {
      type: 'object',
    },
    relData: {
      type: 'object',
    },
    varStats: {
      type: 'object',
    },
    sexErrors: {
      type: 'object',
    },
    chrXHetHomRatio: {
      type: 'object',
    },
    dps: {
      type: 'object',
    },
    dpQuantiles: {
      type: 'object',
    },
    hetRatioQuantiles: {
      type: 'object',
    },
    dpHetData: {
      type: 'object',
    },
  },
  required: [
    'pedigree',
    'relData',
    'varStats',
    'sexErrors',
    'chrXHetHomRatio',
    'dps',
    'dpQuantiles',
    'hetRatioQuantiles',
    'dpHetData',
  ],
} as const

export const $Case = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    release: {
      type: 'string',
      readOnly: true,
      nullable: true,
    },
    name: {
      type: 'string',
      maxLength: 512,
    },
    index: {
      type: 'string',
      maxLength: 512,
    },
    pedigree: {
      type: 'object',
    },
    num_small_vars: {
      type: 'integer',
      readOnly: true,
      nullable: true,
      description:
        'Number of small variants, empty if no small variants have been imported',
    },
    num_svs: {
      type: 'integer',
      readOnly: true,
      nullable: true,
      description:
        'Number of structural variants, empty if no structural variants have been imported',
    },
    notes: {
      type: 'string',
      nullable: true,
    },
    status: {
      enum: [
        'initial',
        'active',
        'closed-unsolved',
        'closed-uncertain',
        'closed-solved',
      ],
      type: 'string',
    },
    tags: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    annotationreleaseinfo_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          genomebuild: {
            type: 'string',
            readOnly: true,
          },
          table: {
            type: 'string',
            readOnly: true,
          },
          timestamp: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          release: {
            type: 'string',
            readOnly: true,
          },
        },
      },
      readOnly: true,
    },
    svannotationreleaseinfo_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          genomebuild: {
            type: 'string',
            readOnly: true,
          },
          table: {
            type: 'string',
            readOnly: true,
          },
          timestamp: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          release: {
            type: 'string',
            readOnly: true,
          },
        },
      },
      readOnly: true,
    },
    phenotype_terms: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation',
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification',
          },
          case: {
            type: 'string',
            readOnly: true,
          },
          individual: {
            type: 'string',
            description: 'Individual',
            maxLength: 128,
          },
          terms: {
            type: 'object',
          },
        },
        required: ['individual', 'terms'],
      },
      readOnly: true,
    },
    casealignmentstats: {
      type: 'string',
      readOnly: true,
    },
    casevariantstats: {
      type: 'string',
      readOnly: true,
    },
    relatedness: {
      type: 'string',
      readOnly: true,
    },
    sex_errors: {
      type: 'string',
      readOnly: true,
    },
    presetset: {
      type: 'string',
      readOnly: true,
    },
    case_version: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    smallvariantqueryresultset: {
      type: 'string',
      readOnly: true,
    },
    svqueryresultset: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['name', 'index', 'pedigree'],
} as const

export const $SmallVariantQuery = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    query_settings: {
      type: 'object',
    },
    query_settings_version_major: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description: 'The query settings version (major)',
    },
    query_settings_version_minor: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description: 'The query settings version (minor)',
    },
    name: {
      type: 'string',
      nullable: true,
      description: 'Optional user-assigned name',
      maxLength: 100,
    },
    public: {
      type: 'boolean',
      description: 'Case is flagged as public or not',
    },
  },
  required: ['query_settings'],
} as const

export const $SmallVariantQueryWithLogs = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    query_state: {
      enum: ['initial', 'running', 'done', 'cancelled', 'failed', 'timeout'],
      type: 'string',
      readOnly: true,
      description: 'The current query state',
    },
    query_state_msg: {
      type: 'string',
      readOnly: true,
      nullable: true,
      description: 'Message related to the query state',
    },
    query_settings: {
      type: 'object',
    },
    query_settings_version_major: {
      type: 'integer',
      readOnly: true,
      description: 'The query settings version (major)',
    },
    query_settings_version_minor: {
      type: 'integer',
      readOnly: true,
      description: 'The query settings version (minor)',
    },
    logs: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['query_settings'],
} as const

export const $SmallVariantQueryResultSet = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of modification',
    },
    smallvariantquery: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    start_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'Date time of query start',
    },
    end_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'Date time of query end',
    },
    elapsed_seconds: {
      type: 'number',
      readOnly: true,
      description: 'Elapsed seconds',
    },
    result_row_count: {
      type: 'integer',
      readOnly: true,
      description: 'Number of rows in the result',
    },
  },
} as const

export const $SmallVariantQueryResultRow = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    smallvariantqueryresultset: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      readOnly: true,
    },
    chromosome: {
      type: 'string',
      readOnly: true,
    },
    chromosome_no: {
      type: 'integer',
      readOnly: true,
    },
    bin: {
      type: 'integer',
      readOnly: true,
    },
    start: {
      type: 'integer',
      readOnly: true,
    },
    end: {
      type: 'integer',
      readOnly: true,
    },
    reference: {
      type: 'string',
      readOnly: true,
    },
    alternative: {
      type: 'string',
      readOnly: true,
    },
    payload: {
      type: 'object',
      readOnly: true,
      description: 'The query result rows',
    },
  },
} as const

export const $SettingsShortcuts = {
  type: 'object',
  properties: {
    presets: {
      type: 'object',
    },
    query_settings: {
      type: 'object',
    },
  },
  required: ['presets', 'query_settings'],
} as const

export const $ExportFileBgJob = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    file_type: {
      enum: ['tsv', 'xlsx', 'vcf'],
      type: 'string',
      description: 'File types for exported file',
    },
    status: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['file_type'],
} as const

export const $SmallVariantComment = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    reference: {
      type: 'string',
      maxLength: 512,
    },
    alternative: {
      type: 'string',
      maxLength: 512,
    },
    text: {
      type: 'string',
    },
    user_can_edit: {
      type: 'string',
      readOnly: true,
    },
  },
  required: [
    'release',
    'chromosome',
    'start',
    'end',
    'reference',
    'alternative',
    'text',
  ],
} as const

export const $SmallVariantCommentProject = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    reference: {
      type: 'string',
      maxLength: 512,
    },
    alternative: {
      type: 'string',
      maxLength: 512,
    },
    text: {
      type: 'string',
    },
    user_can_edit: {
      type: 'string',
      readOnly: true,
    },
  },
  required: [
    'release',
    'chromosome',
    'start',
    'end',
    'reference',
    'alternative',
    'text',
  ],
} as const

export const $SmallVariantFlags = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    reference: {
      type: 'string',
      maxLength: 512,
    },
    alternative: {
      type: 'string',
      maxLength: 512,
    },
    flag_bookmarked: {
      type: 'boolean',
    },
    flag_incidental: {
      type: 'boolean',
    },
    flag_candidate: {
      type: 'boolean',
    },
    flag_final_causative: {
      type: 'boolean',
    },
    flag_for_validation: {
      type: 'boolean',
    },
    flag_no_disease_association: {
      type: 'boolean',
    },
    flag_segregates: {
      type: 'boolean',
    },
    flag_doesnt_segregate: {
      type: 'boolean',
    },
    flag_visual: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_molecular: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_validation: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_phenotype_match: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_summary: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
  },
  required: [
    'release',
    'chromosome',
    'start',
    'end',
    'reference',
    'alternative',
  ],
} as const

export const $SmallVariantFlagsProject = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    reference: {
      type: 'string',
      maxLength: 512,
    },
    alternative: {
      type: 'string',
      maxLength: 512,
    },
    flag_bookmarked: {
      type: 'boolean',
    },
    flag_incidental: {
      type: 'boolean',
    },
    flag_candidate: {
      type: 'boolean',
    },
    flag_final_causative: {
      type: 'boolean',
    },
    flag_for_validation: {
      type: 'boolean',
    },
    flag_no_disease_association: {
      type: 'boolean',
    },
    flag_segregates: {
      type: 'boolean',
    },
    flag_doesnt_segregate: {
      type: 'boolean',
    },
    flag_visual: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_molecular: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_validation: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_phenotype_match: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_summary: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
  },
  required: [
    'release',
    'chromosome',
    'start',
    'end',
    'reference',
    'alternative',
  ],
} as const

export const $AcmgCriteriaRating = {
  type: 'object',
  properties: {
    user: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Case SODAR UUID',
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    reference: {
      type: 'string',
      maxLength: 512,
    },
    alternative: {
      type: 'string',
      maxLength: 512,
    },
    pvs1: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        "('null variant (nonsense, frameshift, canonical ±1 or 2 splice sites, initiation codon, single or multiexon deletion) in a gene where LOF is a known mechanism of disease',)",
    },
    ps1: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Same amino acid change as a previously established pathogenic variant regardless of nucleotide change',
    },
    ps2: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'De novo (both maternity and paternity confirmed) in a patient with the disease and no family history',
    },
    ps3: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Well-established in vitro or in vivo functional studies supportive of a damaging effect on the gene or gene product',
    },
    ps4: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'The prevalence of the variant in affected individuals is significantly increased compared with the prevalence in controls',
    },
    pm1: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Located in a mutational hot spot and/or critical and well-established functional domain (e.g., active site of an enzyme) without benign variation',
    },
    pm2: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Absent from controls (or at extremely low frequency if recessive) in Exome Sequencing Project, 1000 Genomes Project, or Exome Aggregation Consortium',
    },
    pm3: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'For recessive disorders, detected in trans with a pathogenic variant',
    },
    pm4: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Protein length changes as a result of in-frame deletions/insertions in a nonrepeat region or stop-loss variants',
    },
    pm5: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Novel missense change at an amino acid residue where a different missense change determined to be pathogenic has been seen before',
    },
    pm6: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Assumed de novo, but without confirmation of paternity and maternity',
    },
    pp1: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Cosegregation with disease in multiple affected family members in a gene definitively known to cause the disease',
    },
    pp2: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Missense variant in a gene that has a low rate of benign missense variation and in which missense variants are: a common mechanism of disease',
    },
    pp3: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Multiple lines of computational evidence support a deleterious effect on the gene or gene product (conservation, evolutionary, splicing impact, etc.)',
    },
    pp4: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        "Patient's phenotype or family history is highly specific for a disease with a single genetic etiology",
    },
    pp5: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Reputable source recently reports variant as pathogenic, but the evidence is not available to the laboratory to perform an independent evaluation',
    },
    ba1: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Allele frequency is >5% in Exome Sequencing Project, 1000 Genomes Project, or Exome Aggregation Consortium',
    },
    bs1: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Allele frequency is greater than expected for disorder (see Table 6)',
    },
    bs2: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Observed in a healthy adult individual for a recessive (homozygous), dominant (heterozygous), or X-linked (hemizygous) disorder, with full penetrance expected at an early age',
    },
    bs3: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Well-established in vitro or in vivo functional studies show no damaging effect on protein function or splicing',
    },
    bs4: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description: 'BS4: Lack of segregation in affected members of a family',
    },
    bp1: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Missense variant in a gene for which primarily truncating variants are known to cause disease',
    },
    bp2: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Observed in trans with a pathogenic variant for a fully penetrant dominant gene/disorder or observed in cis with a pathogenic variant in any inheritance pattern',
    },
    bp3: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'In-frame deletions/insertions in a repetitive region without a known function',
    },
    bp4: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Multiple lines of computational evidence suggest no impact on gene or gene product (conservation, evolutionary, splicing impact, etc.)',
    },
    bp5: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Variant found in a case with an alternate molecular basis for disease',
    },
    bp6: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'Reputable source recently reports variant as benign, but the evidence is not available to the laboratory to perform an independent evaluation',
    },
    bp7: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      description:
        'A synonymous (silent) variant for which splicing prediction algorithms predict no impact to the splice consensus sequence nor the creation of a new splice site AND the nucleotide is not highly conserved',
    },
    class_auto: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true,
      description: 'Result of the ACMG classification',
    },
    class_override: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true,
      description:
        'Use this field to override the auto-computed class assignment',
    },
    acmg_class: {
      type: 'string',
      readOnly: true,
    },
  },
  required: [
    'release',
    'chromosome',
    'start',
    'end',
    'reference',
    'alternative',
  ],
} as const

export const $ProjectSettings = {
  type: 'object',
  properties: {
    ts_tv_valid_upper: {
      type: 'number',
    },
    ts_tv_valid_lower: {
      type: 'number',
    },
  },
  required: ['ts_tv_valid_upper', 'ts_tv_valid_lower'],
} as const

export const $CaseImportInfo = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    owner: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      nullable: true,
      maxLength: 32,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    name: {
      type: 'string',
      maxLength: 512,
    },
    index: {
      type: 'string',
      maxLength: 512,
    },
    pedigree: {
      type: 'object',
    },
    notes: {
      type: 'string',
      nullable: true,
    },
    state: {
      enum: ['draft', 'submitted', 'imported', 'evicted', 'failed'],
      type: 'string',
      description: 'State of the case import ',
    },
    tags: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    bam_qc_files: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            description: 'Record UUID',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation',
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification',
          },
          case_import_info: {
            type: 'string',
            readOnly: true,
          },
          file: {
            type: 'string',
            format: 'binary',
            writeOnly: true,
            description: 'The uploaded file.',
          },
          name: {
            type: 'string',
            description: 'Original file name.',
            maxLength: 200,
          },
          md5: {
            type: 'string',
            description: 'MD5 checksum of original file.',
            maxLength: 32,
          },
        },
        required: ['file', 'name', 'md5'],
      },
      readOnly: true,
    },
    variant_sets: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
            description: 'Record UUID',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation',
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification',
          },
          genomebuild: {
            enum: ['GRCh37', 'GRCh38'],
            type: 'string',
            description: 'Genome build used in the variant set.',
          },
          case_import_info: {
            type: 'string',
            readOnly: true,
          },
          variant_type: {
            enum: ['SMALL', 'STRUCTURAL'],
            type: 'string',
            description: 'The type of variant set that is referenced.',
          },
          genotype_files: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  description: 'Record UUID',
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                  description: 'DateTime of creation',
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                  description: 'DateTime of last modification',
                },
                variant_set_import_info: {
                  type: 'string',
                  readOnly: true,
                },
                file: {
                  type: 'string',
                  format: 'binary',
                  writeOnly: true,
                  description: 'The uploaded file.',
                },
                name: {
                  type: 'string',
                  description: 'Original file name.',
                  maxLength: 200,
                },
                md5: {
                  type: 'string',
                  description: 'MD5 checksum of original file.',
                  maxLength: 32,
                },
              },
              required: ['file', 'name', 'md5'],
            },
            readOnly: true,
          },
          effect_files: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  description: 'Record UUID',
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                  description: 'DateTime of creation',
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                  description: 'DateTime of last modification',
                },
                variant_set_import_info: {
                  type: 'string',
                  readOnly: true,
                },
                file: {
                  type: 'string',
                  format: 'binary',
                  writeOnly: true,
                  description: 'The uploaded file.',
                },
                name: {
                  type: 'string',
                  description: 'Original file name.',
                  maxLength: 200,
                },
                md5: {
                  type: 'string',
                  description: 'MD5 checksum of original file.',
                  maxLength: 32,
                },
              },
              required: ['file', 'name', 'md5'],
            },
            readOnly: true,
          },
          db_info_files: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  description: 'Record UUID',
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                  description: 'DateTime of creation',
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                  description: 'DateTime of last modification',
                },
                variant_set_import_info: {
                  type: 'string',
                  readOnly: true,
                },
                file: {
                  type: 'string',
                  format: 'binary',
                  writeOnly: true,
                  description: 'The uploaded file.',
                },
                name: {
                  type: 'string',
                  description: 'Original file name.',
                  maxLength: 200,
                },
                md5: {
                  type: 'string',
                  description: 'MD5 checksum of original file.',
                  maxLength: 32,
                },
              },
              required: ['file', 'name', 'md5'],
            },
            readOnly: true,
          },
          state: {
            enum: ['draft', 'uploaded', 'imported', 'evicted', 'failed'],
            type: 'string',
            description: 'State of the variant set import',
          },
        },
        required: ['variant_type'],
      },
      readOnly: true,
    },
  },
  required: ['name', 'index', 'pedigree'],
} as const

export const $VariantSetImportInfo = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Record UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    genomebuild: {
      enum: ['GRCh37', 'GRCh38'],
      type: 'string',
      description: 'Genome build used in the variant set.',
    },
    case_import_info: {
      type: 'string',
      readOnly: true,
    },
    variant_type: {
      enum: ['SMALL', 'STRUCTURAL'],
      type: 'string',
      description: 'The type of variant set that is referenced.',
    },
    genotype_files: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            description: 'Record UUID',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation',
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification',
          },
          variant_set_import_info: {
            type: 'string',
            readOnly: true,
          },
          file: {
            type: 'string',
            format: 'binary',
            writeOnly: true,
            description: 'The uploaded file.',
          },
          name: {
            type: 'string',
            description: 'Original file name.',
            maxLength: 200,
          },
          md5: {
            type: 'string',
            description: 'MD5 checksum of original file.',
            maxLength: 32,
          },
        },
        required: ['file', 'name', 'md5'],
      },
      readOnly: true,
    },
    effect_files: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            description: 'Record UUID',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation',
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification',
          },
          variant_set_import_info: {
            type: 'string',
            readOnly: true,
          },
          file: {
            type: 'string',
            format: 'binary',
            writeOnly: true,
            description: 'The uploaded file.',
          },
          name: {
            type: 'string',
            description: 'Original file name.',
            maxLength: 200,
          },
          md5: {
            type: 'string',
            description: 'MD5 checksum of original file.',
            maxLength: 32,
          },
        },
        required: ['file', 'name', 'md5'],
      },
      readOnly: true,
    },
    db_info_files: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            description: 'Record UUID',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of creation',
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
            description: 'DateTime of last modification',
          },
          variant_set_import_info: {
            type: 'string',
            readOnly: true,
          },
          file: {
            type: 'string',
            format: 'binary',
            writeOnly: true,
            description: 'The uploaded file.',
          },
          name: {
            type: 'string',
            description: 'Original file name.',
            maxLength: 200,
          },
          md5: {
            type: 'string',
            description: 'MD5 checksum of original file.',
            maxLength: 32,
          },
        },
        required: ['file', 'name', 'md5'],
      },
      readOnly: true,
    },
    state: {
      enum: ['draft', 'uploaded', 'imported', 'evicted', 'failed'],
      type: 'string',
      description: 'State of the variant set import',
    },
  },
  required: ['variant_type'],
} as const

export const $BamQcFile = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      description: 'Record UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case_import_info: {
      type: 'string',
      readOnly: true,
    },
    file: {
      type: 'string',
      format: 'binary',
      writeOnly: true,
      description: 'The uploaded file.',
    },
    name: {
      type: 'string',
      description: 'Original file name.',
      maxLength: 200,
    },
    md5: {
      type: 'string',
      description: 'MD5 checksum of original file.',
      maxLength: 32,
    },
  },
  required: ['file', 'name', 'md5'],
} as const

export const $CaseGeneAnnotationFile = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      description: 'Record UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case_import_info: {
      type: 'string',
      readOnly: true,
    },
    file: {
      type: 'string',
      format: 'binary',
      writeOnly: true,
      description: 'The uploaded file.',
    },
    name: {
      type: 'string',
      description: 'Original file name.',
      maxLength: 200,
    },
    md5: {
      type: 'string',
      description: 'MD5 checksum of original file.',
      maxLength: 32,
    },
  },
  required: ['file', 'name', 'md5'],
} as const

export const $GenotypeFile = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      description: 'Record UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    variant_set_import_info: {
      type: 'string',
      readOnly: true,
    },
    file: {
      type: 'string',
      format: 'binary',
      writeOnly: true,
      description: 'The uploaded file.',
    },
    name: {
      type: 'string',
      description: 'Original file name.',
      maxLength: 200,
    },
    md5: {
      type: 'string',
      description: 'MD5 checksum of original file.',
      maxLength: 32,
    },
  },
  required: ['file', 'name', 'md5'],
} as const

export const $EffectFile = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      description: 'Record UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    variant_set_import_info: {
      type: 'string',
      readOnly: true,
    },
    file: {
      type: 'string',
      format: 'binary',
      writeOnly: true,
      description: 'The uploaded file.',
    },
    name: {
      type: 'string',
      description: 'Original file name.',
      maxLength: 200,
    },
    md5: {
      type: 'string',
      description: 'MD5 checksum of original file.',
      maxLength: 32,
    },
  },
  required: ['file', 'name', 'md5'],
} as const

export const $DatabaseInfoFile = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      description: 'Record UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    variant_set_import_info: {
      type: 'string',
      readOnly: true,
    },
    file: {
      type: 'string',
      format: 'binary',
      writeOnly: true,
      description: 'The uploaded file.',
    },
    name: {
      type: 'string',
      description: 'Original file name.',
      maxLength: 200,
    },
    md5: {
      type: 'string',
      description: 'MD5 checksum of original file.',
      maxLength: 32,
    },
  },
  required: ['file', 'name', 'md5'],
} as const

export const $SvQuerySettingsShortcuts = {
  type: 'object',
  properties: {
    presets: {
      type: 'object',
    },
    query_settings: {
      type: 'object',
    },
  },
  required: ['presets', 'query_settings'],
} as const

export const $SvQuery = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of modification',
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    query_state: {
      enum: ['initial', 'running', 'done', 'cancelled', 'failed', 'timeout'],
      type: 'string',
      readOnly: true,
      description: 'The current query state',
    },
    query_state_msg: {
      type: 'string',
      readOnly: true,
      nullable: true,
      description: 'Message related to the query state',
    },
    query_settings: {
      type: 'object',
    },
  },
  required: ['query_settings'],
} as const

export const $SvQueryWithLogs = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of modification',
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    query_state: {
      enum: ['initial', 'running', 'done', 'cancelled', 'failed', 'timeout'],
      type: 'string',
      readOnly: true,
      description: 'The current query state',
    },
    query_state_msg: {
      type: 'string',
      readOnly: true,
      nullable: true,
      description: 'Message related to the query state',
    },
    query_settings: {
      type: 'object',
    },
    logs: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['query_settings'],
} as const

export const $SvQueryResultSet = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of modification',
    },
    svquery: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    start_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'Date time of query start',
    },
    end_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'Date time of query end',
    },
    elapsed_seconds: {
      type: 'number',
      readOnly: true,
      description: 'Elapsed seconds',
    },
    result_row_count: {
      type: 'integer',
      readOnly: true,
      description: 'Number of rows in the result',
    },
  },
} as const

export const $SvQueryResultRow = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    svqueryresultset: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      readOnly: true,
    },
    chromosome: {
      type: 'string',
      readOnly: true,
    },
    chromosome_no: {
      type: 'integer',
      readOnly: true,
    },
    bin: {
      type: 'integer',
      readOnly: true,
    },
    chromosome2: {
      type: 'string',
      readOnly: true,
      nullable: true,
    },
    chromosome_no2: {
      type: 'integer',
      readOnly: true,
      nullable: true,
    },
    bin2: {
      type: 'integer',
      readOnly: true,
      nullable: true,
    },
    start: {
      type: 'integer',
      readOnly: true,
    },
    end: {
      type: 'integer',
      readOnly: true,
    },
    pe_orientation: {
      type: 'string',
      readOnly: true,
      nullable: true,
    },
    sv_type: {
      enum: ['DEL', 'DUP', 'INS', 'INV', 'BND', 'CNV'],
      type: 'string',
      readOnly: true,
    },
    sv_sub_type: {
      enum: [
        'DEL',
        'DEL:ME',
        'DEL:ME:SVA',
        'DEL:ME:L1',
        'DEL:ME:ALU',
        'DUP',
        'DUP:TANDEM',
        'INV',
        'INS',
        'INS:ME',
        'INS:ME:SVA',
        'INS:ME:L1',
        'INS:ME:ALU',
        'BND',
        'CNV',
      ],
      type: 'string',
      readOnly: true,
    },
    payload: {
      type: 'object',
      readOnly: true,
      description: 'The query result rows',
    },
  },
} as const

export const $StructuralVariantFlags = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Annotation UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    sv_type: {
      type: 'string',
      maxLength: 32,
    },
    sv_sub_type: {
      type: 'string',
      maxLength: 32,
    },
    flag_bookmarked: {
      type: 'boolean',
    },
    flag_candidate: {
      type: 'boolean',
    },
    flag_final_causative: {
      type: 'boolean',
    },
    flag_for_validation: {
      type: 'boolean',
    },
    flag_no_disease_association: {
      type: 'boolean',
    },
    flag_segregates: {
      type: 'boolean',
    },
    flag_doesnt_segregate: {
      type: 'boolean',
    },
    flag_visual: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_molecular: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_validation: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_phenotype_match: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_incidental: {
      type: 'boolean',
    },
    flag_summary: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
  },
  required: ['release', 'chromosome', 'start', 'end', 'sv_type', 'sv_sub_type'],
} as const

export const $StructuralVariantFlagsProject = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Annotation UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    sv_type: {
      type: 'string',
      maxLength: 32,
    },
    sv_sub_type: {
      type: 'string',
      maxLength: 32,
    },
    flag_bookmarked: {
      type: 'boolean',
    },
    flag_candidate: {
      type: 'boolean',
    },
    flag_final_causative: {
      type: 'boolean',
    },
    flag_for_validation: {
      type: 'boolean',
    },
    flag_no_disease_association: {
      type: 'boolean',
    },
    flag_segregates: {
      type: 'boolean',
    },
    flag_doesnt_segregate: {
      type: 'boolean',
    },
    flag_visual: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_molecular: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_validation: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_phenotype_match: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
    flag_incidental: {
      type: 'boolean',
    },
    flag_summary: {
      enum: ['positive', 'uncertain', 'negative', 'empty'],
      type: 'string',
    },
  },
  required: ['release', 'chromosome', 'start', 'end', 'sv_type', 'sv_sub_type'],
} as const

export const $StructuralVariantComment = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Annotation UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    sv_type: {
      type: 'string',
      maxLength: 32,
    },
    sv_sub_type: {
      type: 'string',
      maxLength: 32,
    },
    text: {
      type: 'string',
      description: 'The comment text',
    },
    user_can_edit: {
      type: 'string',
      readOnly: true,
    },
  },
  required: [
    'release',
    'chromosome',
    'start',
    'end',
    'sv_type',
    'sv_sub_type',
    'text',
  ],
} as const

export const $StructuralVariantCommentProject = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Annotation UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    sv_type: {
      type: 'string',
      maxLength: 32,
    },
    sv_sub_type: {
      type: 'string',
      maxLength: 32,
    },
    text: {
      type: 'string',
      description: 'The comment text',
    },
    user_can_edit: {
      type: 'string',
      readOnly: true,
    },
  },
  required: [
    'release',
    'chromosome',
    'start',
    'end',
    'sv_type',
    'sv_sub_type',
    'text',
  ],
} as const

export const $StructuralVariantAcmgRating = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Annotation UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    sv_type: {
      type: 'string',
      maxLength: 32,
    },
    sv_sub_type: {
      type: 'string',
      maxLength: 32,
    },
    class_override: {
      type: 'number',
      nullable: true,
      description:
        'Use this field to override the auto-computed class assignment',
    },
  },
  required: ['release', 'chromosome', 'start', 'end', 'sv_type', 'sv_sub_type'],
} as const

export const $StructuralVariantAcmgRatingProject = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'Annotation UUID',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    sv_type: {
      type: 'string',
      maxLength: 32,
    },
    sv_sub_type: {
      type: 'string',
      maxLength: 32,
    },
    class_override: {
      type: 'number',
      nullable: true,
      description:
        'Use this field to override the auto-computed class assignment',
    },
  },
  required: ['release', 'chromosome', 'start', 'end', 'sv_type', 'sv_sub_type'],
} as const

export const $SODARUser = {
  type: 'object',
  properties: {
    username: {
      type: 'string',
      description:
        'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
      pattern: '^[\\w.@+-]+\\z',
      maxLength: 150,
    },
    name: {
      type: 'string',
      maxLength: 255,
    },
    email: {
      type: 'string',
      format: 'email',
      maxLength: 254,
    },
    is_superuser: {
      type: 'boolean',
      description:
        'Designates that this user has all permissions without explicitly assigning them.',
    },
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['username'],
} as const

export const $Project = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Project title',
      maxLength: 255,
    },
    type: {
      enum: ['CATEGORY', 'PROJECT'],
      type: 'string',
      description: 'Type of project ("CATEGORY", "PROJECT")',
    },
    parent: {
      type: 'string',
      nullable: true,
    },
    description: {
      type: 'string',
      nullable: true,
      description: 'Short project description',
      maxLength: 512,
    },
    readme: {
      type: 'string',
    },
    public_guest_access: {
      type: 'boolean',
      description:
        'Allow public guest access for the project, also including unauthenticated users if allowed on the site',
    },
    archive: {
      type: 'boolean',
      readOnly: true,
    },
    owner: {
      type: 'string',
      writeOnly: true,
    },
    roles: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          role: {
            type: 'string',
          },
          user: {
            type: 'object',
            properties: {
              username: {
                type: 'string',
                description:
                  'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                pattern: '^[\\w.@+-]+\\z',
                maxLength: 150,
              },
              name: {
                type: 'string',
                maxLength: 255,
              },
              email: {
                type: 'string',
                format: 'email',
                maxLength: 254,
              },
              is_superuser: {
                type: 'boolean',
                description:
                  'Designates that this user has all permissions without explicitly assigning them.',
              },
              sodar_uuid: {
                type: 'string',
                readOnly: true,
              },
            },
            required: ['username'],
            readOnly: true,
          },
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['role'],
      },
      readOnly: true,
    },
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['title', 'parent'],
} as const

export const $ProjectInvite = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      format: 'email',
      description: 'Email address of the person to be invited',
      maxLength: 254,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    role: {
      type: 'string',
    },
    issuer: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description:
            'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
          pattern: '^[\\w.@+-]+\\z',
          maxLength: 150,
        },
        name: {
          type: 'string',
          maxLength: 255,
        },
        email: {
          type: 'string',
          format: 'email',
          maxLength: 254,
        },
        is_superuser: {
          type: 'boolean',
          description:
            'Designates that this user has all permissions without explicitly assigning them.',
        },
        sodar_uuid: {
          type: 'string',
          readOnly: true,
        },
      },
      required: ['username'],
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of invite creation',
    },
    date_expire: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'Expiration of invite as DateTime',
    },
    message: {
      type: 'string',
      description: 'Message to be included in the invite email (optional)',
    },
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['email', 'role'],
} as const

export const $AppSetting = {
  type: 'object',
  properties: {
    app_name: {
      type: 'string',
      readOnly: true,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    user: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description:
            'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
          pattern: '^[\\w.@+-]+\\z',
          maxLength: 150,
        },
        name: {
          type: 'string',
          maxLength: 255,
        },
        email: {
          type: 'string',
          format: 'email',
          maxLength: 254,
        },
        is_superuser: {
          type: 'boolean',
          description:
            'Designates that this user has all permissions without explicitly assigning them.',
        },
        sodar_uuid: {
          type: 'string',
          readOnly: true,
        },
      },
      required: ['username'],
      readOnly: true,
    },
    name: {
      type: 'string',
      readOnly: true,
      description: 'Name of the setting',
    },
    type: {
      type: 'string',
      readOnly: true,
      description: 'Type of the setting',
    },
    value: {
      type: 'string',
      readOnly: true,
      nullable: true,
      description: 'Value of the setting',
    },
    user_modifiable: {
      type: 'boolean',
      readOnly: true,
      description: 'Setting visibility in forms',
    },
  },
} as const

export const $Cohort = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    user: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description:
            'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
          pattern: '^[\\w.@+-]+\\z',
          maxLength: 150,
        },
        name: {
          type: 'string',
          maxLength: 255,
        },
        email: {
          type: 'string',
          format: 'email',
          maxLength: 254,
        },
        is_superuser: {
          type: 'boolean',
          description:
            'Designates that this user has all permissions without explicitly assigning them.',
        },
        sodar_uuid: {
          type: 'string',
          readOnly: true,
        },
      },
      required: ['username'],
      readOnly: true,
    },
    inaccessible_cases: {
      type: 'string',
      readOnly: true,
    },
    cases: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    name: {
      type: 'string',
      maxLength: 512,
    },
  },
  required: ['name'],
} as const

export const $CohortCase = {
  type: 'object',
  properties: {
    case: {
      type: 'string',
    },
    cohort: {
      type: 'string',
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
      description: 'CohortCase SODAR UUID',
    },
  },
  required: ['case', 'cohort'],
} as const

export const $ProjectCases = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Project title',
      maxLength: 255,
    },
    type: {
      enum: ['CATEGORY', 'PROJECT'],
      type: 'string',
      description: 'Type of project ("CATEGORY", "PROJECT")',
    },
    parent: {
      type: 'string',
      nullable: true,
    },
    description: {
      type: 'string',
      nullable: true,
      description: 'Short project description',
      maxLength: 512,
    },
    readme: {
      type: 'string',
    },
    public_guest_access: {
      type: 'boolean',
      description:
        'Allow public guest access for the project, also including unauthenticated users if allowed on the site',
    },
    archive: {
      type: 'boolean',
      readOnly: true,
    },
    owner: {
      type: 'string',
      writeOnly: true,
    },
    roles: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          role: {
            type: 'string',
          },
          user: {
            type: 'object',
            properties: {
              username: {
                type: 'string',
                description:
                  'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                pattern: '^[\\w.@+-]+\\z',
                maxLength: 150,
              },
              name: {
                type: 'string',
                maxLength: 255,
              },
              email: {
                type: 'string',
                format: 'email',
                maxLength: 254,
              },
              is_superuser: {
                type: 'boolean',
                description:
                  'Designates that this user has all permissions without explicitly assigning them.',
              },
              sodar_uuid: {
                type: 'string',
                readOnly: true,
              },
            },
            required: ['username'],
            readOnly: true,
          },
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['role'],
      },
      readOnly: true,
    },
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    case_set: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['title', 'parent'],
} as const

export const $GenePanelCategory = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      readOnly: true,
      description: 'Title of the category',
    },
    description: {
      type: 'string',
      readOnly: true,
      nullable: true,
      description: 'Optional description of the category',
    },
    genepanel_set: {
      type: 'string',
      readOnly: true,
    },
  },
} as const

export const $GenePanel = {
  description: 'Representation of a gene panel to use in the query.',
  properties: {
    source: {
      $ref: '#/components/schemas/GenePanelSource',
    },
    panel_id: {
      title: 'Panel Id',
      type: 'string',
    },
    name: {
      title: 'Name',
      type: 'string',
    },
    version: {
      title: 'Version',
      type: 'string',
    },
  },
  required: ['source', 'panel_id', 'name', 'version'],
  title: 'GenePanel',
  type: 'object',
} as const

export const $CaseNg = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    presetset: {
      type: 'string',
      readOnly: true,
    },
    sex_errors: {
      type: 'string',
      readOnly: true,
    },
    smallvariantqueryresultset: {
      type: 'string',
      readOnly: true,
    },
    svqueryresultset: {
      type: 'string',
      readOnly: true,
    },
    caseqc: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      readOnly: true,
      nullable: true,
    },
    name: {
      type: 'string',
      maxLength: 512,
    },
    index: {
      type: 'string',
      maxLength: 512,
    },
    pedigree: {
      type: 'object',
    },
    notes: {
      type: 'string',
      nullable: true,
    },
    status: {
      enum: [
        'initial',
        'active',
        'closed-unsolved',
        'closed-uncertain',
        'closed-solved',
      ],
      type: 'string',
    },
    tags: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case_version: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    state: {
      enum: ['importing', 'updating', 'active', 'deleting'],
      type: 'string',
      readOnly: true,
      nullable: true,
    },
    num_small_vars: {
      type: 'integer',
      readOnly: true,
      nullable: true,
      description:
        'Number of small variants, empty if no small variants have been imported',
    },
    num_svs: {
      type: 'integer',
      readOnly: true,
      nullable: true,
      description:
        'Number of structural variants, empty if no structural variants have been imported',
    },
  },
  required: ['name', 'index', 'pedigree'],
} as const

export const $CaseComment = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    user: {
      type: 'string',
      readOnly: true,
    },
    comment: {
      type: 'string',
    },
  },
  required: ['comment'],
} as const

export const $CasePhenotypeTerms = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    individual: {
      type: 'string',
      description: 'Individual',
      maxLength: 128,
    },
    terms: {
      type: 'object',
    },
  },
  required: ['individual', 'terms'],
} as const

export const $AnnotationReleaseInfo = {
  type: 'object',
  properties: {
    genomebuild: {
      type: 'string',
      readOnly: true,
    },
    table: {
      type: 'string',
      readOnly: true,
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    release: {
      type: 'string',
      readOnly: true,
    },
  },
} as const

export const $SvAnnotationReleaseInfo = {
  type: 'object',
  properties: {
    genomebuild: {
      type: 'string',
      readOnly: true,
    },
    table: {
      type: 'string',
      readOnly: true,
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    release: {
      type: 'string',
      readOnly: true,
    },
  },
} as const

export const $VarAnnoSet = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    release: {
      enum: ['GRCh37', 'GRCh38'],
      type: 'string',
      description: 'Genome build of the variant annotation set.',
    },
    title: {
      type: 'string',
      description: "The variant annotation set's title.",
      maxLength: 100,
    },
    description: {
      type: 'string',
      nullable: true,
      description: 'An optional description for the variant annotation set.',
    },
    fields: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'The allowed fields in the entries.',
    },
  },
  required: ['release', 'title', 'fields'],
} as const

export const $VarAnnoSetEntry = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    varannoset: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      maxLength: 32,
    },
    chromosome: {
      type: 'string',
      maxLength: 32,
    },
    reference: {
      type: 'string',
      maxLength: 512,
    },
    alternative: {
      type: 'string',
      maxLength: 512,
    },
    start: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    end: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
    },
    payload: {
      type: 'object',
      description:
        "The annotation's data with fields defined in the variant annotation set.",
    },
  },
  required: [
    'release',
    'chromosome',
    'reference',
    'alternative',
    'start',
    'end',
    'payload',
  ],
} as const

export const $EnrichmentKit = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    identifier: {
      type: 'string',
      description:
        "Identifier of the enrichment kit, e.g., 'agilent-all-exon-v4'.",
      pattern: '^[\\w_-]+$',
      maxLength: 128,
    },
    title: {
      type: 'string',
      description: 'Title of the enrichment kit',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
      description: 'Optional description of the enrichment kit',
    },
  },
  required: ['identifier', 'title'],
} as const

export const $TargetBedFile = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of creation',
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      description: 'DateTime of last modification',
    },
    enrichmentkit: {
      type: 'string',
      readOnly: true,
    },
    file_uri: {
      type: 'string',
      description: "The file's URI.",
      maxLength: 512,
    },
    genome_release: {
      enum: ['grch37', 'grch38'],
      type: 'string',
      default: 'grch37',
      description: "The file's reference genome.",
    },
  },
  required: ['file_uri'],
} as const

export const $CaseImportAction = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    state: {
      enum: ['draft', 'submitted'],
      type: 'string',
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    action: {
      enum: ['create', 'update', 'delete'],
      type: 'string',
    },
    payload: {
      type: 'object',
    },
    overwrite_terms: {
      type: 'boolean',
    },
  },
  required: ['state', 'payload'],
} as const

export const $CaseQc = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    dragen_cnvmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
        },
        required: ['metrics'],
      },
      readOnly: true,
    },
    dragen_fragmentlengthhistograms: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          keys: {
            type: 'array',
            items: {
              type: 'integer',
              maximum: 2147483647,
              minimum: -2147483648,
            },
          },
          values: {
            type: 'array',
            items: {
              type: 'integer',
              maximum: 2147483647,
              minimum: -2147483648,
            },
          },
        },
        required: ['sample', 'keys', 'values'],
      },
      readOnly: true,
    },
    dragen_mappingmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_ploidyestimationmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_rohmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_vchethomratiometrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
        },
        required: ['metrics'],
      },
      readOnly: true,
    },
    dragen_vcmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
        },
        required: ['metrics'],
      },
      readOnly: true,
    },
    dragen_svmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
        },
        required: ['metrics'],
      },
      readOnly: true,
    },
    dragen_timemetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_trimmermetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_wgscoveragemetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_wgscontigmeancovmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_wgsoverallmeancov: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample'],
      },
      readOnly: true,
    },
    dragen_wgsfinehist: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          keys: {
            type: 'array',
            items: {
              type: 'integer',
              maximum: 2147483647,
              minimum: -2147483648,
            },
          },
          values: {
            type: 'array',
            items: {
              type: 'integer',
              maximum: 2147483647,
              minimum: -2147483648,
            },
          },
        },
        required: ['sample', 'keys', 'values'],
      },
      readOnly: true,
    },
    dragen_wgshist: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          keys: {
            type: 'array',
            items: {
              type: 'string',
            },
          },
          values: {
            type: 'array',
            items: {
              type: 'number',
            },
          },
        },
        required: ['sample', 'keys', 'values'],
      },
      readOnly: true,
    },
    dragen_regioncoveragemetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          region_name: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample', 'region_name'],
      },
      readOnly: true,
    },
    dragen_regionfinehist: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          keys: {
            type: 'array',
            items: {
              type: 'integer',
              maximum: 2147483647,
              minimum: -2147483648,
            },
          },
          values: {
            type: 'array',
            items: {
              type: 'integer',
              maximum: 2147483647,
              minimum: -2147483648,
            },
          },
          region_name: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['sample', 'keys', 'values', 'region_name'],
      },
      readOnly: true,
    },
    dragen_regionhist: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          region_name: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample', 'region_name'],
      },
      readOnly: true,
    },
    dragen_regionoverallmeancov: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          metrics: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          region_name: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['metrics', 'sample', 'region_name'],
      },
      readOnly: true,
    },
    bcftools_statsmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          sn: {
            type: 'string',
          },
          tstv: {
            type: 'string',
          },
          sis: {
            type: 'string',
          },
          af: {
            type: 'string',
          },
          qual: {
            type: 'string',
          },
          idd: {
            type: 'string',
          },
          st: {
            type: 'string',
          },
          dp: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
        },
        required: ['sn', 'tstv', 'sis', 'af', 'qual', 'idd', 'st', 'dp'],
      },
      readOnly: true,
    },
    samtools_statsmainmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          sn: {
            type: 'string',
          },
          chk: {
            type: 'string',
          },
          isize: {
            type: 'string',
          },
          cov: {
            type: 'string',
          },
          gcd: {
            type: 'string',
          },
          frl: {
            type: 'string',
          },
          lrl: {
            type: 'string',
          },
          idd: {
            type: 'string',
          },
          ffq: {
            type: 'string',
          },
          lfq: {
            type: 'string',
          },
          fbc: {
            type: 'string',
          },
          lbc: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: [
          'sn',
          'chk',
          'isize',
          'cov',
          'gcd',
          'frl',
          'lrl',
          'idd',
          'ffq',
          'lfq',
          'fbc',
          'lbc',
          'sample',
        ],
      },
      readOnly: true,
    },
    samtools_statssupplementarymetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          gcf: {
            type: 'string',
          },
          gcl: {
            type: 'string',
          },
          gcc: {
            type: 'string',
          },
          gct: {
            type: 'string',
          },
          rl: {
            type: 'string',
          },
          mapq: {
            type: 'string',
          },
          ic: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['gcf', 'gcl', 'gcc', 'gct', 'rl', 'mapq', 'ic', 'sample'],
      },
      readOnly: true,
    },
    samtools_flagstatmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          qc_pass: {
            type: 'string',
          },
          qc_fail: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['qc_pass', 'qc_fail', 'sample'],
      },
      readOnly: true,
    },
    samtools_idxstatsmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          records: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['records', 'sample'],
      },
      readOnly: true,
    },
    cramino_metrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          summary: {
            type: 'string',
          },
          chrom_counts: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['summary', 'chrom_counts', 'sample'],
      },
      readOnly: true,
    },
    ngsbits_mappingqcmetrics: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            readOnly: true,
          },
          caseqc: {
            type: 'string',
            readOnly: true,
          },
          records: {
            type: 'string',
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          sample: {
            type: 'string',
            maxLength: 200,
          },
          region_name: {
            type: 'string',
            maxLength: 200,
          },
        },
        required: ['records', 'sample', 'region_name'],
      },
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    state: {
      enum: ['DRAFT', 'ACTIVE'],
      type: 'string',
    },
  },
} as const

export const $VarfishStats = {
  type: 'object',
  properties: {
    samples: {
      type: 'string',
    },
    readstats: {
      type: 'string',
    },
    alignmentstats: {
      type: 'string',
    },
    seqvarstats: {
      type: 'string',
    },
    strucvarstats: {
      type: 'string',
    },
  },
  required: [
    'samples',
    'readstats',
    'alignmentstats',
    'seqvarstats',
    'strucvarstats',
  ],
} as const

export const $CaseAnalysis = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
  },
} as const

export const $CaseAnalysisSession = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    caseanalysis: {
      type: 'string',
      readOnly: true,
    },
    case: {
      type: 'string',
      readOnly: true,
    },
    user: {
      type: 'string',
      readOnly: true,
    },
  },
} as const

export const $QueryPresetsSet = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsSetDetails = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    project: {
      type: 'string',
      readOnly: true,
    },
    versions: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          presetsset: {
            type: 'object',
            properties: {
              sodar_uuid: {
                type: 'string',
                format: 'uuid',
                readOnly: true,
              },
              date_created: {
                type: 'string',
                format: 'date-time',
                readOnly: true,
              },
              date_modified: {
                type: 'string',
                format: 'date-time',
                readOnly: true,
              },
              rank: {
                type: 'integer',
                default: 1,
              },
              label: {
                type: 'string',
                maxLength: 128,
              },
              description: {
                type: 'string',
                nullable: true,
              },
              project: {
                type: 'string',
                readOnly: true,
              },
            },
            required: ['label'],
            readOnly: true,
          },
          version_major: {
            type: 'integer',
            default: 1,
          },
          version_minor: {
            type: 'integer',
            default: 0,
          },
          status: {
            type: 'string',
            default: 'draft',
          },
          signed_off_by: {
            type: 'object',
            properties: {
              username: {
                type: 'string',
                description:
                  'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                pattern: '^[\\w.@+-]+\\z',
                maxLength: 150,
              },
              name: {
                type: 'string',
                maxLength: 255,
              },
              email: {
                type: 'string',
                format: 'email',
                maxLength: 254,
              },
              is_superuser: {
                type: 'boolean',
                description:
                  'Designates that this user has all permissions without explicitly assigning them.',
              },
              sodar_uuid: {
                type: 'string',
                readOnly: true,
              },
            },
            required: ['username'],
            readOnly: true,
          },
          querypresetsquality_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
                filter_active: {
                  type: 'boolean',
                  default: false,
                },
                min_dp_het: {
                  type: 'integer',
                  nullable: true,
                },
                min_dp_hom: {
                  type: 'integer',
                  nullable: true,
                },
                min_ab_het: {
                  type: 'number',
                  nullable: true,
                },
                min_gq: {
                  type: 'integer',
                  nullable: true,
                },
                min_ad: {
                  type: 'integer',
                  nullable: true,
                },
                max_ad: {
                  type: 'integer',
                  nullable: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          querypresetsfrequency_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                gnomad_exomes_enabled: {
                  type: 'boolean',
                  default: false,
                },
                gnomad_exomes_frequency: {
                  type: 'number',
                  nullable: true,
                },
                gnomad_exomes_homozygous: {
                  type: 'integer',
                  nullable: true,
                },
                gnomad_exomes_heterozygous: {
                  type: 'integer',
                  nullable: true,
                },
                gnomad_exomes_hemizygous: {
                  type: 'boolean',
                  nullable: true,
                },
                gnomad_genomes_enabled: {
                  type: 'boolean',
                  default: false,
                },
                gnomad_genomes_frequency: {
                  type: 'number',
                  nullable: true,
                },
                gnomad_genomes_homozygous: {
                  type: 'integer',
                  nullable: true,
                },
                gnomad_genomes_heterozygous: {
                  type: 'integer',
                  nullable: true,
                },
                gnomad_genomes_hemizygous: {
                  type: 'boolean',
                  nullable: true,
                },
                helixmtdb_enabled: {
                  type: 'boolean',
                  default: false,
                },
                helixmtdb_heteroplasmic: {
                  type: 'integer',
                  nullable: true,
                },
                helixmtdb_homoplasmic: {
                  type: 'integer',
                  nullable: true,
                },
                helixmtdb_frequency: {
                  type: 'number',
                  nullable: true,
                },
                inhouse_enabled: {
                  type: 'boolean',
                  default: false,
                },
                inhouse_carriers: {
                  type: 'integer',
                  nullable: true,
                },
                inhouse_homozygous: {
                  type: 'integer',
                  nullable: true,
                },
                inhouse_heterozygous: {
                  type: 'integer',
                  nullable: true,
                },
                inhouse_hemizygous: {
                  type: 'integer',
                  nullable: true,
                },
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          querypresetsconsequence_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                variant_types: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/VariantTypeChoice',
                  },
                },
                transcript_types: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/TranscriptTypeChoice',
                  },
                },
                variant_consequences: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/VariantConsequenceChoice',
                  },
                },
                max_distance_to_exon: {
                  type: 'integer',
                  nullable: true,
                },
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          querypresetslocus_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                genes: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/Gene',
                  },
                },
                gene_panels: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/GenePanel',
                  },
                },
                genome_regions: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/GenomeRegion',
                  },
                },
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          querypresetsphenotypeprio_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                phenotype_prio_enabled: {
                  type: 'boolean',
                  default: false,
                },
                phenotype_prio_algorithm: {
                  type: 'string',
                  nullable: true,
                  maxLength: 128,
                },
                terms: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/TermPresence',
                  },
                },
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          querypresetsvariantprio_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                variant_prio_enabled: {
                  type: 'boolean',
                  default: false,
                },
                services: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/VariantPrioService',
                  },
                },
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          querypresetsclinvar_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                clinvar_presence_required: {
                  type: 'boolean',
                  default: false,
                },
                clinvar_germline_aggregate_description: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/ClinvarGermlineAggregateDescription',
                  },
                },
                allow_conflicting_interpretations: {
                  type: 'boolean',
                  default: false,
                },
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          querypresetscolumns_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                column_settings: {
                  type: 'array',
                  items: {
                    $ref: '#/components/schemas/ColumnConfig',
                  },
                },
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
          predefinedquery_set: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                sodar_uuid: {
                  type: 'string',
                  format: 'uuid',
                  readOnly: true,
                },
                date_created: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                date_modified: {
                  type: 'string',
                  format: 'date-time',
                  readOnly: true,
                },
                rank: {
                  type: 'integer',
                  default: 1,
                },
                label: {
                  type: 'string',
                  maxLength: 128,
                },
                description: {
                  type: 'string',
                  nullable: true,
                },
                presetssetversion: {
                  type: 'string',
                  readOnly: true,
                },
                included_in_sop: {
                  type: 'boolean',
                  default: false,
                },
                genotype: {
                  anyOf: [
                    {
                      $ref: '#/components/schemas/GenotypePresets',
                    },
                    {
                      type: 'null',
                    },
                  ],
                },
                quality: {
                  type: 'string',
                  nullable: true,
                },
                frequency: {
                  type: 'string',
                  nullable: true,
                },
                consequence: {
                  type: 'string',
                  nullable: true,
                },
                locus: {
                  type: 'string',
                  nullable: true,
                },
                phenotypeprio: {
                  type: 'string',
                  nullable: true,
                },
                variantprio: {
                  type: 'string',
                  nullable: true,
                },
                clinvar: {
                  type: 'string',
                  nullable: true,
                },
                columns: {
                  type: 'string',
                  nullable: true,
                },
              },
              required: ['label'],
            },
            readOnly: true,
          },
        },
      },
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $TranscriptTypeChoice = {
  description: 'The type of a transcript.',
  enum: ['coding', 'non_coding'],
  title: 'TranscriptTypeChoice',
  type: 'string',
} as const

export const $VariantConsequenceChoice = {
  description: 'The variant consequence.',
  enum: [
    'frameshift_variant',
    'rare_amino_acid_variant',
    'splice_acceptor_variant',
    'splice_donor_variant',
    'start_lost',
    'stop_gained',
    'stop_lost',
    '3_prime_UTR_truncation',
    '5_prime_UTR_truncation',
    'conservative_inframe_deletion',
    'conservative_inframe_insertion',
    'disruptive_inframe_deletion',
    'disruptive_inframe_insertion',
    'missense_variant',
    'splice_region_variant',
    'initiator_codon_variant',
    'start_retained',
    'stop_retained_variant',
    'synonymous_variant',
    'downstream_gene_variant',
    'intron_variant',
    'non_coding_transcript_exon_variant',
    'non_coding_transcript_intron_variant',
    '5_prime_UTR_variant',
    'coding_sequence_variant',
    'upstream_gene_variant',
    '3_prime_UTR_variant-exon_variant',
    '5_prime_UTR_variant-exon_variant',
    '3_prime_UTR_variant-intron_variant',
    '5_prime_UTR_variant-intron_variant',
  ],
  title: 'VariantConsequenceChoice',
  type: 'string',
} as const

export const $VariantTypeChoice = {
  description: 'The type of a variant.',
  enum: ['snv', 'indel', 'mnv', 'complex_substitution'],
  title: 'VariantTypeChoice',
  type: 'string',
} as const

export const $Gene = {
  description: 'Representation of a gene to query for.',
  properties: {
    hgnc_id: {
      title: 'Hgnc Id',
      type: 'string',
    },
    symbol: {
      title: 'Symbol',
      type: 'string',
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Name',
    },
    entrez_id: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Entrez Id',
    },
    ensembl_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Ensembl Id',
    },
  },
  required: ['hgnc_id', 'symbol'],
  title: 'Gene',
  type: 'object',
} as const

export const $GenePanelSource = {
  description: 'The source of a gene panel.',
  enum: ['panelapp', 'internal'],
  title: 'GenePanelSource',
  type: 'string',
} as const

export const $GenomeRegion = {
  description: 'Representation of a genomic region to query for.',
  properties: {
    chromosome: {
      title: 'Chromosome',
      type: 'string',
    },
    range: {
      anyOf: [
        {
          $ref: '#/components/schemas/OneBasedRange',
        },
        {
          type: 'null',
        },
      ],
      default: null,
    },
  },
  required: ['chromosome'],
  title: 'GenomeRegion',
  type: 'object',
} as const

export const $OneBasedRange = {
  description: 'Representation of a 1-based range.',
  properties: {
    start: {
      title: 'Start',
      type: 'integer',
    },
    end: {
      title: 'End',
      type: 'integer',
    },
  },
  required: ['start', 'end'],
  title: 'OneBasedRange',
  type: 'object',
} as const

export const $Term = {
  description: 'Representation of a condition (phenotype / disease) term.',
  properties: {
    term_id: {
      title: 'Term Id',
      type: 'string',
    },
    label: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Label',
    },
  },
  required: ['term_id', 'label'],
  title: 'Term',
  type: 'object',
} as const

export const $TermPresence = {
  description:
    'Representation of a term with optional presence (default is not excluded).',
  properties: {
    term: {
      $ref: '#/components/schemas/Term',
    },
    excluded: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Excluded',
    },
  },
  required: ['term'],
  title: 'TermPresence',
  type: 'object',
} as const

export const $VariantPrioService = {
  description: 'Representation of a variant pathogenicity service.',
  properties: {
    name: {
      title: 'Name',
      type: 'string',
    },
    version: {
      title: 'Version',
      type: 'string',
    },
  },
  required: ['name', 'version'],
  title: 'VariantPrioService',
  type: 'object',
} as const

export const $ClinvarGermlineAggregateDescription = {
  description: 'The aggregate description for germline variants in ClinVar.',
  enum: [
    'pathogenic',
    'likely_pathogenic',
    'uncertain_significance',
    'likely_benign',
    'benign',
  ],
  title: 'ClinvarGermlineAggregateDescription',
  type: 'string',
} as const

export const $ColumnConfig = {
  description: 'Configuration for a single column in the result table.',
  properties: {
    name: {
      title: 'Name',
      type: 'string',
    },
    label: {
      title: 'Label',
      type: 'string',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Description',
    },
    width: {
      title: 'Width',
      type: 'integer',
    },
    visible: {
      title: 'Visible',
      type: 'boolean',
    },
  },
  required: ['name', 'label', 'width', 'visible'],
  title: 'ColumnConfig',
  type: 'object',
} as const

export const $GenotypePresetChoice = {
  description: 'Presets value for the chosen genotype.',
  enum: [
    'any',
    'de_novo',
    'dominant',
    'homozygous_recessive',
    'compound_heterozygous_recessive',
    'recessive',
    'x_recessive',
    'affected_carriers',
  ],
  title: 'GenotypePresetChoice',
  type: 'string',
} as const

export const $GenotypePresets = {
  description: 'Configuration for a single column in the result table.',
  properties: {
    choice: {
      anyOf: [
        {
          $ref: '#/components/schemas/GenotypePresetChoice',
        },
        {
          type: 'null',
        },
      ],
      default: null,
    },
  },
  title: 'GenotypePresets',
  type: 'object',
} as const

export const $QueryPresetsSetVersion = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    presetsset: {
      type: 'string',
      readOnly: true,
    },
    version_major: {
      type: 'integer',
      default: 1,
    },
    version_minor: {
      type: 'integer',
      default: 0,
    },
    status: {
      type: 'string',
      default: 'draft',
    },
    signed_off_by: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description:
            'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
          pattern: '^[\\w.@+-]+\\z',
          maxLength: 150,
        },
        name: {
          type: 'string',
          maxLength: 255,
        },
        email: {
          type: 'string',
          format: 'email',
          maxLength: 254,
        },
        is_superuser: {
          type: 'boolean',
          description:
            'Designates that this user has all permissions without explicitly assigning them.',
        },
        sodar_uuid: {
          type: 'string',
          readOnly: true,
        },
      },
      required: ['username'],
      readOnly: true,
    },
  },
} as const

export const $QueryPresetsSetVersionDetails = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    presetsset: {
      type: 'object',
      properties: {
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        rank: {
          type: 'integer',
          default: 1,
        },
        label: {
          type: 'string',
          maxLength: 128,
        },
        description: {
          type: 'string',
          nullable: true,
        },
        project: {
          type: 'string',
          readOnly: true,
        },
      },
      required: ['label'],
      readOnly: true,
    },
    version_major: {
      type: 'integer',
      default: 1,
    },
    version_minor: {
      type: 'integer',
      default: 0,
    },
    status: {
      type: 'string',
      default: 'draft',
    },
    signed_off_by: {
      type: 'object',
      properties: {
        username: {
          type: 'string',
          description:
            'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
          pattern: '^[\\w.@+-]+\\z',
          maxLength: 150,
        },
        name: {
          type: 'string',
          maxLength: 255,
        },
        email: {
          type: 'string',
          format: 'email',
          maxLength: 254,
        },
        is_superuser: {
          type: 'boolean',
          description:
            'Designates that this user has all permissions without explicitly assigning them.',
        },
        sodar_uuid: {
          type: 'string',
          readOnly: true,
        },
      },
      required: ['username'],
      readOnly: true,
    },
    querypresetsquality_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
          filter_active: {
            type: 'boolean',
            default: false,
          },
          min_dp_het: {
            type: 'integer',
            nullable: true,
          },
          min_dp_hom: {
            type: 'integer',
            nullable: true,
          },
          min_ab_het: {
            type: 'number',
            nullable: true,
          },
          min_gq: {
            type: 'integer',
            nullable: true,
          },
          min_ad: {
            type: 'integer',
            nullable: true,
          },
          max_ad: {
            type: 'integer',
            nullable: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    querypresetsfrequency_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          gnomad_exomes_enabled: {
            type: 'boolean',
            default: false,
          },
          gnomad_exomes_frequency: {
            type: 'number',
            nullable: true,
          },
          gnomad_exomes_homozygous: {
            type: 'integer',
            nullable: true,
          },
          gnomad_exomes_heterozygous: {
            type: 'integer',
            nullable: true,
          },
          gnomad_exomes_hemizygous: {
            type: 'boolean',
            nullable: true,
          },
          gnomad_genomes_enabled: {
            type: 'boolean',
            default: false,
          },
          gnomad_genomes_frequency: {
            type: 'number',
            nullable: true,
          },
          gnomad_genomes_homozygous: {
            type: 'integer',
            nullable: true,
          },
          gnomad_genomes_heterozygous: {
            type: 'integer',
            nullable: true,
          },
          gnomad_genomes_hemizygous: {
            type: 'boolean',
            nullable: true,
          },
          helixmtdb_enabled: {
            type: 'boolean',
            default: false,
          },
          helixmtdb_heteroplasmic: {
            type: 'integer',
            nullable: true,
          },
          helixmtdb_homoplasmic: {
            type: 'integer',
            nullable: true,
          },
          helixmtdb_frequency: {
            type: 'number',
            nullable: true,
          },
          inhouse_enabled: {
            type: 'boolean',
            default: false,
          },
          inhouse_carriers: {
            type: 'integer',
            nullable: true,
          },
          inhouse_homozygous: {
            type: 'integer',
            nullable: true,
          },
          inhouse_heterozygous: {
            type: 'integer',
            nullable: true,
          },
          inhouse_hemizygous: {
            type: 'integer',
            nullable: true,
          },
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    querypresetsconsequence_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          variant_types: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/VariantTypeChoice',
            },
          },
          transcript_types: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/TranscriptTypeChoice',
            },
          },
          variant_consequences: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/VariantConsequenceChoice',
            },
          },
          max_distance_to_exon: {
            type: 'integer',
            nullable: true,
          },
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    querypresetslocus_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          genes: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/Gene',
            },
          },
          gene_panels: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/GenePanel',
            },
          },
          genome_regions: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/GenomeRegion',
            },
          },
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    querypresetsphenotypeprio_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          phenotype_prio_enabled: {
            type: 'boolean',
            default: false,
          },
          phenotype_prio_algorithm: {
            type: 'string',
            nullable: true,
            maxLength: 128,
          },
          terms: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/TermPresence',
            },
          },
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    querypresetsvariantprio_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          variant_prio_enabled: {
            type: 'boolean',
            default: false,
          },
          services: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/VariantPrioService',
            },
          },
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    querypresetsclinvar_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          clinvar_presence_required: {
            type: 'boolean',
            default: false,
          },
          clinvar_germline_aggregate_description: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/ClinvarGermlineAggregateDescription',
            },
          },
          allow_conflicting_interpretations: {
            type: 'boolean',
            default: false,
          },
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    querypresetscolumns_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          column_settings: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/ColumnConfig',
            },
          },
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
    predefinedquery_set: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          sodar_uuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true,
          },
          date_created: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          date_modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true,
          },
          rank: {
            type: 'integer',
            default: 1,
          },
          label: {
            type: 'string',
            maxLength: 128,
          },
          description: {
            type: 'string',
            nullable: true,
          },
          presetssetversion: {
            type: 'string',
            readOnly: true,
          },
          included_in_sop: {
            type: 'boolean',
            default: false,
          },
          genotype: {
            anyOf: [
              {
                $ref: '#/components/schemas/GenotypePresets',
              },
              {
                type: 'null',
              },
            ],
          },
          quality: {
            type: 'string',
            nullable: true,
          },
          frequency: {
            type: 'string',
            nullable: true,
          },
          consequence: {
            type: 'string',
            nullable: true,
          },
          locus: {
            type: 'string',
            nullable: true,
          },
          phenotypeprio: {
            type: 'string',
            nullable: true,
          },
          variantprio: {
            type: 'string',
            nullable: true,
          },
          clinvar: {
            type: 'string',
            nullable: true,
          },
          columns: {
            type: 'string',
            nullable: true,
          },
        },
        required: ['label'],
      },
      readOnly: true,
    },
  },
} as const

export const $QueryPresetsQuality = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
    filter_active: {
      type: 'boolean',
      default: false,
    },
    min_dp_het: {
      type: 'integer',
      nullable: true,
    },
    min_dp_hom: {
      type: 'integer',
      nullable: true,
    },
    min_ab_het: {
      type: 'number',
      nullable: true,
    },
    min_gq: {
      type: 'integer',
      nullable: true,
    },
    min_ad: {
      type: 'integer',
      nullable: true,
    },
    max_ad: {
      type: 'integer',
      nullable: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsFrequency = {
  type: 'object',
  properties: {
    gnomad_exomes_enabled: {
      type: 'boolean',
      default: false,
    },
    gnomad_exomes_frequency: {
      type: 'number',
      nullable: true,
    },
    gnomad_exomes_homozygous: {
      type: 'integer',
      nullable: true,
    },
    gnomad_exomes_heterozygous: {
      type: 'integer',
      nullable: true,
    },
    gnomad_exomes_hemizygous: {
      type: 'boolean',
      nullable: true,
    },
    gnomad_genomes_enabled: {
      type: 'boolean',
      default: false,
    },
    gnomad_genomes_frequency: {
      type: 'number',
      nullable: true,
    },
    gnomad_genomes_homozygous: {
      type: 'integer',
      nullable: true,
    },
    gnomad_genomes_heterozygous: {
      type: 'integer',
      nullable: true,
    },
    gnomad_genomes_hemizygous: {
      type: 'boolean',
      nullable: true,
    },
    helixmtdb_enabled: {
      type: 'boolean',
      default: false,
    },
    helixmtdb_heteroplasmic: {
      type: 'integer',
      nullable: true,
    },
    helixmtdb_homoplasmic: {
      type: 'integer',
      nullable: true,
    },
    helixmtdb_frequency: {
      type: 'number',
      nullable: true,
    },
    inhouse_enabled: {
      type: 'boolean',
      default: false,
    },
    inhouse_carriers: {
      type: 'integer',
      nullable: true,
    },
    inhouse_homozygous: {
      type: 'integer',
      nullable: true,
    },
    inhouse_heterozygous: {
      type: 'integer',
      nullable: true,
    },
    inhouse_hemizygous: {
      type: 'integer',
      nullable: true,
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsConsequence = {
  type: 'object',
  properties: {
    variant_types: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/VariantTypeChoice',
      },
    },
    transcript_types: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TranscriptTypeChoice',
      },
    },
    variant_consequences: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/VariantConsequenceChoice',
      },
    },
    max_distance_to_exon: {
      type: 'integer',
      nullable: true,
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsLocus = {
  type: 'object',
  properties: {
    genes: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Gene',
      },
    },
    gene_panels: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GenePanel',
      },
    },
    genome_regions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GenomeRegion',
      },
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsPhenotypePrio = {
  type: 'object',
  properties: {
    phenotype_prio_enabled: {
      type: 'boolean',
      default: false,
    },
    phenotype_prio_algorithm: {
      type: 'string',
      nullable: true,
      maxLength: 128,
    },
    terms: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TermPresence',
      },
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsVariantPrio = {
  type: 'object',
  properties: {
    variant_prio_enabled: {
      type: 'boolean',
      default: false,
    },
    services: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/VariantPrioService',
      },
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsClinvar = {
  type: 'object',
  properties: {
    clinvar_presence_required: {
      type: 'boolean',
      default: false,
    },
    clinvar_germline_aggregate_description: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ClinvarGermlineAggregateDescription',
      },
    },
    allow_conflicting_interpretations: {
      type: 'boolean',
      default: false,
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryPresetsColumns = {
  type: 'object',
  properties: {
    column_settings: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ColumnConfig',
      },
    },
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $PredefinedQuery = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    description: {
      type: 'string',
      nullable: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
    included_in_sop: {
      type: 'boolean',
      default: false,
    },
    genotype: {
      anyOf: [
        {
          $ref: '#/components/schemas/GenotypePresets',
        },
        {
          type: 'null',
        },
      ],
    },
    quality: {
      type: 'string',
      nullable: true,
    },
    frequency: {
      type: 'string',
      nullable: true,
    },
    consequence: {
      type: 'string',
      nullable: true,
    },
    locus: {
      type: 'string',
      nullable: true,
    },
    phenotypeprio: {
      type: 'string',
      nullable: true,
    },
    variantprio: {
      type: 'string',
      nullable: true,
    },
    clinvar: {
      type: 'string',
      nullable: true,
    },
    columns: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['label'],
} as const

export const $QuerySettings = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    session: {
      type: 'string',
      readOnly: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
    genotype: {
      type: 'string',
      readOnly: true,
    },
    quality: {
      type: 'string',
      readOnly: true,
    },
    consequence: {
      type: 'string',
      readOnly: true,
    },
    locus: {
      type: 'string',
      readOnly: true,
    },
    frequency: {
      type: 'string',
      readOnly: true,
    },
    phenotypeprio: {
      type: 'string',
      readOnly: true,
    },
    variantprio: {
      type: 'string',
      readOnly: true,
    },
    clinvar: {
      type: 'string',
      readOnly: true,
    },
  },
} as const

export const $QuerySettingsDetails = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    session: {
      type: 'string',
      readOnly: true,
    },
    presetssetversion: {
      type: 'string',
      readOnly: true,
    },
    genotype: {
      type: 'object',
      properties: {
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
        sample_genotype_choices: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/SampleGenotypeChoice',
          },
        },
      },
    },
    quality: {
      type: 'object',
      properties: {
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
        sample_quality_filters: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/SampleQualityFilter',
          },
        },
      },
    },
    consequence: {
      type: 'object',
      properties: {
        variant_types: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/VariantTypeChoice',
          },
        },
        transcript_types: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/TranscriptTypeChoice',
          },
        },
        variant_consequences: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/VariantConsequenceChoice',
          },
        },
        max_distance_to_exon: {
          type: 'integer',
          nullable: true,
        },
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
      },
    },
    locus: {
      type: 'object',
      properties: {
        genes: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Gene',
          },
        },
        gene_panels: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/GenePanel',
          },
        },
        genome_regions: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/GenomeRegion',
          },
        },
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
      },
    },
    frequency: {
      type: 'object',
      properties: {
        gnomad_exomes_enabled: {
          type: 'boolean',
          default: false,
        },
        gnomad_exomes_frequency: {
          type: 'number',
          nullable: true,
        },
        gnomad_exomes_homozygous: {
          type: 'integer',
          nullable: true,
        },
        gnomad_exomes_heterozygous: {
          type: 'integer',
          nullable: true,
        },
        gnomad_exomes_hemizygous: {
          type: 'boolean',
          nullable: true,
        },
        gnomad_genomes_enabled: {
          type: 'boolean',
          default: false,
        },
        gnomad_genomes_frequency: {
          type: 'number',
          nullable: true,
        },
        gnomad_genomes_homozygous: {
          type: 'integer',
          nullable: true,
        },
        gnomad_genomes_heterozygous: {
          type: 'integer',
          nullable: true,
        },
        gnomad_genomes_hemizygous: {
          type: 'boolean',
          nullable: true,
        },
        helixmtdb_enabled: {
          type: 'boolean',
          default: false,
        },
        helixmtdb_heteroplasmic: {
          type: 'integer',
          nullable: true,
        },
        helixmtdb_homoplasmic: {
          type: 'integer',
          nullable: true,
        },
        helixmtdb_frequency: {
          type: 'number',
          nullable: true,
        },
        inhouse_enabled: {
          type: 'boolean',
          default: false,
        },
        inhouse_carriers: {
          type: 'integer',
          nullable: true,
        },
        inhouse_homozygous: {
          type: 'integer',
          nullable: true,
        },
        inhouse_heterozygous: {
          type: 'integer',
          nullable: true,
        },
        inhouse_hemizygous: {
          type: 'integer',
          nullable: true,
        },
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
      },
    },
    phenotypeprio: {
      type: 'object',
      properties: {
        phenotype_prio_enabled: {
          type: 'boolean',
          default: false,
        },
        phenotype_prio_algorithm: {
          type: 'string',
          nullable: true,
          maxLength: 128,
        },
        terms: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/TermPresence',
          },
        },
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
      },
    },
    variantprio: {
      type: 'object',
      properties: {
        variant_prio_enabled: {
          type: 'boolean',
          default: false,
        },
        services: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/VariantPrioService',
          },
        },
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
      },
    },
    clinvar: {
      type: 'object',
      properties: {
        clinvar_presence_required: {
          type: 'boolean',
          default: false,
        },
        clinvar_germline_aggregate_description: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/ClinvarGermlineAggregateDescription',
          },
        },
        allow_conflicting_interpretations: {
          type: 'boolean',
          default: false,
        },
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        querysettings: {
          type: 'string',
          readOnly: true,
        },
      },
    },
  },
  required: [
    'genotype',
    'quality',
    'consequence',
    'locus',
    'frequency',
    'phenotypeprio',
    'variantprio',
    'clinvar',
  ],
} as const

export const $GenotypeChoice = {
  description: 'Store genotype choice of a ``SampleGenotype``.',
  enum: [
    'any',
    'ref',
    'het',
    'hom',
    'non-hom',
    'variant',
    'comphet_index',
    'recessive_index',
    'recessive_parent',
  ],
  title: 'GenotypeChoice',
  type: 'string',
} as const

export const $SampleGenotypeChoice = {
  description: 'Store the genotype of a sample.',
  properties: {
    sample: {
      title: 'Sample',
      type: 'string',
    },
    genotype: {
      $ref: '#/components/schemas/GenotypeChoice',
    },
  },
  required: ['sample', 'genotype'],
  title: 'SampleGenotypeChoice',
  type: 'object',
} as const

export const $SampleQualityFilter = {
  description:
    'Stores per-sample quality filter settings for a particular query.',
  properties: {
    sample: {
      title: 'Sample',
      type: 'string',
    },
    filter_active: {
      default: false,
      title: 'Filter Active',
      type: 'boolean',
    },
    min_dp_het: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Min Dp Het',
    },
    min_dp_hom: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Min Dp Hom',
    },
    min_ab_het: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Min Ab Het',
    },
    min_gq: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Min Gq',
    },
    min_ad: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Min Ad',
    },
    max_ad: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      default: null,
      title: 'Max Ad',
    },
  },
  required: ['sample'],
  title: 'SampleQualityFilter',
  type: 'object',
} as const

export const $Query = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    session: {
      type: 'string',
      readOnly: true,
    },
    settings: {
      type: 'string',
      readOnly: true,
    },
    columnsconfig: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['label'],
} as const

export const $QueryDetails = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    rank: {
      type: 'integer',
      default: 1,
    },
    label: {
      type: 'string',
      maxLength: 128,
    },
    session: {
      type: 'string',
      readOnly: true,
    },
    settings: {
      type: 'object',
      properties: {
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        session: {
          type: 'string',
          readOnly: true,
        },
        presetssetversion: {
          type: 'string',
          readOnly: true,
        },
        genotype: {
          type: 'object',
          properties: {
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
            sample_genotype_choices: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/SampleGenotypeChoice',
              },
            },
          },
        },
        quality: {
          type: 'object',
          properties: {
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
            sample_quality_filters: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/SampleQualityFilter',
              },
            },
          },
        },
        consequence: {
          type: 'object',
          properties: {
            variant_types: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/VariantTypeChoice',
              },
            },
            transcript_types: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/TranscriptTypeChoice',
              },
            },
            variant_consequences: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/VariantConsequenceChoice',
              },
            },
            max_distance_to_exon: {
              type: 'integer',
              nullable: true,
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        locus: {
          type: 'object',
          properties: {
            genes: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/Gene',
              },
            },
            gene_panels: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/GenePanel',
              },
            },
            genome_regions: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/GenomeRegion',
              },
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        frequency: {
          type: 'object',
          properties: {
            gnomad_exomes_enabled: {
              type: 'boolean',
              default: false,
            },
            gnomad_exomes_frequency: {
              type: 'number',
              nullable: true,
            },
            gnomad_exomes_homozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_exomes_heterozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_exomes_hemizygous: {
              type: 'boolean',
              nullable: true,
            },
            gnomad_genomes_enabled: {
              type: 'boolean',
              default: false,
            },
            gnomad_genomes_frequency: {
              type: 'number',
              nullable: true,
            },
            gnomad_genomes_homozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_genomes_heterozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_genomes_hemizygous: {
              type: 'boolean',
              nullable: true,
            },
            helixmtdb_enabled: {
              type: 'boolean',
              default: false,
            },
            helixmtdb_heteroplasmic: {
              type: 'integer',
              nullable: true,
            },
            helixmtdb_homoplasmic: {
              type: 'integer',
              nullable: true,
            },
            helixmtdb_frequency: {
              type: 'number',
              nullable: true,
            },
            inhouse_enabled: {
              type: 'boolean',
              default: false,
            },
            inhouse_carriers: {
              type: 'integer',
              nullable: true,
            },
            inhouse_homozygous: {
              type: 'integer',
              nullable: true,
            },
            inhouse_heterozygous: {
              type: 'integer',
              nullable: true,
            },
            inhouse_hemizygous: {
              type: 'integer',
              nullable: true,
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        phenotypeprio: {
          type: 'object',
          properties: {
            phenotype_prio_enabled: {
              type: 'boolean',
              default: false,
            },
            phenotype_prio_algorithm: {
              type: 'string',
              nullable: true,
              maxLength: 128,
            },
            terms: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/TermPresence',
              },
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        variantprio: {
          type: 'object',
          properties: {
            variant_prio_enabled: {
              type: 'boolean',
              default: false,
            },
            services: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/VariantPrioService',
              },
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        clinvar: {
          type: 'object',
          properties: {
            clinvar_presence_required: {
              type: 'boolean',
              default: false,
            },
            clinvar_germline_aggregate_description: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/ClinvarGermlineAggregateDescription',
              },
            },
            allow_conflicting_interpretations: {
              type: 'boolean',
              default: false,
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
      },
      required: [
        'genotype',
        'quality',
        'consequence',
        'locus',
        'frequency',
        'phenotypeprio',
        'variantprio',
        'clinvar',
      ],
    },
    columnsconfig: {
      type: 'object',
      properties: {
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        column_settings: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/ColumnConfig',
          },
        },
      },
    },
  },
  required: ['label', 'settings', 'columnsconfig'],
} as const

export const $QueryExecution = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    state: {
      enum: ['initial', 'queued', 'running', 'failed', 'canceled', 'done'],
      type: 'string',
      readOnly: true,
    },
    complete_percent: {
      type: 'integer',
      readOnly: true,
      nullable: true,
    },
    start_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      nullable: true,
    },
    end_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      nullable: true,
    },
    elapsed_seconds: {
      type: 'number',
      readOnly: true,
      nullable: true,
    },
    query: {
      type: 'string',
      readOnly: true,
    },
    querysettings: {
      type: 'string',
      readOnly: true,
    },
  },
} as const

export const $QueryExecutionDetails = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    state: {
      enum: ['initial', 'queued', 'running', 'failed', 'canceled', 'done'],
      type: 'string',
      readOnly: true,
    },
    complete_percent: {
      type: 'integer',
      readOnly: true,
      nullable: true,
    },
    start_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      nullable: true,
    },
    end_time: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
      nullable: true,
    },
    elapsed_seconds: {
      type: 'number',
      readOnly: true,
      nullable: true,
    },
    query: {
      type: 'string',
      readOnly: true,
    },
    querysettings: {
      type: 'object',
      properties: {
        sodar_uuid: {
          type: 'string',
          format: 'uuid',
          readOnly: true,
        },
        date_created: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        date_modified: {
          type: 'string',
          format: 'date-time',
          readOnly: true,
        },
        session: {
          type: 'string',
          readOnly: true,
        },
        presetssetversion: {
          type: 'string',
          readOnly: true,
        },
        genotype: {
          type: 'object',
          properties: {
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
            sample_genotype_choices: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/SampleGenotypeChoice',
              },
            },
          },
        },
        quality: {
          type: 'object',
          properties: {
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
            sample_quality_filters: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/SampleQualityFilter',
              },
            },
          },
        },
        consequence: {
          type: 'object',
          properties: {
            variant_types: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/VariantTypeChoice',
              },
            },
            transcript_types: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/TranscriptTypeChoice',
              },
            },
            variant_consequences: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/VariantConsequenceChoice',
              },
            },
            max_distance_to_exon: {
              type: 'integer',
              nullable: true,
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        locus: {
          type: 'object',
          properties: {
            genes: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/Gene',
              },
            },
            gene_panels: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/GenePanel',
              },
            },
            genome_regions: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/GenomeRegion',
              },
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        frequency: {
          type: 'object',
          properties: {
            gnomad_exomes_enabled: {
              type: 'boolean',
              default: false,
            },
            gnomad_exomes_frequency: {
              type: 'number',
              nullable: true,
            },
            gnomad_exomes_homozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_exomes_heterozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_exomes_hemizygous: {
              type: 'boolean',
              nullable: true,
            },
            gnomad_genomes_enabled: {
              type: 'boolean',
              default: false,
            },
            gnomad_genomes_frequency: {
              type: 'number',
              nullable: true,
            },
            gnomad_genomes_homozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_genomes_heterozygous: {
              type: 'integer',
              nullable: true,
            },
            gnomad_genomes_hemizygous: {
              type: 'boolean',
              nullable: true,
            },
            helixmtdb_enabled: {
              type: 'boolean',
              default: false,
            },
            helixmtdb_heteroplasmic: {
              type: 'integer',
              nullable: true,
            },
            helixmtdb_homoplasmic: {
              type: 'integer',
              nullable: true,
            },
            helixmtdb_frequency: {
              type: 'number',
              nullable: true,
            },
            inhouse_enabled: {
              type: 'boolean',
              default: false,
            },
            inhouse_carriers: {
              type: 'integer',
              nullable: true,
            },
            inhouse_homozygous: {
              type: 'integer',
              nullable: true,
            },
            inhouse_heterozygous: {
              type: 'integer',
              nullable: true,
            },
            inhouse_hemizygous: {
              type: 'integer',
              nullable: true,
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        phenotypeprio: {
          type: 'object',
          properties: {
            phenotype_prio_enabled: {
              type: 'boolean',
              default: false,
            },
            phenotype_prio_algorithm: {
              type: 'string',
              nullable: true,
              maxLength: 128,
            },
            terms: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/TermPresence',
              },
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        variantprio: {
          type: 'object',
          properties: {
            variant_prio_enabled: {
              type: 'boolean',
              default: false,
            },
            services: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/VariantPrioService',
              },
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
        clinvar: {
          type: 'object',
          properties: {
            clinvar_presence_required: {
              type: 'boolean',
              default: false,
            },
            clinvar_germline_aggregate_description: {
              type: 'array',
              items: {
                $ref: '#/components/schemas/ClinvarGermlineAggregateDescription',
              },
            },
            allow_conflicting_interpretations: {
              type: 'boolean',
              default: false,
            },
            sodar_uuid: {
              type: 'string',
              format: 'uuid',
              readOnly: true,
            },
            date_created: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            date_modified: {
              type: 'string',
              format: 'date-time',
              readOnly: true,
            },
            querysettings: {
              type: 'string',
              readOnly: true,
            },
          },
        },
      },
      required: [
        'genotype',
        'quality',
        'consequence',
        'locus',
        'frequency',
        'phenotypeprio',
        'variantprio',
        'clinvar',
      ],
    },
  },
  required: ['querysettings'],
} as const

export const $ResultSet = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    date_created: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    date_modified: {
      type: 'string',
      format: 'date-time',
      readOnly: true,
    },
    queryexecution: {
      type: 'string',
      readOnly: true,
    },
    datasource_infos: {
      $ref: '#/components/schemas/DataSourceInfos',
    },
  },
  required: ['datasource_infos'],
} as const

export const $DataSourceInfo = {
  description: 'Describes the version version of a given datasource.',
  properties: {
    name: {
      title: 'Name',
      type: 'string',
    },
    version: {
      title: 'Version',
      type: 'string',
    },
  },
  required: ['name', 'version'],
  title: 'DataSourceInfo',
  type: 'object',
} as const

export const $DataSourceInfos = {
  description: 'Container for ``DataSourceInfo`` records.',
  properties: {
    infos: {
      items: {
        $ref: '#/components/schemas/DataSourceInfo',
      },
      title: 'Infos',
      type: 'array',
    },
  },
  required: ['infos'],
  title: 'DataSourceInfos',
  type: 'object',
} as const

export const $ResultRow = {
  type: 'object',
  properties: {
    sodar_uuid: {
      type: 'string',
      format: 'uuid',
      readOnly: true,
    },
    resultset: {
      type: 'string',
      readOnly: true,
    },
    release: {
      type: 'string',
      readOnly: true,
    },
    chromosome: {
      type: 'string',
      readOnly: true,
    },
    chromosome_no: {
      type: 'integer',
      readOnly: true,
    },
    start: {
      type: 'integer',
      readOnly: true,
    },
    stop: {
      type: 'integer',
      readOnly: true,
    },
    reference: {
      type: 'string',
      readOnly: true,
    },
    alternative: {
      type: 'string',
      readOnly: true,
    },
    payload: {
      $ref: '#/components/schemas/ResultRowPayload',
    },
  },
  required: ['payload'],
} as const

export const $ResultRowPayload = {
  description: 'Payload for one result row of a seqvar query.',
  properties: {
    foo: {
      title: 'Foo',
      type: 'integer',
    },
  },
  required: ['foo'],
  title: 'ResultRowPayload',
  type: 'object',
} as const

export const $RoleAssignment = {
  type: 'object',
  properties: {
    project: {
      type: 'string',
      readOnly: true,
    },
    role: {
      type: 'string',
    },
    user: {
      type: 'string',
    },
    sodar_uuid: {
      type: 'string',
      readOnly: true,
    },
  },
  required: ['role', 'user'],
} as const
