# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2021-03-03 08:23
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import cryptographic_fields.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("variants", "0079_auto_20210204_1006"),
        ("projectroles", "0015_fix_appsetting_constraint"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Consortium",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Record SODAR UUID", unique=True
                    ),
                ),
                (
                    "identifier",
                    models.SlugField(
                        help_text="Short name of the consortium", max_length=128, unique=True
                    ),
                ),
                ("title", models.CharField(help_text="Title of the consortium", max_length=128)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional description of the consortium", null=True
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[("enabled", "enabled"), ("disabled", "disabled")],
                        help_text="Consortium state.",
                        max_length=100,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConsortiumAssignment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Record SODAR UUID", unique=True
                    ),
                ),
                (
                    "consortium",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="beaconsite.Consortium"
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="projectroles.Project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConsortiumMember",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Record SODAR UUID", unique=True
                    ),
                ),
                (
                    "consortium",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="beaconsite.Consortium"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Query",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Record SODAR UUID", unique=True
                    ),
                ),
                ("http_url", models.TextField(help_text="URL of query")),
                (
                    "http_method",
                    models.CharField(
                        choices=[("GET", "GET")],
                        help_text="HTTP method that was used",
                        max_length=64,
                    ),
                ),
                ("http_header", models.TextField(help_text="HTTP request header content")),
                (
                    "http_body",
                    models.TextField(blank=True, help_text="HTTP request body content", null=True),
                ),
                (
                    "var_release",
                    models.CharField(help_text="Query variant genome release", max_length=64),
                ),
                (
                    "var_chrom",
                    models.CharField(help_text="Query variant chromosome", max_length=64),
                ),
                (
                    "var_start",
                    models.IntegerField(help_text="Query variant 1-based start position"),
                ),
                ("var_end", models.IntegerField(help_text="Query variant 1-based end position")),
                (
                    "var_reference",
                    models.TextField(help_text="Query variant reference allele string"),
                ),
                (
                    "var_alternative",
                    models.TextField(help_text="Query variant alternative allele tring"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Response",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Record SODAR UUID", unique=True
                    ),
                ),
                ("http_header", models.TextField(help_text="HTTP request header content")),
                (
                    "http_body",
                    models.TextField(blank=True, help_text="HTTP request body content", null=True),
                ),
                (
                    "query",
                    models.ForeignKey(
                        help_text="The query that this response is for",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="beaconsite.Query",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Record SODAR UUID", unique=True
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("local", "local"), ("remote", "remote")],
                        help_text="Site role.",
                        max_length=100,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[("enabled", "enabled"), ("disabled", "disabled")],
                        help_text="Site state.",
                        max_length=100,
                    ),
                ),
                (
                    "identifier",
                    models.SlugField(
                        help_text="Short name of the site", max_length=128, unique=True
                    ),
                ),
                ("title", models.CharField(help_text="Title of the site", max_length=128)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional description of the site", null=True
                    ),
                ),
                ("entrypoint_url", models.TextField(help_text="Site base URL")),
                (
                    "key_algo",
                    models.CharField(
                        choices=[
                            ("rsa-sha256", "rsa-sha256"),
                            ("rsa-sha512", "rsa-sha512"),
                            ("ecdsa-sha256", "ecdsa-sha256"),
                            ("ecdsa-sha512", "ecdsa-sha512"),
                        ],
                        help_text="Key algorithm to use",
                        max_length=64,
                    ),
                ),
                (
                    "private_key",
                    cryptographic_fields.fields.EncryptedTextField(
                        help_text="(Private) key for (a)symmetric encryption."
                    ),
                ),
                (
                    "public_key",
                    models.TextField(
                        blank=True, help_text="Public key for asymmetric encryption.", null=True
                    ),
                ),
                (
                    "consortia",
                    models.ManyToManyField(
                        help_text="Consortia that the site is a member of",
                        related_name="sites",
                        through="beaconsite.ConsortiumMember",
                        to="beaconsite.Consortium",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="query",
            name="dst_site",
            field=models.ForeignKey(
                help_text="Recipient of query",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dst_queries",
                to="beaconsite.Site",
            ),
        ),
        migrations.AddField(
            model_name="query",
            name="src_case",
            field=models.ForeignKey(
                help_text="Case that this query was performed for, if local source",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="variants.Case",
            ),
        ),
        migrations.AddField(
            model_name="query",
            name="src_project",
            field=models.ForeignKey(
                help_text="Origin project, if local source",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="projectroles.Project",
            ),
        ),
        migrations.AddField(
            model_name="query",
            name="src_site",
            field=models.ForeignKey(
                help_text="Source of query",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="src_queries",
                to="beaconsite.Site",
            ),
        ),
        migrations.AddField(
            model_name="query",
            name="src_user",
            field=models.ForeignKey(
                help_text="User that triggered the query, if local source",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="consortiummember",
            name="site",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="beaconsite.Site"
            ),
        ),
        migrations.AddField(
            model_name="consortium",
            name="projects",
            field=models.ManyToManyField(
                help_text="Projects assigned to consortium",
                through="beaconsite.ConsortiumAssignment",
                to="projectroles.Project",
            ),
        ),
    ]
