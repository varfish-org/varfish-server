name: CI

on:
  - push
  - pull_request

env:
  PYTHON_VERSION: "3.10"
  POSTGRES_VERSION: "14"

jobs:
  Python-Build:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379

      postgres:
        image: postgres:{{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: varfish_web
          POSTGRES_USER: varfish_web
          POSTGRES_PASSWORD: varfish_web
          DATABASE_URL: postgres://varfish_web:varfish_web@postgres/varfish_web
          CELERY_BROKER_URL: redis://redis:6379/0
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
    env:
      CELERY_BROKER_URL: redis://0.0.0.0:6379/0
      DATABASE_URL: 'postgres://varfish_web:varfish_web@0.0.0.0/varfish_web'
      POSTGRES_HOST: 0.0.0.0
      POSTGRES_PORT: 5432

    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qq build-essential zlib1g-dev libtiff5-dev libjpeg8-dev \
              libfreetype6-dev liblcms2-dev libwebp-dev libpq-dev graphviz-dev

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "{{ env.PYTHON_VERSION }}"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2

      - name: Install project dependencies with Poetry
        run: |
          poetry install --dev

      - name: Build and run Vue app
        run: |
          npm ci --prefix varfish/vueapp
          npm run build --prefix varfish/vueapp
          nohup npm run --prefix varfish/vueapp serve &

      - name: Download icons
        run: python manage.py geticons

      - name: Run collectstatic
        run: python manage.py collectstatic --noinput

      - name: Run tests
        run: |
          poetry run coverage run --rcfile=.coveragerc manage.py test -v 2 --settings=config.settings.test
          poetry run coverage xml
          poetry run coverage report

      - name: Upload Python coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: python
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  Python-Lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "{{ env.PYTHON_VERSION }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install project dependencies with Poetry
        run: |
          poetry install --dev

      - name: Check import order with isort
        run: |
          rm -rf src
          poetry run isort --force-sort-within-sections --profile=black --check .

      - name: Check style with black
        run: |
          poetry run black --check --line-length 100 .

      - name: Run linting
        run: |
          poetry run flake8

  NodeJS-Lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install javascript dependencies
        run: |
          npm ci --prefix varfish/vueapp

      - name: Run linting
        run: |
          make vue_lint


  NodeJS-Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install javascript dependencies
        run: |
          npm ci --prefix varfish/vueapp

      - name: Run Vue app tests
        run: |
          make vue_test-coverage

      - name: Upload nodejs coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: nodejs
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
