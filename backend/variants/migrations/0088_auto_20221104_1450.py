# Generated by Django 3.2.16 on 2022-11-04 14:50

import uuid

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import model_clone.mixin


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("projectroles", "0021_remove_project_submit_status"),
        ("variants", "0087_casegeneannotationentry"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChromosomePresets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Cohort SODAR UUID", unique=True
                    ),
                ),
                ("label", models.CharField(help_text="User-readable label", max_length=64)),
                (
                    "genomic_region",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64), default=list, size=None
                    ),
                ),
                (
                    "gene_allowlist",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64), default=list, size=None
                    ),
                ),
                (
                    "gene_blocklist",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64), default=list, size=None
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FlagsEtcPresets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Cohort SODAR UUID", unique=True
                    ),
                ),
                ("label", models.CharField(help_text="User-readable label", max_length=64)),
                ("clinvar_include_benign", models.BooleanField(default=True)),
                ("clinvar_include_likely_benign", models.BooleanField(default=True)),
                ("clinvar_include_likely_pathogenic", models.BooleanField(default=True)),
                ("clinvar_include_pathogenic", models.BooleanField(default=True)),
                ("clinvar_include_uncertain_significance", models.BooleanField(default=True)),
                ("flag_bookmarked", models.BooleanField(default=True)),
                ("flag_candidate", models.BooleanField(default=True)),
                ("flag_doesnt_segregate", models.BooleanField(default=True)),
                ("flag_final_causative", models.BooleanField(default=True)),
                ("flag_for_validation", models.BooleanField(default=True)),
                ("flag_no_disease_association", models.BooleanField(default=True)),
                ("flag_molecular_empty", models.BooleanField(default=True)),
                ("flag_molecular_negative", models.BooleanField(default=True)),
                ("flag_molecular_positive", models.BooleanField(default=True)),
                ("flag_molecular_uncertain", models.BooleanField(default=True)),
                ("flag_phenotype_match_empty", models.BooleanField(default=True)),
                ("flag_phenotype_match_negative", models.BooleanField(default=True)),
                ("flag_phenotype_match_positive", models.BooleanField(default=True)),
                ("flag_phenotype_match_uncertain", models.BooleanField(default=True)),
                ("flag_segregates", models.BooleanField(default=True)),
                ("flag_simple_empty", models.BooleanField(default=True)),
                ("flag_summary_empty", models.BooleanField(default=True)),
                ("flag_summary_negative", models.BooleanField(default=True)),
                ("flag_summary_positive", models.BooleanField(default=True)),
                ("flag_summary_uncertain", models.BooleanField(default=True)),
                ("flag_validation_empty", models.BooleanField(default=True)),
                ("flag_validation_negative", models.BooleanField(default=True)),
                ("flag_validation_positive", models.BooleanField(default=True)),
                ("flag_validation_uncertain", models.BooleanField(default=True)),
                ("flag_visual_empty", models.BooleanField(default=True)),
                ("flag_visual_negative", models.BooleanField(default=True)),
                ("flag_visual_positive", models.BooleanField(default=True)),
                ("flag_visual_uncertain", models.BooleanField(default=True)),
                ("require_in_clinvar", models.BooleanField(default=False)),
                ("clinvar_paranoid_mode", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FrequencyPresets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Cohort SODAR UUID", unique=True
                    ),
                ),
                ("label", models.CharField(help_text="User-readable label", max_length=64)),
                ("thousand_genomes_enabled", models.BooleanField(default=True)),
                ("thousand_genomes_homozygous", models.IntegerField(default=None, null=True)),
                ("thousand_genomes_heterozygous", models.IntegerField(default=None, null=True)),
                ("thousand_genomes_hemizygous", models.IntegerField(default=None, null=True)),
                ("thousand_genomes_frequency", models.FloatField(default=None, null=True)),
                ("exac_enabled", models.BooleanField(default=True)),
                ("exac_homozygous", models.IntegerField(default=None, null=True)),
                ("exac_heterozygous", models.IntegerField(default=None, null=True)),
                ("exac_hemizygous", models.IntegerField(default=None, null=True)),
                ("exac_frequency", models.FloatField(default=None, null=True)),
                ("gnomad_exomes_enabled", models.BooleanField(default=True)),
                ("gnomad_exomes_homozygous", models.IntegerField(default=None, null=True)),
                ("gnomad_exomes_heterozygous", models.IntegerField(default=None, null=True)),
                ("gnomad_exomes_hemizygous", models.IntegerField(default=None, null=True)),
                ("gnomad_exomes_frequency", models.FloatField(default=None, null=True)),
                ("gnomad_genomes_enabled", models.BooleanField(default=True)),
                ("gnomad_genomes_homozygous", models.IntegerField(default=None, null=True)),
                ("gnomad_genomes_heterozygous", models.IntegerField(default=None, null=True)),
                ("gnomad_genomes_hemizygous", models.IntegerField(default=None, null=True)),
                ("gnomad_genomes_frequency", models.FloatField(default=None, null=True)),
                ("inhouse_enabled", models.BooleanField(default=True)),
                ("inhouse_homozygous", models.IntegerField(default=None, null=True)),
                ("inhouse_heterozygous", models.IntegerField(default=None, null=True)),
                ("inhouse_hemizygous", models.IntegerField(default=None, null=True)),
                ("inhouse_carriers", models.IntegerField(default=None, null=True)),
                ("mtdb_enabled", models.BooleanField(default=True)),
                ("mtdb_count", models.IntegerField(default=None, null=True)),
                ("mtdb_frequency", models.FloatField(default=None, null=True)),
                ("helixmtdb_enabled", models.BooleanField(default=True)),
                ("helixmtdb_het_count", models.IntegerField(default=None, null=True)),
                ("helixmtdb_hom_count", models.IntegerField(default=None, null=True)),
                ("helixmtdb_frequency", models.FloatField(default=None, null=True)),
                ("mitomap_enabled", models.BooleanField(default=False)),
                ("mitomap_count", models.IntegerField(default=None, null=True)),
                ("mitomap_frequency", models.FloatField(default=None, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ImpactPresets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Cohort SODAR UUID", unique=True
                    ),
                ),
                ("label", models.CharField(help_text="User-readable label", max_length=64)),
                ("var_type_snv", models.BooleanField(default=True)),
                ("var_type_mnv", models.BooleanField(default=True)),
                ("var_type_indel", models.BooleanField(default=True)),
                ("transcripts_coding", models.BooleanField(default=True)),
                ("transcripts_noncoding", models.BooleanField(default=True)),
                (
                    "effects",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64), default=list, size=None
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PresetSet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Cohort SODAR UUID", unique=True
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[("draft", "draft"), ("active", "active"), ("retired", "retired")],
                        default="active",
                        help_text="State of the preset set version",
                        max_length=32,
                    ),
                ),
                (
                    "version_major",
                    models.IntegerField(default=1, help_text="Major version of the preset set"),
                ),
                (
                    "version_minor",
                    models.IntegerField(default=1, help_text="Minor version of the preset set"),
                ),
                ("label", models.CharField(help_text="User-readable label", max_length=64)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Optional description", null=True),
                ),
                (
                    "database",
                    models.CharField(
                        choices=[("refseq", "RefSeq"), ("ensembl", "ENSEMBL")],
                        help_text="The database to use",
                        max_length=32,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="The project that this preset set belongs into",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projectroles.project",
                    ),
                ),
                (
                    "signed_off_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who signed off the preset set into active state",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="QualityPresets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Cohort SODAR UUID", unique=True
                    ),
                ),
                ("label", models.CharField(help_text="User-readable label", max_length=64)),
                ("dp_het", models.IntegerField(default=None, null=True)),
                ("dp_hom", models.IntegerField(default=None, null=True)),
                ("ab", models.FloatField(default=None, null=True)),
                ("gq", models.IntegerField(default=None, null=True)),
                ("ad", models.IntegerField(default=None, null=True)),
                ("ad_max", models.IntegerField(default=None, null=True)),
                (
                    "fail",
                    models.CharField(
                        choices=[
                            ("drop-variant", "drop variant"),
                            ("ignore", "ignore"),
                            ("no-call", "no call"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "presetset",
                    models.ForeignKey(
                        help_text="The preset set this belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="variants.presetset",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="QuickPresets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, help_text="DateTime of last modification"),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Cohort SODAR UUID", unique=True
                    ),
                ),
                ("label", models.CharField(help_text="User-readable label", max_length=64)),
                (
                    "inheritance",
                    models.CharField(
                        choices=[
                            ("de_novo", "de novo"),
                            ("dominant", "dominant"),
                            ("homozygous_recessive", "homozygous recessive"),
                            ("compound_heterozygous", "compound heterozygous"),
                            ("recessive", "recessive"),
                            ("x_recessive", "X-recessive"),
                            ("affected_carriers", "affected carriers"),
                            ("any", "any"),
                        ],
                        default="any",
                        help_text="Presets for inheritance",
                        max_length=32,
                    ),
                ),
                (
                    "chromosome",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Preset value for category chromosome",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="variants.chromosomepresets",
                    ),
                ),
                (
                    "flagsetc",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Preset value for category 'flags etc.'",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="variants.flagsetcpresets",
                    ),
                ),
                (
                    "frequency",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Preset values for category frequency",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="variants.frequencypresets",
                    ),
                ),
                (
                    "impact",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Preset value for category impact",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="variants.impactpresets",
                    ),
                ),
                (
                    "presetset",
                    models.ForeignKey(
                        help_text="The preset set this belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="variants.presetset",
                    ),
                ),
                (
                    "quality",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Preset value for category quality",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="variants.qualitypresets",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="impactpresets",
            name="presetset",
            field=models.ForeignKey(
                help_text="The preset set this belongs to.",
                on_delete=django.db.models.deletion.CASCADE,
                to="variants.presetset",
            ),
        ),
        migrations.AddField(
            model_name="frequencypresets",
            name="presetset",
            field=models.ForeignKey(
                help_text="The preset set this belongs to.",
                on_delete=django.db.models.deletion.CASCADE,
                to="variants.presetset",
            ),
        ),
        migrations.AddField(
            model_name="flagsetcpresets",
            name="presetset",
            field=models.ForeignKey(
                help_text="The preset set this belongs to.",
                on_delete=django.db.models.deletion.CASCADE,
                to="variants.presetset",
            ),
        ),
        migrations.AddField(
            model_name="chromosomepresets",
            name="presetset",
            field=models.ForeignKey(
                help_text="The preset set this belongs to.",
                on_delete=django.db.models.deletion.CASCADE,
                to="variants.presetset",
            ),
        ),
        migrations.AddField(
            model_name="case",
            name="presetset",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="The preset set to use for filtration, if any.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="variants.presetset",
            ),
        ),
    ]
