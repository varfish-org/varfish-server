# Generated by Django 3.2.16 on 2022-12-09 08:46

import uuid

import bgjobs.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

import varfish.utils


class Migration(migrations.Migration):
    dependencies = [
        ("variants", "0091_alter_casephenotypeterms_sodar_uuid"),
        ("projectroles", "0021_remove_project_submit_status"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("bgjobs", "0006_auto_20200526_1657"),
        ("svs", "0019_backgroundsv_svs_backgro_bg_sv_s_72b34f_idx"),
    ]

    operations = [
        migrations.CreateModel(
            name="SvQuery",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(default=uuid.uuid4, help_text="Record UUID", unique=True),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of modification"),
                ),
                (
                    "query_state",
                    models.CharField(
                        choices=[
                            ("initial", "initial"),
                            ("running", "running"),
                            ("done", "done"),
                            ("cancelled", "cancelled"),
                            ("failed", "failed"),
                            ("timeout", "timeout"),
                        ],
                        default="initial",
                        help_text="The current query state",
                        max_length=64,
                    ),
                ),
                (
                    "query_state_msg",
                    models.TextField(
                        blank=True, help_text="Message related to the query state", null=True
                    ),
                ),
                ("query_settings", varfish.utils.JSONField(help_text="The query settings")),
                (
                    "case",
                    models.ForeignKey(
                        help_text="The case that this query refers to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="variants.case",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the query",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="svs_svquery_related",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"ordering": ("-date_created",)},
        ),
        migrations.CreateModel(
            name="SvQueryResultSet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(default=uuid.uuid4, help_text="Record UUID", unique=True),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of modification"),
                ),
                ("query_sql", models.TextField(help_text="The executed query SQL")),
                ("result_row_count", models.IntegerField(help_text="Number of rows in the result")),
                ("start_time", models.DateTimeField(help_text="Date time of query start")),
                ("end_time", models.DateTimeField(help_text="Date time of query end")),
                ("elapsed_seconds", models.FloatField(help_text="Elapsed seconds")),
                (
                    "svquery",
                    models.ForeignKey(
                        help_text="The query that this result is for",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="svs.svquery",
                    ),
                ),
            ],
            options={"ordering": ("-date_created",)},
        ),
        migrations.CreateModel(
            name="SvQueryResultRow",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(default=uuid.uuid4, help_text="Record UUID", unique=True),
                ),
                ("release", models.CharField(max_length=32)),
                ("chromosome", models.CharField(max_length=32)),
                ("chromosome_no", models.IntegerField()),
                ("bin", models.IntegerField()),
                ("chromosome2", models.CharField(max_length=32, null=True)),
                ("chromosome_no2", models.IntegerField(null=True)),
                ("bin2", models.IntegerField(null=True)),
                ("start", models.IntegerField()),
                ("end", models.IntegerField()),
                ("pe_orientation", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "sv_type",
                    models.CharField(
                        choices=[
                            ("DEL", "deletion"),
                            ("DUP", "duplication"),
                            ("INS", "insertion"),
                            ("INV", "inversion"),
                            ("BND", "breakend"),
                            ("CNV", "copy number variation"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "sv_sub_type",
                    models.CharField(
                        choices=[
                            ("DEL", "deletion"),
                            ("DEL:ME", "mobile element deletion"),
                            ("DEL:ME:SVA", "mobile element deletion (SVA)"),
                            ("DEL:ME:L1", "mobile element deletion (LINE1)"),
                            ("DEL:ME:ALU", "mobile element deletion (ALU)"),
                            ("DUP", "duplication"),
                            ("DUP:TANDEM", "tandem duplication"),
                            ("INV", "inversion"),
                            ("INS", "insertion"),
                            ("INS:ME", "mobile_element insertion"),
                            ("INS:ME:SVA", "mobile element deletion (SVA)"),
                            ("INS:ME:L1", "mobile element deletion (LINE1)"),
                            ("INS:ME:ALU", "mobile element deletion (ALU)"),
                            ("INV", "inversion"),
                            ("BND", "breakend"),
                            ("CNV", "copy number variation"),
                        ],
                        max_length=32,
                    ),
                ),
                ("payload", varfish.utils.JSONField(help_text="The query result rows")),
                (
                    "svqueryresultset",
                    models.ForeignKey(
                        help_text="The owning SvQueryResultSet",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="svs.svqueryresultset",
                    ),
                ),
            ],
            options={"ordering": ("chromosome_no", "start", "end")},
        ),
        migrations.CreateModel(
            name="FilterSvBgJob",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "sodar_uuid",
                    models.UUIDField(default=uuid.uuid4, help_text="Record UUID", unique=True),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of creation"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now_add=True, help_text="DateTime of modification"),
                ),
                (
                    "bg_job",
                    models.ForeignKey(
                        help_text="Background job for filtering and storing query results",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bgjobs.backgroundjob",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        help_text="The case to filter",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="variants.case",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Project in which this objects belongs",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projectroles.project",
                    ),
                ),
                (
                    "svquery",
                    models.ForeignKey(
                        help_text="SV query to be executed",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="svs.svquery",
                    ),
                ),
            ],
            bases=(bgjobs.models.JobModelMessageMixin, models.Model),
        ),
    ]
