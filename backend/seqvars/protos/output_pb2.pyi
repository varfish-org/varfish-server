"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import seqvars.protos.query_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _VariantScoreColumnType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _VariantScoreColumnTypeEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_VariantScoreColumnType.ValueType],
    builtins.type,
):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    VARIANT_SCORE_COLUMN_TYPE_UNSPECIFIED: _VariantScoreColumnType.ValueType  # 0
    """Unspecified variant score type."""
    VARIANT_SCORE_COLUMN_TYPE_NUMBER: _VariantScoreColumnType.ValueType  # 1
    """Number"""
    VARIANT_SCORE_COLUMN_TYPE_STRING: _VariantScoreColumnType.ValueType  # 2
    """String"""

class VariantScoreColumnType(
    _VariantScoreColumnType, metaclass=_VariantScoreColumnTypeEnumTypeWrapper
):
    """Enumeration of the variant score type."""

VARIANT_SCORE_COLUMN_TYPE_UNSPECIFIED: VariantScoreColumnType.ValueType  # 0
"""Unspecified variant score type."""
VARIANT_SCORE_COLUMN_TYPE_NUMBER: VariantScoreColumnType.ValueType  # 1
"""Number"""
VARIANT_SCORE_COLUMN_TYPE_STRING: VariantScoreColumnType.ValueType  # 2
"""String"""
global___VariantScoreColumnType = VariantScoreColumnType

class _GenomeRelease:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _GenomeReleaseEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_GenomeRelease.ValueType],
    builtins.type,
):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    GENOME_RELEASE_UNSPECIFIED: _GenomeRelease.ValueType  # 0
    """Unspecified genome release."""
    GENOME_RELEASE_GRCH37: _GenomeRelease.ValueType  # 1
    """GRCh37."""
    GENOME_RELEASE_GRCH38: _GenomeRelease.ValueType  # 2
    """GRCh38."""

class GenomeRelease(_GenomeRelease, metaclass=_GenomeReleaseEnumTypeWrapper):
    """Enumeration of the genome release."""

GENOME_RELEASE_UNSPECIFIED: GenomeRelease.ValueType  # 0
"""Unspecified genome release."""
GENOME_RELEASE_GRCH37: GenomeRelease.ValueType  # 1
"""GRCh37."""
GENOME_RELEASE_GRCH38: GenomeRelease.ValueType  # 2
"""GRCh38."""
global___GenomeRelease = GenomeRelease

class _ClingenDosageScore:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ClingenDosageScoreEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ClingenDosageScore.ValueType],
    builtins.type,
):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    CLINGEN_DOSAGE_SCORE_UNSPECIFIED: _ClingenDosageScore.ValueType  # 0
    """Unspecified"""
    CLINGEN_DOSAGE_SCORE_SUFFICIENT_EVIDENCE_AVAILABLE: _ClingenDosageScore.ValueType  # 1
    """Sufficient evidence for dosage pathogenicity"""
    CLINGEN_DOSAGE_SCORE_SOME_EVIDENCE_AVAILABLE: _ClingenDosageScore.ValueType  # 2
    """Some evidence for dosage pathogenicity"""
    CLINGEN_DOSAGE_SCORE_LITTLE_EVIDENCE: _ClingenDosageScore.ValueType  # 3
    """Little evidence for dosage pathogenicity"""
    CLINGEN_DOSAGE_SCORE_NO_EVIDENCE_AVAILABLE: _ClingenDosageScore.ValueType  # 4
    """No evidence available"""
    CLINGEN_DOSAGE_SCORE_RECESSIVE: _ClingenDosageScore.ValueType  # 5
    """Gene associated with autosomal recessive phenotype"""
    CLINGEN_DOSAGE_SCORE_UNLIKELY: _ClingenDosageScore.ValueType  # 6
    """Dosage sensitivity unlikely"""

class ClingenDosageScore(_ClingenDosageScore, metaclass=_ClingenDosageScoreEnumTypeWrapper):
    """/ Enumeration for Haploinsufficiency / Triplosensitivity scores."""

CLINGEN_DOSAGE_SCORE_UNSPECIFIED: ClingenDosageScore.ValueType  # 0
"""Unspecified"""
CLINGEN_DOSAGE_SCORE_SUFFICIENT_EVIDENCE_AVAILABLE: ClingenDosageScore.ValueType  # 1
"""Sufficient evidence for dosage pathogenicity"""
CLINGEN_DOSAGE_SCORE_SOME_EVIDENCE_AVAILABLE: ClingenDosageScore.ValueType  # 2
"""Some evidence for dosage pathogenicity"""
CLINGEN_DOSAGE_SCORE_LITTLE_EVIDENCE: ClingenDosageScore.ValueType  # 3
"""Little evidence for dosage pathogenicity"""
CLINGEN_DOSAGE_SCORE_NO_EVIDENCE_AVAILABLE: ClingenDosageScore.ValueType  # 4
"""No evidence available"""
CLINGEN_DOSAGE_SCORE_RECESSIVE: ClingenDosageScore.ValueType  # 5
"""Gene associated with autosomal recessive phenotype"""
CLINGEN_DOSAGE_SCORE_UNLIKELY: ClingenDosageScore.ValueType  # 6
"""Dosage sensitivity unlikely"""
global___ClingenDosageScore = ClingenDosageScore

class _AggregateGermlineReviewStatus:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _AggregateGermlineReviewStatusEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
        _AggregateGermlineReviewStatus.ValueType
    ],
    builtins.type,
):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    AGGREGATE_GERMLINE_REVIEW_STATUS_UNSPECIFIED: _AggregateGermlineReviewStatus.ValueType  # 0
    """unspecified aggregate germline review status value"""
    AGGREGATE_GERMLINE_REVIEW_STATUS_NO_CLASSIFICATION_PROVIDED: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 1
    """corresponds to "no classification provided" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_NO_ASSERTION_CRITERIA_PROVIDED: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 2
    """corresponds to "no assertion criteria provided" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_CRITERIA_PROVIDED_SINGLE_SUBMITTER: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 3
    """corresponds to "criteria provided, single submitter" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_CRITERIA_PROVIDED_MULTIPLE_SUBMITTERS_NO_CONFLICTS: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 4
    """corresponds to "criteria provided, multiple submitters, no conflicts" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_CRITERIA_PROVIDED_CONFLICTING_CLASSIFICATIONS: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 5
    """corresponds to "criteria provided, conflicting classifications" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_REVIEWED_BY_EXPERT_PANEL: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 6
    """corresponds to "reviewed by expert panel" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_PRACTICE_GUIDELINE: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 7
    """corresponds to "practice guideline" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_NO_CLASSIFICATIONS_FROM_UNFLAGGED_RECORDS: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 8
    """corresponds to "no classifications from unflagged records" """
    AGGREGATE_GERMLINE_REVIEW_STATUS_NO_CLASSIFICATION_FOR_THE_SINGLE_VARIANT: (
        _AggregateGermlineReviewStatus.ValueType
    )  # 9
    """corresponds to "no classification for the single variant" """

class AggregateGermlineReviewStatus(
    _AggregateGermlineReviewStatus, metaclass=_AggregateGermlineReviewStatusEnumTypeWrapper
):
    """Enumeration describing aggregate germline review status value."""

AGGREGATE_GERMLINE_REVIEW_STATUS_UNSPECIFIED: AggregateGermlineReviewStatus.ValueType  # 0
"""unspecified aggregate germline review status value"""
AGGREGATE_GERMLINE_REVIEW_STATUS_NO_CLASSIFICATION_PROVIDED: (
    AggregateGermlineReviewStatus.ValueType
)  # 1
"""corresponds to "no classification provided" """
AGGREGATE_GERMLINE_REVIEW_STATUS_NO_ASSERTION_CRITERIA_PROVIDED: (
    AggregateGermlineReviewStatus.ValueType
)  # 2
"""corresponds to "no assertion criteria provided" """
AGGREGATE_GERMLINE_REVIEW_STATUS_CRITERIA_PROVIDED_SINGLE_SUBMITTER: (
    AggregateGermlineReviewStatus.ValueType
)  # 3
"""corresponds to "criteria provided, single submitter" """
AGGREGATE_GERMLINE_REVIEW_STATUS_CRITERIA_PROVIDED_MULTIPLE_SUBMITTERS_NO_CONFLICTS: (
    AggregateGermlineReviewStatus.ValueType
)  # 4
"""corresponds to "criteria provided, multiple submitters, no conflicts" """
AGGREGATE_GERMLINE_REVIEW_STATUS_CRITERIA_PROVIDED_CONFLICTING_CLASSIFICATIONS: (
    AggregateGermlineReviewStatus.ValueType
)  # 5
"""corresponds to "criteria provided, conflicting classifications" """
AGGREGATE_GERMLINE_REVIEW_STATUS_REVIEWED_BY_EXPERT_PANEL: (
    AggregateGermlineReviewStatus.ValueType
)  # 6
"""corresponds to "reviewed by expert panel" """
AGGREGATE_GERMLINE_REVIEW_STATUS_PRACTICE_GUIDELINE: AggregateGermlineReviewStatus.ValueType  # 7
"""corresponds to "practice guideline" """
AGGREGATE_GERMLINE_REVIEW_STATUS_NO_CLASSIFICATIONS_FROM_UNFLAGGED_RECORDS: (
    AggregateGermlineReviewStatus.ValueType
)  # 8
"""corresponds to "no classifications from unflagged records" """
AGGREGATE_GERMLINE_REVIEW_STATUS_NO_CLASSIFICATION_FOR_THE_SINGLE_VARIANT: (
    AggregateGermlineReviewStatus.ValueType
)  # 9
"""corresponds to "no classification for the single variant" """
global___AggregateGermlineReviewStatus = AggregateGermlineReviewStatus

class OutputHeader(google.protobuf.message.Message):
    """Store meta information about query results."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GENOME_RELEASE_FIELD_NUMBER: builtins.int
    VERSIONS_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    CASE_UUID_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    STATISTICS_FIELD_NUMBER: builtins.int
    VARIANT_SCORE_COLUMNS_FIELD_NUMBER: builtins.int
    genome_release: global___GenomeRelease.ValueType
    """Genome release."""
    @property
    def versions(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VersionEntry]:
        """Versions for each used database or software."""

    @property
    def query(self) -> seqvars.protos.query_pb2.CaseQuery:
        """The used query settings."""
    case_uuid: builtins.str
    """Case UUID."""
    @property
    def resources(self) -> global___ResourcesUsed:
        """Resources used."""

    @property
    def statistics(self) -> global___OutputStatistics:
        """Statistics about results."""

    @property
    def variant_score_columns(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___VariantScoreColumn
    ]:
        """Information about the variant scores in the output."""

    def __init__(
        self,
        *,
        genome_release: global___GenomeRelease.ValueType = ...,
        versions: collections.abc.Iterable[global___VersionEntry] | None = ...,
        query: seqvars.protos.query_pb2.CaseQuery | None = ...,
        case_uuid: builtins.str = ...,
        resources: global___ResourcesUsed | None = ...,
        statistics: global___OutputStatistics | None = ...,
        variant_score_columns: collections.abc.Iterable[global___VariantScoreColumn] | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_query",
            b"_query",
            "_resources",
            b"_resources",
            "_statistics",
            b"_statistics",
            "query",
            b"query",
            "resources",
            b"resources",
            "statistics",
            b"statistics",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_query",
            b"_query",
            "_resources",
            b"_resources",
            "_statistics",
            b"_statistics",
            "case_uuid",
            b"case_uuid",
            "genome_release",
            b"genome_release",
            "query",
            b"query",
            "resources",
            b"resources",
            "statistics",
            b"statistics",
            "variant_score_columns",
            b"variant_score_columns",
            "versions",
            b"versions",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_query", b"_query"]
    ) -> typing_extensions.Literal["query"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_resources", b"_resources"]
    ) -> typing_extensions.Literal["resources"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_statistics", b"_statistics"]
    ) -> typing_extensions.Literal["statistics"] | None: ...

global___OutputHeader = OutputHeader

class VariantScoreColumn(google.protobuf.message.Message):
    """Store information about the variant scores in the output."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the score."""
    label: builtins.str
    """Label for the score."""
    description: builtins.str
    """Description of the score."""
    type: global___VariantScoreColumnType.ValueType
    """Type of the score."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        label: builtins.str = ...,
        description: builtins.str = ...,
        type: global___VariantScoreColumnType.ValueType = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "description", b"description", "label", b"label", "name", b"name", "type", b"type"
        ],
    ) -> None: ...

global___VariantScoreColumn = VariantScoreColumn

class VersionEntry(google.protobuf.message.Message):
    """Store version information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the version."""
    version: builtins.str
    """Version string."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["name", b"name", "version", b"version"]
    ) -> None: ...

global___VersionEntry = VersionEntry

class ResourcesUsed(google.protobuf.message.Message):
    """Query resource requirements."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    MEMORY_USED_FIELD_NUMBER: builtins.int
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Start time."""

    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """End time."""
    memory_used: builtins.int
    """RAM usage in bytes."""
    def __init__(
        self,
        *,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        memory_used: builtins.int = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_end_time",
            b"_end_time",
            "_start_time",
            b"_start_time",
            "end_time",
            b"end_time",
            "start_time",
            b"start_time",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_end_time",
            b"_end_time",
            "_start_time",
            b"_start_time",
            "end_time",
            b"end_time",
            "memory_used",
            b"memory_used",
            "start_time",
            b"start_time",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_end_time", b"_end_time"]
    ) -> typing_extensions.Literal["end_time"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_start_time", b"_start_time"]
    ) -> typing_extensions.Literal["start_time"] | None: ...

global___ResourcesUsed = ResourcesUsed

class OutputStatistics(google.protobuf.message.Message):
    """Store statistics about the output."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COUNT_TOTAL_FIELD_NUMBER: builtins.int
    COUNT_PASSED_FIELD_NUMBER: builtins.int
    PASSED_BY_CONSEQUENCES_FIELD_NUMBER: builtins.int
    count_total: builtins.int
    """Total number of records."""
    count_passed: builtins.int
    """Number of passed records."""
    @property
    def passed_by_consequences(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___ConsequenceCount
    ]:
        """Passed records by consequence."""

    def __init__(
        self,
        *,
        count_total: builtins.int = ...,
        count_passed: builtins.int = ...,
        passed_by_consequences: collections.abc.Iterable[global___ConsequenceCount] | None = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "count_passed",
            b"count_passed",
            "count_total",
            b"count_total",
            "passed_by_consequences",
            b"passed_by_consequences",
        ],
    ) -> None: ...

global___OutputStatistics = OutputStatistics

class ConsequenceCount(google.protobuf.message.Message):
    """Store consequence statistics."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSEQUENCE_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    consequence: seqvars.protos.query_pb2.Consequence.ValueType
    """Consequence."""
    count: builtins.int
    """Number of records."""
    def __init__(
        self,
        *,
        consequence: seqvars.protos.query_pb2.Consequence.ValueType = ...,
        count: builtins.int = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal["consequence", b"consequence", "count", b"count"],
    ) -> None: ...

global___ConsequenceCount = ConsequenceCount

class OutputRecord(google.protobuf.message.Message):
    """Store one record in the output."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UUID_FIELD_NUMBER: builtins.int
    CASE_UUID_FIELD_NUMBER: builtins.int
    VCF_VARIANT_FIELD_NUMBER: builtins.int
    VARIANT_ANNOTATION_FIELD_NUMBER: builtins.int
    uuid: builtins.str
    """UUID of the record."""
    case_uuid: builtins.str
    """Case UUID."""
    @property
    def vcf_variant(self) -> global___VcfVariant:
        """The description."""

    @property
    def variant_annotation(self) -> global___VariantAnnotation:
        """The variant annotation payload."""

    def __init__(
        self,
        *,
        uuid: builtins.str = ...,
        case_uuid: builtins.str = ...,
        vcf_variant: global___VcfVariant | None = ...,
        variant_annotation: global___VariantAnnotation | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_variant_annotation",
            b"_variant_annotation",
            "_vcf_variant",
            b"_vcf_variant",
            "variant_annotation",
            b"variant_annotation",
            "vcf_variant",
            b"vcf_variant",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_variant_annotation",
            b"_variant_annotation",
            "_vcf_variant",
            b"_vcf_variant",
            "case_uuid",
            b"case_uuid",
            "uuid",
            b"uuid",
            "variant_annotation",
            b"variant_annotation",
            "vcf_variant",
            b"vcf_variant",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_variant_annotation", b"_variant_annotation"]
    ) -> typing_extensions.Literal["variant_annotation"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_vcf_variant", b"_vcf_variant"]
    ) -> typing_extensions.Literal["vcf_variant"] | None: ...

global___OutputRecord = OutputRecord

class VcfVariant(google.protobuf.message.Message):
    """Store a sequnce variant in VCF representation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GENOME_RELEASE_FIELD_NUMBER: builtins.int
    CHROM_FIELD_NUMBER: builtins.int
    CHROM_NO_FIELD_NUMBER: builtins.int
    POS_FIELD_NUMBER: builtins.int
    REF_ALLELE_FIELD_NUMBER: builtins.int
    ALT_ALLELE_FIELD_NUMBER: builtins.int
    genome_release: global___GenomeRelease.ValueType
    """Genome release."""
    chrom: builtins.str
    """Chromosome, normalized."""
    chrom_no: builtins.int
    """Chromosome number for sorting."""
    pos: builtins.int
    """1-based position."""
    ref_allele: builtins.str
    """Reference allele."""
    alt_allele: builtins.str
    """Alternative allele."""
    def __init__(
        self,
        *,
        genome_release: global___GenomeRelease.ValueType = ...,
        chrom: builtins.str = ...,
        chrom_no: builtins.int = ...,
        pos: builtins.int = ...,
        ref_allele: builtins.str = ...,
        alt_allele: builtins.str = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "alt_allele",
            b"alt_allele",
            "chrom",
            b"chrom",
            "chrom_no",
            b"chrom_no",
            "genome_release",
            b"genome_release",
            "pos",
            b"pos",
            "ref_allele",
            b"ref_allele",
        ],
    ) -> None: ...

global___VcfVariant = VcfVariant

class VariantAnnotation(google.protobuf.message.Message):
    """Store the variant annotation payload (always for a single gene)."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GENE_FIELD_NUMBER: builtins.int
    VARIANT_FIELD_NUMBER: builtins.int
    CALL_FIELD_NUMBER: builtins.int
    @property
    def gene(self) -> global___GeneRelatedAnnotation:
        """Gene-related annotation."""

    @property
    def variant(self) -> global___VariantRelatedAnnotation:
        """Variant-related annotation."""

    @property
    def call(self) -> global___CallRelatedAnnotation:
        """Call-related annotation."""

    def __init__(
        self,
        *,
        gene: global___GeneRelatedAnnotation | None = ...,
        variant: global___VariantRelatedAnnotation | None = ...,
        call: global___CallRelatedAnnotation | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_call",
            b"_call",
            "_gene",
            b"_gene",
            "_variant",
            b"_variant",
            "call",
            b"call",
            "gene",
            b"gene",
            "variant",
            b"variant",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_call",
            b"_call",
            "_gene",
            b"_gene",
            "_variant",
            b"_variant",
            "call",
            b"call",
            "gene",
            b"gene",
            "variant",
            b"variant",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_call", b"_call"]
    ) -> typing_extensions.Literal["call"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_gene", b"_gene"]
    ) -> typing_extensions.Literal["gene"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_variant", b"_variant"]
    ) -> typing_extensions.Literal["variant"] | None: ...

global___VariantAnnotation = VariantAnnotation

class GeneRelatedAnnotation(google.protobuf.message.Message):
    """
    Gene-related annotation.

    Store gene-related annotation (always for a single gene).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDENTITY_FIELD_NUMBER: builtins.int
    CONSEQUENCES_FIELD_NUMBER: builtins.int
    PHENOTYPES_FIELD_NUMBER: builtins.int
    CONSTRAINTS_FIELD_NUMBER: builtins.int
    @property
    def identity(self) -> global___GeneIdentity:
        """Gene ID information."""

    @property
    def consequences(self) -> global___GeneRelatedConsequences:
        """Gene-related consequences, if any (none if intergenic)."""

    @property
    def phenotypes(self) -> global___GeneRelatedPhenotypes:
        """Gene-related phenotype information, if any."""

    @property
    def constraints(self) -> global___GeneRelatedConstraints:
        """Gene-wise constraints on the gene, if any."""

    def __init__(
        self,
        *,
        identity: global___GeneIdentity | None = ...,
        consequences: global___GeneRelatedConsequences | None = ...,
        phenotypes: global___GeneRelatedPhenotypes | None = ...,
        constraints: global___GeneRelatedConstraints | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_consequences",
            b"_consequences",
            "_constraints",
            b"_constraints",
            "_identity",
            b"_identity",
            "_phenotypes",
            b"_phenotypes",
            "consequences",
            b"consequences",
            "constraints",
            b"constraints",
            "identity",
            b"identity",
            "phenotypes",
            b"phenotypes",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_consequences",
            b"_consequences",
            "_constraints",
            b"_constraints",
            "_identity",
            b"_identity",
            "_phenotypes",
            b"_phenotypes",
            "consequences",
            b"consequences",
            "constraints",
            b"constraints",
            "identity",
            b"identity",
            "phenotypes",
            b"phenotypes",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_consequences", b"_consequences"]
    ) -> typing_extensions.Literal["consequences"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_constraints", b"_constraints"]
    ) -> typing_extensions.Literal["constraints"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_identity", b"_identity"]
    ) -> typing_extensions.Literal["identity"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_phenotypes", b"_phenotypes"]
    ) -> typing_extensions.Literal["phenotypes"] | None: ...

global___GeneRelatedAnnotation = GeneRelatedAnnotation

class GeneIdentity(google.protobuf.message.Message):
    """Gene identity related information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HGNC_ID_FIELD_NUMBER: builtins.int
    GENE_SYMBOL_FIELD_NUMBER: builtins.int
    hgnc_id: builtins.str
    """HGNC ID."""
    gene_symbol: builtins.str
    """HGNC symbol."""
    def __init__(
        self,
        *,
        hgnc_id: builtins.str = ...,
        gene_symbol: builtins.str = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal["gene_symbol", b"gene_symbol", "hgnc_id", b"hgnc_id"],
    ) -> None: ...

global___GeneIdentity = GeneIdentity

class GeneRelatedConsequences(google.protobuf.message.Message):
    """/ Gene-related consequences of a variant."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HGVS_T_FIELD_NUMBER: builtins.int
    HGVS_P_FIELD_NUMBER: builtins.int
    CONSEQUENCES_FIELD_NUMBER: builtins.int
    hgvs_t: builtins.str
    """HGVS. {c,n} code of variant."""
    hgvs_p: builtins.str
    """HGVS.p code of variant."""
    @property
    def consequences(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        seqvars.protos.query_pb2.Consequence.ValueType
    ]:
        """Predicted variant consequences."""

    def __init__(
        self,
        *,
        hgvs_t: builtins.str = ...,
        hgvs_p: builtins.str | None = ...,
        consequences: (
            collections.abc.Iterable[seqvars.protos.query_pb2.Consequence.ValueType] | None
        ) = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["_hgvs_p", b"_hgvs_p", "hgvs_p", b"hgvs_p"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_hgvs_p",
            b"_hgvs_p",
            "consequences",
            b"consequences",
            "hgvs_p",
            b"hgvs_p",
            "hgvs_t",
            b"hgvs_t",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_hgvs_p", b"_hgvs_p"]
    ) -> typing_extensions.Literal["hgvs_p"] | None: ...

global___GeneRelatedConsequences = GeneRelatedConsequences

class GeneRelatedPhenotypes(google.protobuf.message.Message):
    """Phenotype-related information, if any."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IS_ACMG_SF_FIELD_NUMBER: builtins.int
    IS_DISEASE_GENE_FIELD_NUMBER: builtins.int
    is_acmg_sf: builtins.bool
    """ACMG supplementary finding list."""
    is_disease_gene: builtins.bool
    """Whether is a known disease gene."""
    def __init__(
        self,
        *,
        is_acmg_sf: builtins.bool = ...,
        is_disease_gene: builtins.bool = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "is_acmg_sf", b"is_acmg_sf", "is_disease_gene", b"is_disease_gene"
        ],
    ) -> None: ...

global___GeneRelatedPhenotypes = GeneRelatedPhenotypes

class GeneRelatedConstraints(google.protobuf.message.Message):
    """Gene-wise constraints."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GNOMAD_FIELD_NUMBER: builtins.int
    DECIPHER_FIELD_NUMBER: builtins.int
    RCNV_FIELD_NUMBER: builtins.int
    SHET_FIELD_NUMBER: builtins.int
    CLINGEN_FIELD_NUMBER: builtins.int
    @property
    def gnomad(self) -> global___GnomadConstraints:
        """gnomAD constraints"""

    @property
    def decipher(self) -> global___DecipherConstraints:
        """DECIPHER constraints"""

    @property
    def rcnv(self) -> global___RcnvConstraints:
        """RCNV constraints"""

    @property
    def shet(self) -> global___ShetConstraints:
        """sHET constraints"""

    @property
    def clingen(self) -> global___ClingenDosageAnnotation:
        """ClinGen dosage annotation"""

    def __init__(
        self,
        *,
        gnomad: global___GnomadConstraints | None = ...,
        decipher: global___DecipherConstraints | None = ...,
        rcnv: global___RcnvConstraints | None = ...,
        shet: global___ShetConstraints | None = ...,
        clingen: global___ClingenDosageAnnotation | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_clingen",
            b"_clingen",
            "_decipher",
            b"_decipher",
            "_gnomad",
            b"_gnomad",
            "_rcnv",
            b"_rcnv",
            "_shet",
            b"_shet",
            "clingen",
            b"clingen",
            "decipher",
            b"decipher",
            "gnomad",
            b"gnomad",
            "rcnv",
            b"rcnv",
            "shet",
            b"shet",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_clingen",
            b"_clingen",
            "_decipher",
            b"_decipher",
            "_gnomad",
            b"_gnomad",
            "_rcnv",
            b"_rcnv",
            "_shet",
            b"_shet",
            "clingen",
            b"clingen",
            "decipher",
            b"decipher",
            "gnomad",
            b"gnomad",
            "rcnv",
            b"rcnv",
            "shet",
            b"shet",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_clingen", b"_clingen"]
    ) -> typing_extensions.Literal["clingen"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_decipher", b"_decipher"]
    ) -> typing_extensions.Literal["decipher"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_gnomad", b"_gnomad"]
    ) -> typing_extensions.Literal["gnomad"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_rcnv", b"_rcnv"]
    ) -> typing_extensions.Literal["rcnv"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_shet", b"_shet"]
    ) -> typing_extensions.Literal["shet"] | None: ...

global___GeneRelatedConstraints = GeneRelatedConstraints

class GnomadConstraints(google.protobuf.message.Message):
    """gnomAD constraint information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MIS_Z_FIELD_NUMBER: builtins.int
    OE_LOF_FIELD_NUMBER: builtins.int
    OE_LOF_LOWER_FIELD_NUMBER: builtins.int
    OE_LOF_UPPER_FIELD_NUMBER: builtins.int
    OE_MIS_FIELD_NUMBER: builtins.int
    OE_MIS_LOWER_FIELD_NUMBER: builtins.int
    OE_MIS_UPPER_FIELD_NUMBER: builtins.int
    PLI_FIELD_NUMBER: builtins.int
    SYN_Z_FIELD_NUMBER: builtins.int
    mis_z: builtins.float
    """mis_z score"""
    oe_lof: builtins.float
    """oe_lof score"""
    oe_lof_lower: builtins.float
    """oe_lof_lower score"""
    oe_lof_upper: builtins.float
    """oe_lof_upper score (LOEF)"""
    oe_mis: builtins.float
    """oe_mis score"""
    oe_mis_lower: builtins.float
    """oe_mis_lower score"""
    oe_mis_upper: builtins.float
    """oe_mis_upper score"""
    pli: builtins.float
    """pLI score"""
    syn_z: builtins.float
    """syn_z score"""
    def __init__(
        self,
        *,
        mis_z: builtins.float = ...,
        oe_lof: builtins.float = ...,
        oe_lof_lower: builtins.float = ...,
        oe_lof_upper: builtins.float = ...,
        oe_mis: builtins.float = ...,
        oe_mis_lower: builtins.float = ...,
        oe_mis_upper: builtins.float = ...,
        pli: builtins.float = ...,
        syn_z: builtins.float = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "mis_z",
            b"mis_z",
            "oe_lof",
            b"oe_lof",
            "oe_lof_lower",
            b"oe_lof_lower",
            "oe_lof_upper",
            b"oe_lof_upper",
            "oe_mis",
            b"oe_mis",
            "oe_mis_lower",
            b"oe_mis_lower",
            "oe_mis_upper",
            b"oe_mis_upper",
            "pli",
            b"pli",
            "syn_z",
            b"syn_z",
        ],
    ) -> None: ...

global___GnomadConstraints = GnomadConstraints

class DecipherConstraints(google.protobuf.message.Message):
    """DECIPHER constraint information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    P_HI_FIELD_NUMBER: builtins.int
    HI_INDEX_FIELD_NUMBER: builtins.int
    p_hi: builtins.float
    """HI percentile"""
    hi_index: builtins.float
    """HI raw score"""
    def __init__(
        self,
        *,
        p_hi: builtins.float = ...,
        hi_index: builtins.float = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["hi_index", b"hi_index", "p_hi", b"p_hi"]
    ) -> None: ...

global___DecipherConstraints = DecipherConstraints

class RcnvConstraints(google.protobuf.message.Message):
    """RCNV constraint information from PMID:35917817"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    P_HAPLO_FIELD_NUMBER: builtins.int
    P_TRIPLO_FIELD_NUMBER: builtins.int
    p_haplo: builtins.float
    """pHaplo score"""
    p_triplo: builtins.float
    """pTriplo score"""
    def __init__(
        self,
        *,
        p_haplo: builtins.float = ...,
        p_triplo: builtins.float = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["p_haplo", b"p_haplo", "p_triplo", b"p_triplo"]
    ) -> None: ...

global___RcnvConstraints = RcnvConstraints

class ShetConstraints(google.protobuf.message.Message):
    """sHET constraint information from  PMID:31004148"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    S_HET_FIELD_NUMBER: builtins.int
    s_het: builtins.float
    """sHet score"""
    def __init__(
        self,
        *,
        s_het: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["s_het", b"s_het"]) -> None: ...

global___ShetConstraints = ShetConstraints

class ClingenDosageAnnotation(google.protobuf.message.Message):
    """ClinGen dosage annotation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HAPLO_FIELD_NUMBER: builtins.int
    TRIPLO_FIELD_NUMBER: builtins.int
    haplo: global___ClingenDosageScore.ValueType
    """Haploinsufficiency score."""
    triplo: global___ClingenDosageScore.ValueType
    """Triplosensitivity score."""
    def __init__(
        self,
        *,
        haplo: global___ClingenDosageScore.ValueType = ...,
        triplo: global___ClingenDosageScore.ValueType = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["haplo", b"haplo", "triplo", b"triplo"]
    ) -> None: ...

global___ClingenDosageAnnotation = ClingenDosageAnnotation

class VariantRelatedAnnotation(google.protobuf.message.Message):
    """
    Variant-related annotation.

    Store variant-related annotation.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DBIDS_FIELD_NUMBER: builtins.int
    FREQUENCY_FIELD_NUMBER: builtins.int
    CLINVAR_FIELD_NUMBER: builtins.int
    SCORES_FIELD_NUMBER: builtins.int
    @property
    def dbids(self) -> global___DbIds:
        """Database identifiers."""

    @property
    def frequency(self) -> global___FrequencyAnnotation:
        """Frequency annotation."""

    @property
    def clinvar(self) -> global___ClinvarAnnotation:
        """ClinVar annotation."""

    @property
    def scores(self) -> global___ScoreAnnotations:
        """Score annotations."""

    def __init__(
        self,
        *,
        dbids: global___DbIds | None = ...,
        frequency: global___FrequencyAnnotation | None = ...,
        clinvar: global___ClinvarAnnotation | None = ...,
        scores: global___ScoreAnnotations | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_clinvar",
            b"_clinvar",
            "_dbids",
            b"_dbids",
            "_frequency",
            b"_frequency",
            "_scores",
            b"_scores",
            "clinvar",
            b"clinvar",
            "dbids",
            b"dbids",
            "frequency",
            b"frequency",
            "scores",
            b"scores",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_clinvar",
            b"_clinvar",
            "_dbids",
            b"_dbids",
            "_frequency",
            b"_frequency",
            "_scores",
            b"_scores",
            "clinvar",
            b"clinvar",
            "dbids",
            b"dbids",
            "frequency",
            b"frequency",
            "scores",
            b"scores",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_clinvar", b"_clinvar"]
    ) -> typing_extensions.Literal["clinvar"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_dbids", b"_dbids"]
    ) -> typing_extensions.Literal["dbids"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_frequency", b"_frequency"]
    ) -> typing_extensions.Literal["frequency"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_scores", b"_scores"]
    ) -> typing_extensions.Literal["scores"] | None: ...

global___VariantRelatedAnnotation = VariantRelatedAnnotation

class FrequencyAnnotation(google.protobuf.message.Message):
    """Population frequency information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GNOMAD_EXOMES_FIELD_NUMBER: builtins.int
    GNOMAD_GENOMES_FIELD_NUMBER: builtins.int
    GNOMAD_MTDNA_FIELD_NUMBER: builtins.int
    HELIXMTDB_FIELD_NUMBER: builtins.int
    INHOUSE_FIELD_NUMBER: builtins.int
    @property
    def gnomad_exomes(self) -> global___NuclearFrequency:
        """gnomAD-exomes filter"""

    @property
    def gnomad_genomes(self) -> global___NuclearFrequency:
        """gnomAD-genomes filter"""

    @property
    def gnomad_mtdna(self) -> global___GnomadMitochondrialFrequency:
        """gnomAD-MT filter"""

    @property
    def helixmtdb(self) -> global___HelixMtDbFrequency:
        """HelixMtDb filter"""

    @property
    def inhouse(self) -> global___NuclearFrequency:
        """In-house filter"""

    def __init__(
        self,
        *,
        gnomad_exomes: global___NuclearFrequency | None = ...,
        gnomad_genomes: global___NuclearFrequency | None = ...,
        gnomad_mtdna: global___GnomadMitochondrialFrequency | None = ...,
        helixmtdb: global___HelixMtDbFrequency | None = ...,
        inhouse: global___NuclearFrequency | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_gnomad_exomes",
            b"_gnomad_exomes",
            "_gnomad_genomes",
            b"_gnomad_genomes",
            "_gnomad_mtdna",
            b"_gnomad_mtdna",
            "_helixmtdb",
            b"_helixmtdb",
            "_inhouse",
            b"_inhouse",
            "gnomad_exomes",
            b"gnomad_exomes",
            "gnomad_genomes",
            b"gnomad_genomes",
            "gnomad_mtdna",
            b"gnomad_mtdna",
            "helixmtdb",
            b"helixmtdb",
            "inhouse",
            b"inhouse",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_gnomad_exomes",
            b"_gnomad_exomes",
            "_gnomad_genomes",
            b"_gnomad_genomes",
            "_gnomad_mtdna",
            b"_gnomad_mtdna",
            "_helixmtdb",
            b"_helixmtdb",
            "_inhouse",
            b"_inhouse",
            "gnomad_exomes",
            b"gnomad_exomes",
            "gnomad_genomes",
            b"gnomad_genomes",
            "gnomad_mtdna",
            b"gnomad_mtdna",
            "helixmtdb",
            b"helixmtdb",
            "inhouse",
            b"inhouse",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_gnomad_exomes", b"_gnomad_exomes"]
    ) -> typing_extensions.Literal["gnomad_exomes"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_gnomad_genomes", b"_gnomad_genomes"]
    ) -> typing_extensions.Literal["gnomad_genomes"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_gnomad_mtdna", b"_gnomad_mtdna"]
    ) -> typing_extensions.Literal["gnomad_mtdna"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_helixmtdb", b"_helixmtdb"]
    ) -> typing_extensions.Literal["helixmtdb"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_inhouse", b"_inhouse"]
    ) -> typing_extensions.Literal["inhouse"] | None: ...

global___FrequencyAnnotation = FrequencyAnnotation

class NuclearFrequency(google.protobuf.message.Message):
    """gnomAD and in-house frequency information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AN_FIELD_NUMBER: builtins.int
    HET_FIELD_NUMBER: builtins.int
    HOMALT_FIELD_NUMBER: builtins.int
    HEMIALT_FIELD_NUMBER: builtins.int
    AF_FIELD_NUMBER: builtins.int
    an: builtins.int
    """Number of covered alleles."""
    het: builtins.int
    """Number of in-house heterozygous carriers"""
    homalt: builtins.int
    """Number of in-house homozygous carriers"""
    hemialt: builtins.int
    """Number of in-house hemizygous carriers"""
    af: builtins.float
    """Allele frequency."""
    def __init__(
        self,
        *,
        an: builtins.int = ...,
        het: builtins.int = ...,
        homalt: builtins.int = ...,
        hemialt: builtins.int = ...,
        af: builtins.float = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "af", b"af", "an", b"an", "hemialt", b"hemialt", "het", b"het", "homalt", b"homalt"
        ],
    ) -> None: ...

global___NuclearFrequency = NuclearFrequency

class GnomadMitochondrialFrequency(google.protobuf.message.Message):
    """gnomAD mitochondrial frequency information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AN_FIELD_NUMBER: builtins.int
    HET_FIELD_NUMBER: builtins.int
    HOMALT_FIELD_NUMBER: builtins.int
    AF_FIELD_NUMBER: builtins.int
    an: builtins.int
    """Number of covered alleles."""
    het: builtins.int
    """Number of heteroplasmic carriers."""
    homalt: builtins.int
    """Number of homoplasmic carriers."""
    af: builtins.float
    """Allele frequency."""
    def __init__(
        self,
        *,
        an: builtins.int = ...,
        het: builtins.int = ...,
        homalt: builtins.int = ...,
        af: builtins.float = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "af", b"af", "an", b"an", "het", b"het", "homalt", b"homalt"
        ],
    ) -> None: ...

global___GnomadMitochondrialFrequency = GnomadMitochondrialFrequency

class HelixMtDbFrequency(google.protobuf.message.Message):
    """HelixMtDb frequency information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AN_FIELD_NUMBER: builtins.int
    HET_FIELD_NUMBER: builtins.int
    HOMALT_FIELD_NUMBER: builtins.int
    AF_FIELD_NUMBER: builtins.int
    an: builtins.int
    """Number of covered alleles."""
    het: builtins.int
    """Number of heterozygous carriers in HelixMtDb"""
    homalt: builtins.int
    """Number of homozygous carriers in HelixMtDb"""
    af: builtins.float
    """Frequency in HelixMtDb"""
    def __init__(
        self,
        *,
        an: builtins.int = ...,
        het: builtins.int = ...,
        homalt: builtins.int = ...,
        af: builtins.float = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "af", b"af", "an", b"an", "het", b"het", "homalt", b"homalt"
        ],
    ) -> None: ...

global___HelixMtDbFrequency = HelixMtDbFrequency

class DbIds(google.protobuf.message.Message):
    """Database identifiers."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DBSNP_ID_FIELD_NUMBER: builtins.int
    dbsnp_id: builtins.str
    """dbSNP ID."""
    def __init__(
        self,
        *,
        dbsnp_id: builtins.str | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal["_dbsnp_id", b"_dbsnp_id", "dbsnp_id", b"dbsnp_id"],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal["_dbsnp_id", b"_dbsnp_id", "dbsnp_id", b"dbsnp_id"],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_dbsnp_id", b"_dbsnp_id"]
    ) -> typing_extensions.Literal["dbsnp_id"] | None: ...

global___DbIds = DbIds

class ClinvarAnnotation(google.protobuf.message.Message):
    """ClinVar-related annotation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VCV_ACCESSION_FIELD_NUMBER: builtins.int
    GERMLINE_SIGNIFICANCE_DESCRIPTION_FIELD_NUMBER: builtins.int
    GERMLINE_REVIEW_STATUS_FIELD_NUMBER: builtins.int
    EFFECTIVE_GERMLINE_SIGNIFICANCE_DESCRIPTION_FIELD_NUMBER: builtins.int
    vcv_accession: builtins.str
    """VCV accession."""
    germline_significance_description: builtins.str
    """Aggregate germline significance description."""
    germline_review_status: global___AggregateGermlineReviewStatus.ValueType
    """Aggregate germline review status."""
    effective_germline_significance_description: builtins.str
    """Effective (aka "worst") germline significance description."""
    def __init__(
        self,
        *,
        vcv_accession: builtins.str = ...,
        germline_significance_description: builtins.str = ...,
        germline_review_status: global___AggregateGermlineReviewStatus.ValueType = ...,
        effective_germline_significance_description: builtins.str = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "effective_germline_significance_description",
            b"effective_germline_significance_description",
            "germline_review_status",
            b"germline_review_status",
            "germline_significance_description",
            b"germline_significance_description",
            "vcv_accession",
            b"vcv_accession",
        ],
    ) -> None: ...

global___ClinvarAnnotation = ClinvarAnnotation

class ScoreAnnotations(google.protobuf.message.Message):
    """Score annotations."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ScoreEntry]:
        """Key/value pairs for scores."""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___ScoreEntry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["entries", b"entries"]) -> None: ...

global___ScoreAnnotations = ScoreAnnotations

class ScoreEntry(google.protobuf.message.Message):
    """Score entry."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: builtins.str
    """Key."""
    @property
    def value(self) -> google.protobuf.struct_pb2.Value:
        """Value.
        p2p: {"type": "p2p@import|typing|Any", "default_factory": "p2p@local|none"}
        """

    def __init__(
        self,
        *,
        key: builtins.str = ...,
        value: google.protobuf.struct_pb2.Value | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["_value", b"_value", "value", b"value"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_value", b"_value", "key", b"key", "value", b"value"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_value", b"_value"]
    ) -> typing_extensions.Literal["value"] | None: ...

global___ScoreEntry = ScoreEntry

class CallRelatedAnnotation(google.protobuf.message.Message):
    """
    Gene-related annotation.

    Store call-related annotation.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CALL_INFOS_FIELD_NUMBER: builtins.int
    @property
    def call_infos(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___SampleCallInfo
    ]:
        """Store call information for each sample."""

    def __init__(
        self,
        *,
        call_infos: collections.abc.Iterable[global___SampleCallInfo] | None = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["call_infos", b"call_infos"]
    ) -> None: ...

global___CallRelatedAnnotation = CallRelatedAnnotation

class SampleCallInfo(google.protobuf.message.Message):
    """Store call information for one sample."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLE_FIELD_NUMBER: builtins.int
    GENOTYPE_FIELD_NUMBER: builtins.int
    DP_FIELD_NUMBER: builtins.int
    AD_FIELD_NUMBER: builtins.int
    GQ_FIELD_NUMBER: builtins.int
    PS_FIELD_NUMBER: builtins.int
    sample: builtins.str
    """Name of the sample."""
    genotype: builtins.str
    """Genotype."""
    dp: builtins.int
    """Depth of coverage."""
    ad: builtins.int
    """Alternate read depth."""
    gq: builtins.float
    """Genotype quality."""
    ps: builtins.int
    """Phase set ID."""
    def __init__(
        self,
        *,
        sample: builtins.str = ...,
        genotype: builtins.str | None = ...,
        dp: builtins.int | None = ...,
        ad: builtins.int | None = ...,
        gq: builtins.float | None = ...,
        ps: builtins.int | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_ad",
            b"_ad",
            "_dp",
            b"_dp",
            "_genotype",
            b"_genotype",
            "_gq",
            b"_gq",
            "_ps",
            b"_ps",
            "ad",
            b"ad",
            "dp",
            b"dp",
            "genotype",
            b"genotype",
            "gq",
            b"gq",
            "ps",
            b"ps",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_ad",
            b"_ad",
            "_dp",
            b"_dp",
            "_genotype",
            b"_genotype",
            "_gq",
            b"_gq",
            "_ps",
            b"_ps",
            "ad",
            b"ad",
            "dp",
            b"dp",
            "genotype",
            b"genotype",
            "gq",
            b"gq",
            "ps",
            b"ps",
            "sample",
            b"sample",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_ad", b"_ad"]
    ) -> typing_extensions.Literal["ad"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_dp", b"_dp"]
    ) -> typing_extensions.Literal["dp"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_genotype", b"_genotype"]
    ) -> typing_extensions.Literal["genotype"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_gq", b"_gq"]
    ) -> typing_extensions.Literal["gq"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_ps", b"_ps"]
    ) -> typing_extensions.Literal["ps"] | None: ...

global___SampleCallInfo = SampleCallInfo
